
STM32F103-T0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000344c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000066c  08003558  08003558  00013558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bc4  08003bc4  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08003bc4  08003bc4  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003bc4  08003bc4  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bc4  08003bc4  00013bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bc8  08003bc8  00013bc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08003bcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000558  20000018  08003be4  00020018  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000570  08003be4  00020570  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   000102ba  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000026b8  00000000  00000000  000302fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000828  00000000  00000000  000329b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000720  00000000  00000000  000331e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000162a4  00000000  00000000  00033900  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a678  00000000  00000000  00049ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006e4a5  00000000  00000000  0005421c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c26c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e80  00000000  00000000  000c273c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08003540 	.word	0x08003540

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08003540 	.word	0x08003540

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f93d 	bl	80003dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f002 fc14 	bl	8002994 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f94d 	bl	8000436 <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 f91d 	bl	80003f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000014 	.word	0x20000014
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	20000038 	.word	0x20000038

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	20000038 	.word	0x20000038

08000210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000218:	f7ff fff0 	bl	80001fc <HAL_GetTick>
 800021c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000228:	d005      	beq.n	8000236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800022a:	4b09      	ldr	r3, [pc, #36]	; (8000250 <HAL_Delay+0x40>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	4413      	add	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000236:	bf00      	nop
 8000238:	f7ff ffe0 	bl	80001fc <HAL_GetTick>
 800023c:	4602      	mov	r2, r0
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	1ad3      	subs	r3, r2, r3
 8000242:	68fa      	ldr	r2, [r7, #12]
 8000244:	429a      	cmp	r2, r3
 8000246:	d8f7      	bhi.n	8000238 <HAL_Delay+0x28>
  {
  }
}
 8000248:	bf00      	nop
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000004 	.word	0x20000004

08000254 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000254:	b480      	push	{r7}
 8000256:	b085      	sub	sp, #20
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f003 0307 	and.w	r3, r3, #7
 8000262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000264:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <NVIC_SetPriorityGrouping+0x44>)
 8000266:	68db      	ldr	r3, [r3, #12]
 8000268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800026a:	68ba      	ldr	r2, [r7, #8]
 800026c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000270:	4013      	ands	r3, r2
 8000272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800027c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000286:	4a04      	ldr	r2, [pc, #16]	; (8000298 <NVIC_SetPriorityGrouping+0x44>)
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	60d3      	str	r3, [r2, #12]
}
 800028c:	bf00      	nop
 800028e:	3714      	adds	r7, #20
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	e000ed00 	.word	0xe000ed00

0800029c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <NVIC_GetPriorityGrouping+0x18>)
 80002a2:	68db      	ldr	r3, [r3, #12]
 80002a4:	0a1b      	lsrs	r3, r3, #8
 80002a6:	f003 0307 	and.w	r3, r3, #7
}
 80002aa:	4618      	mov	r0, r3
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	e000ed00 	.word	0xe000ed00

080002b8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	6039      	str	r1, [r7, #0]
 80002c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80002c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	da0b      	bge.n	80002e4 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002cc:	683b      	ldr	r3, [r7, #0]
 80002ce:	b2da      	uxtb	r2, r3
 80002d0:	490c      	ldr	r1, [pc, #48]	; (8000304 <NVIC_SetPriority+0x4c>)
 80002d2:	79fb      	ldrb	r3, [r7, #7]
 80002d4:	f003 030f 	and.w	r3, r3, #15
 80002d8:	3b04      	subs	r3, #4
 80002da:	0112      	lsls	r2, r2, #4
 80002dc:	b2d2      	uxtb	r2, r2
 80002de:	440b      	add	r3, r1
 80002e0:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002e2:	e009      	b.n	80002f8 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e4:	683b      	ldr	r3, [r7, #0]
 80002e6:	b2da      	uxtb	r2, r3
 80002e8:	4907      	ldr	r1, [pc, #28]	; (8000308 <NVIC_SetPriority+0x50>)
 80002ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ee:	0112      	lsls	r2, r2, #4
 80002f0:	b2d2      	uxtb	r2, r2
 80002f2:	440b      	add	r3, r1
 80002f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80002f8:	bf00      	nop
 80002fa:	370c      	adds	r7, #12
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bc80      	pop	{r7}
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	e000ed00 	.word	0xe000ed00
 8000308:	e000e100 	.word	0xe000e100

0800030c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800030c:	b480      	push	{r7}
 800030e:	b089      	sub	sp, #36	; 0x24
 8000310:	af00      	add	r7, sp, #0
 8000312:	60f8      	str	r0, [r7, #12]
 8000314:	60b9      	str	r1, [r7, #8]
 8000316:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	f003 0307 	and.w	r3, r3, #7
 800031e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000320:	69fb      	ldr	r3, [r7, #28]
 8000322:	f1c3 0307 	rsb	r3, r3, #7
 8000326:	2b04      	cmp	r3, #4
 8000328:	bf28      	it	cs
 800032a:	2304      	movcs	r3, #4
 800032c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800032e:	69fb      	ldr	r3, [r7, #28]
 8000330:	3304      	adds	r3, #4
 8000332:	2b06      	cmp	r3, #6
 8000334:	d902      	bls.n	800033c <NVIC_EncodePriority+0x30>
 8000336:	69fb      	ldr	r3, [r7, #28]
 8000338:	3b03      	subs	r3, #3
 800033a:	e000      	b.n	800033e <NVIC_EncodePriority+0x32>
 800033c:	2300      	movs	r3, #0
 800033e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000340:	f04f 32ff 	mov.w	r2, #4294967295
 8000344:	69bb      	ldr	r3, [r7, #24]
 8000346:	fa02 f303 	lsl.w	r3, r2, r3
 800034a:	43da      	mvns	r2, r3
 800034c:	68bb      	ldr	r3, [r7, #8]
 800034e:	401a      	ands	r2, r3
 8000350:	697b      	ldr	r3, [r7, #20]
 8000352:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000354:	f04f 31ff 	mov.w	r1, #4294967295
 8000358:	697b      	ldr	r3, [r7, #20]
 800035a:	fa01 f303 	lsl.w	r3, r1, r3
 800035e:	43d9      	mvns	r1, r3
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000364:	4313      	orrs	r3, r2
         );
}
 8000366:	4618      	mov	r0, r3
 8000368:	3724      	adds	r7, #36	; 0x24
 800036a:	46bd      	mov	sp, r7
 800036c:	bc80      	pop	{r7}
 800036e:	4770      	bx	lr

08000370 <NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000374:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000378:	4b05      	ldr	r3, [pc, #20]	; (8000390 <NVIC_SystemReset+0x20>)
 800037a:	68db      	ldr	r3, [r3, #12]
 800037c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000380:	4903      	ldr	r1, [pc, #12]	; (8000390 <NVIC_SystemReset+0x20>)
 8000382:	4b04      	ldr	r3, [pc, #16]	; (8000394 <NVIC_SystemReset+0x24>)
 8000384:	4313      	orrs	r3, r2
 8000386:	60cb      	str	r3, [r1, #12]
 8000388:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800038c:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800038e:	e7fd      	b.n	800038c <NVIC_SystemReset+0x1c>
 8000390:	e000ed00 	.word	0xe000ed00
 8000394:	05fa0004 	.word	0x05fa0004

08000398 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b082      	sub	sp, #8
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	3b01      	subs	r3, #1
 80003a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80003a8:	d301      	bcc.n	80003ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003aa:	2301      	movs	r3, #1
 80003ac:	e00f      	b.n	80003ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003ae:	4a0a      	ldr	r2, [pc, #40]	; (80003d8 <SysTick_Config+0x40>)
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	3b01      	subs	r3, #1
 80003b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003b6:	210f      	movs	r1, #15
 80003b8:	f04f 30ff 	mov.w	r0, #4294967295
 80003bc:	f7ff ff7c 	bl	80002b8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003c0:	4b05      	ldr	r3, [pc, #20]	; (80003d8 <SysTick_Config+0x40>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003c6:	4b04      	ldr	r3, [pc, #16]	; (80003d8 <SysTick_Config+0x40>)
 80003c8:	2207      	movs	r2, #7
 80003ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003cc:	2300      	movs	r3, #0
}
 80003ce:	4618      	mov	r0, r3
 80003d0:	3708      	adds	r7, #8
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	e000e010 	.word	0xe000e010

080003dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003e4:	6878      	ldr	r0, [r7, #4]
 80003e6:	f7ff ff35 	bl	8000254 <NVIC_SetPriorityGrouping>
}
 80003ea:	bf00      	nop
 80003ec:	3708      	adds	r7, #8
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}

080003f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003f2:	b580      	push	{r7, lr}
 80003f4:	b086      	sub	sp, #24
 80003f6:	af00      	add	r7, sp, #0
 80003f8:	4603      	mov	r3, r0
 80003fa:	60b9      	str	r1, [r7, #8]
 80003fc:	607a      	str	r2, [r7, #4]
 80003fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000400:	2300      	movs	r3, #0
 8000402:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000404:	f7ff ff4a 	bl	800029c <NVIC_GetPriorityGrouping>
 8000408:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800040a:	687a      	ldr	r2, [r7, #4]
 800040c:	68b9      	ldr	r1, [r7, #8]
 800040e:	6978      	ldr	r0, [r7, #20]
 8000410:	f7ff ff7c 	bl	800030c <NVIC_EncodePriority>
 8000414:	4602      	mov	r2, r0
 8000416:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800041a:	4611      	mov	r1, r2
 800041c:	4618      	mov	r0, r3
 800041e:	f7ff ff4b 	bl	80002b8 <NVIC_SetPriority>
}
 8000422:	bf00      	nop
 8000424:	3718      	adds	r7, #24
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}

0800042a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800042a:	b580      	push	{r7, lr}
 800042c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800042e:	f7ff ff9f 	bl	8000370 <NVIC_SystemReset>
}
 8000432:	bf00      	nop
 8000434:	bd80      	pop	{r7, pc}

08000436 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000436:	b580      	push	{r7, lr}
 8000438:	b082      	sub	sp, #8
 800043a:	af00      	add	r7, sp, #0
 800043c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800043e:	6878      	ldr	r0, [r7, #4]
 8000440:	f7ff ffaa 	bl	8000398 <SysTick_Config>
 8000444:	4603      	mov	r3, r0
}
 8000446:	4618      	mov	r0, r3
 8000448:	3708      	adds	r7, #8
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
	...

08000450 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000452:	b087      	sub	sp, #28
 8000454:	af00      	add	r7, sp, #0
 8000456:	60f8      	str	r0, [r7, #12]
 8000458:	60b9      	str	r1, [r7, #8]
 800045a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800045e:	2301      	movs	r3, #1
 8000460:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8000462:	2300      	movs	r3, #0
 8000464:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8000466:	2300      	movs	r3, #0
 8000468:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800046a:	4b2f      	ldr	r3, [pc, #188]	; (8000528 <HAL_FLASH_Program+0xd8>)
 800046c:	7e1b      	ldrb	r3, [r3, #24]
 800046e:	2b01      	cmp	r3, #1
 8000470:	d101      	bne.n	8000476 <HAL_FLASH_Program+0x26>
 8000472:	2302      	movs	r3, #2
 8000474:	e054      	b.n	8000520 <HAL_FLASH_Program+0xd0>
 8000476:	4b2c      	ldr	r3, [pc, #176]	; (8000528 <HAL_FLASH_Program+0xd8>)
 8000478:	2201      	movs	r2, #1
 800047a:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800047c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000480:	f000 f8ca 	bl	8000618 <FLASH_WaitForLastOperation>
 8000484:	4603      	mov	r3, r0
 8000486:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8000488:	7dfb      	ldrb	r3, [r7, #23]
 800048a:	2b00      	cmp	r3, #0
 800048c:	d144      	bne.n	8000518 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	2b01      	cmp	r3, #1
 8000492:	d102      	bne.n	800049a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8000494:	2301      	movs	r3, #1
 8000496:	757b      	strb	r3, [r7, #21]
 8000498:	e007      	b.n	80004aa <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800049a:	68fb      	ldr	r3, [r7, #12]
 800049c:	2b02      	cmp	r3, #2
 800049e:	d102      	bne.n	80004a6 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80004a0:	2302      	movs	r3, #2
 80004a2:	757b      	strb	r3, [r7, #21]
 80004a4:	e001      	b.n	80004aa <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80004a6:	2304      	movs	r3, #4
 80004a8:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80004aa:	2300      	movs	r3, #0
 80004ac:	75bb      	strb	r3, [r7, #22]
 80004ae:	e02d      	b.n	800050c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80004b0:	7dbb      	ldrb	r3, [r7, #22]
 80004b2:	005a      	lsls	r2, r3, #1
 80004b4:	68bb      	ldr	r3, [r7, #8]
 80004b6:	eb02 0c03 	add.w	ip, r2, r3
 80004ba:	7dbb      	ldrb	r3, [r7, #22]
 80004bc:	0119      	lsls	r1, r3, #4
 80004be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80004c2:	f1c1 0620 	rsb	r6, r1, #32
 80004c6:	f1a1 0020 	sub.w	r0, r1, #32
 80004ca:	fa22 f401 	lsr.w	r4, r2, r1
 80004ce:	fa03 f606 	lsl.w	r6, r3, r6
 80004d2:	4334      	orrs	r4, r6
 80004d4:	fa23 f000 	lsr.w	r0, r3, r0
 80004d8:	4304      	orrs	r4, r0
 80004da:	fa23 f501 	lsr.w	r5, r3, r1
 80004de:	b2a3      	uxth	r3, r4
 80004e0:	4619      	mov	r1, r3
 80004e2:	4660      	mov	r0, ip
 80004e4:	f000 f87c 	bl	80005e0 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80004e8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80004ec:	f000 f894 	bl	8000618 <FLASH_WaitForLastOperation>
 80004f0:	4603      	mov	r3, r0
 80004f2:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80004f4:	4b0d      	ldr	r3, [pc, #52]	; (800052c <HAL_FLASH_Program+0xdc>)
 80004f6:	691b      	ldr	r3, [r3, #16]
 80004f8:	4a0c      	ldr	r2, [pc, #48]	; (800052c <HAL_FLASH_Program+0xdc>)
 80004fa:	f023 0301 	bic.w	r3, r3, #1
 80004fe:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8000500:	7dfb      	ldrb	r3, [r7, #23]
 8000502:	2b00      	cmp	r3, #0
 8000504:	d107      	bne.n	8000516 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8000506:	7dbb      	ldrb	r3, [r7, #22]
 8000508:	3301      	adds	r3, #1
 800050a:	75bb      	strb	r3, [r7, #22]
 800050c:	7dba      	ldrb	r2, [r7, #22]
 800050e:	7d7b      	ldrb	r3, [r7, #21]
 8000510:	429a      	cmp	r2, r3
 8000512:	d3cd      	bcc.n	80004b0 <HAL_FLASH_Program+0x60>
 8000514:	e000      	b.n	8000518 <HAL_FLASH_Program+0xc8>
      {
        break;
 8000516:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000518:	4b03      	ldr	r3, [pc, #12]	; (8000528 <HAL_FLASH_Program+0xd8>)
 800051a:	2200      	movs	r2, #0
 800051c:	761a      	strb	r2, [r3, #24]

  return status;
 800051e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000520:	4618      	mov	r0, r3
 8000522:	371c      	adds	r7, #28
 8000524:	46bd      	mov	sp, r7
 8000526:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000528:	20000040 	.word	0x20000040
 800052c:	40022000 	.word	0x40022000

08000530 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000536:	2300      	movs	r3, #0
 8000538:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800053a:	4b0d      	ldr	r3, [pc, #52]	; (8000570 <HAL_FLASH_Unlock+0x40>)
 800053c:	691b      	ldr	r3, [r3, #16]
 800053e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000542:	2b00      	cmp	r3, #0
 8000544:	d00d      	beq.n	8000562 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000546:	4b0a      	ldr	r3, [pc, #40]	; (8000570 <HAL_FLASH_Unlock+0x40>)
 8000548:	4a0a      	ldr	r2, [pc, #40]	; (8000574 <HAL_FLASH_Unlock+0x44>)
 800054a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800054c:	4b08      	ldr	r3, [pc, #32]	; (8000570 <HAL_FLASH_Unlock+0x40>)
 800054e:	4a0a      	ldr	r2, [pc, #40]	; (8000578 <HAL_FLASH_Unlock+0x48>)
 8000550:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000552:	4b07      	ldr	r3, [pc, #28]	; (8000570 <HAL_FLASH_Unlock+0x40>)
 8000554:	691b      	ldr	r3, [r3, #16]
 8000556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800055e:	2301      	movs	r3, #1
 8000560:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8000562:	79fb      	ldrb	r3, [r7, #7]
}
 8000564:	4618      	mov	r0, r3
 8000566:	370c      	adds	r7, #12
 8000568:	46bd      	mov	sp, r7
 800056a:	bc80      	pop	{r7}
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	40022000 	.word	0x40022000
 8000574:	45670123 	.word	0x45670123
 8000578:	cdef89ab 	.word	0xcdef89ab

0800057c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000580:	4b05      	ldr	r3, [pc, #20]	; (8000598 <HAL_FLASH_Lock+0x1c>)
 8000582:	691b      	ldr	r3, [r3, #16]
 8000584:	4a04      	ldr	r2, [pc, #16]	; (8000598 <HAL_FLASH_Lock+0x1c>)
 8000586:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800058a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 800058c:	2300      	movs	r3, #0
}
 800058e:	4618      	mov	r0, r3
 8000590:	46bd      	mov	sp, r7
 8000592:	bc80      	pop	{r7}
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	40022000 	.word	0x40022000

0800059c <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
 80005a0:	4b09      	ldr	r3, [pc, #36]	; (80005c8 <HAL_FLASH_OB_Unlock+0x2c>)
 80005a2:	691b      	ldr	r3, [r3, #16]
 80005a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d107      	bne.n	80005bc <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <HAL_FLASH_OB_Unlock+0x2c>)
 80005ae:	4a07      	ldr	r2, [pc, #28]	; (80005cc <HAL_FLASH_OB_Unlock+0x30>)
 80005b0:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 80005b2:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <HAL_FLASH_OB_Unlock+0x2c>)
 80005b4:	4a06      	ldr	r2, [pc, #24]	; (80005d0 <HAL_FLASH_OB_Unlock+0x34>)
 80005b6:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 80005b8:	2300      	movs	r3, #0
 80005ba:	e000      	b.n	80005be <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 80005bc:	2301      	movs	r3, #1
}
 80005be:	4618      	mov	r0, r3
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bc80      	pop	{r7}
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	40022000 	.word	0x40022000
 80005cc:	45670123 	.word	0x45670123
 80005d0:	cdef89ab 	.word	0xcdef89ab

080005d4 <HAL_FLASH_OB_Launch>:
  * @brief  Launch the option byte loading.
  * @note   This function will reset automatically the MCU.
  * @retval None
  */
void HAL_FLASH_OB_Launch(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* Initiates a system reset request to launch the option byte loading */
  HAL_NVIC_SystemReset();
 80005d8:	f7ff ff27 	bl	800042a <HAL_NVIC_SystemReset>
}
 80005dc:	bf00      	nop
 80005de:	bd80      	pop	{r7, pc}

080005e0 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	460b      	mov	r3, r1
 80005ea:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80005ec:	4b08      	ldr	r3, [pc, #32]	; (8000610 <FLASH_Program_HalfWord+0x30>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80005f2:	4b08      	ldr	r3, [pc, #32]	; (8000614 <FLASH_Program_HalfWord+0x34>)
 80005f4:	691b      	ldr	r3, [r3, #16]
 80005f6:	4a07      	ldr	r2, [pc, #28]	; (8000614 <FLASH_Program_HalfWord+0x34>)
 80005f8:	f043 0301 	orr.w	r3, r3, #1
 80005fc:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	887a      	ldrh	r2, [r7, #2]
 8000602:	801a      	strh	r2, [r3, #0]
}
 8000604:	bf00      	nop
 8000606:	370c      	adds	r7, #12
 8000608:	46bd      	mov	sp, r7
 800060a:	bc80      	pop	{r7}
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	20000040 	.word	0x20000040
 8000614:	40022000 	.word	0x40022000

08000618 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8000620:	f7ff fdec 	bl	80001fc <HAL_GetTick>
 8000624:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000626:	e010      	b.n	800064a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800062e:	d00c      	beq.n	800064a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d007      	beq.n	8000646 <FLASH_WaitForLastOperation+0x2e>
 8000636:	f7ff fde1 	bl	80001fc <HAL_GetTick>
 800063a:	4602      	mov	r2, r0
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	1ad3      	subs	r3, r2, r3
 8000640:	687a      	ldr	r2, [r7, #4]
 8000642:	429a      	cmp	r2, r3
 8000644:	d201      	bcs.n	800064a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8000646:	2303      	movs	r3, #3
 8000648:	e025      	b.n	8000696 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800064a:	4b15      	ldr	r3, [pc, #84]	; (80006a0 <FLASH_WaitForLastOperation+0x88>)
 800064c:	68db      	ldr	r3, [r3, #12]
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	2b00      	cmp	r3, #0
 8000654:	d1e8      	bne.n	8000628 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000656:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <FLASH_WaitForLastOperation+0x88>)
 8000658:	68db      	ldr	r3, [r3, #12]
 800065a:	f003 0320 	and.w	r3, r3, #32
 800065e:	2b00      	cmp	r3, #0
 8000660:	d002      	beq.n	8000668 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000662:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <FLASH_WaitForLastOperation+0x88>)
 8000664:	2220      	movs	r2, #32
 8000666:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000668:	4b0d      	ldr	r3, [pc, #52]	; (80006a0 <FLASH_WaitForLastOperation+0x88>)
 800066a:	68db      	ldr	r3, [r3, #12]
 800066c:	f003 0310 	and.w	r3, r3, #16
 8000670:	2b00      	cmp	r3, #0
 8000672:	d10b      	bne.n	800068c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000674:	4b0a      	ldr	r3, [pc, #40]	; (80006a0 <FLASH_WaitForLastOperation+0x88>)
 8000676:	69db      	ldr	r3, [r3, #28]
 8000678:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800067c:	2b00      	cmp	r3, #0
 800067e:	d105      	bne.n	800068c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000680:	4b07      	ldr	r3, [pc, #28]	; (80006a0 <FLASH_WaitForLastOperation+0x88>)
 8000682:	68db      	ldr	r3, [r3, #12]
 8000684:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000688:	2b00      	cmp	r3, #0
 800068a:	d003      	beq.n	8000694 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800068c:	f000 f80a 	bl	80006a4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000690:	2301      	movs	r3, #1
 8000692:	e000      	b.n	8000696 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8000694:	2300      	movs	r3, #0
}
 8000696:	4618      	mov	r0, r3
 8000698:	3710      	adds	r7, #16
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40022000 	.word	0x40022000

080006a4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80006aa:	2300      	movs	r3, #0
 80006ac:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80006ae:	4b23      	ldr	r3, [pc, #140]	; (800073c <FLASH_SetErrorCode+0x98>)
 80006b0:	68db      	ldr	r3, [r3, #12]
 80006b2:	f003 0310 	and.w	r3, r3, #16
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d009      	beq.n	80006ce <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80006ba:	4b21      	ldr	r3, [pc, #132]	; (8000740 <FLASH_SetErrorCode+0x9c>)
 80006bc:	69db      	ldr	r3, [r3, #28]
 80006be:	f043 0302 	orr.w	r3, r3, #2
 80006c2:	4a1f      	ldr	r2, [pc, #124]	; (8000740 <FLASH_SetErrorCode+0x9c>)
 80006c4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	f043 0310 	orr.w	r3, r3, #16
 80006cc:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80006ce:	4b1b      	ldr	r3, [pc, #108]	; (800073c <FLASH_SetErrorCode+0x98>)
 80006d0:	68db      	ldr	r3, [r3, #12]
 80006d2:	f003 0304 	and.w	r3, r3, #4
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d009      	beq.n	80006ee <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80006da:	4b19      	ldr	r3, [pc, #100]	; (8000740 <FLASH_SetErrorCode+0x9c>)
 80006dc:	69db      	ldr	r3, [r3, #28]
 80006de:	f043 0301 	orr.w	r3, r3, #1
 80006e2:	4a17      	ldr	r2, [pc, #92]	; (8000740 <FLASH_SetErrorCode+0x9c>)
 80006e4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	f043 0304 	orr.w	r3, r3, #4
 80006ec:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80006ee:	4b13      	ldr	r3, [pc, #76]	; (800073c <FLASH_SetErrorCode+0x98>)
 80006f0:	69db      	ldr	r3, [r3, #28]
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d00b      	beq.n	8000712 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80006fa:	4b11      	ldr	r3, [pc, #68]	; (8000740 <FLASH_SetErrorCode+0x9c>)
 80006fc:	69db      	ldr	r3, [r3, #28]
 80006fe:	f043 0304 	orr.w	r3, r3, #4
 8000702:	4a0f      	ldr	r2, [pc, #60]	; (8000740 <FLASH_SetErrorCode+0x9c>)
 8000704:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000706:	4b0d      	ldr	r3, [pc, #52]	; (800073c <FLASH_SetErrorCode+0x98>)
 8000708:	69db      	ldr	r3, [r3, #28]
 800070a:	4a0c      	ldr	r2, [pc, #48]	; (800073c <FLASH_SetErrorCode+0x98>)
 800070c:	f023 0301 	bic.w	r3, r3, #1
 8000710:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	f240 1201 	movw	r2, #257	; 0x101
 8000718:	4293      	cmp	r3, r2
 800071a:	d106      	bne.n	800072a <FLASH_SetErrorCode+0x86>
 800071c:	4b07      	ldr	r3, [pc, #28]	; (800073c <FLASH_SetErrorCode+0x98>)
 800071e:	69db      	ldr	r3, [r3, #28]
 8000720:	4a06      	ldr	r2, [pc, #24]	; (800073c <FLASH_SetErrorCode+0x98>)
 8000722:	f023 0301 	bic.w	r3, r3, #1
 8000726:	61d3      	str	r3, [r2, #28]
}  
 8000728:	e002      	b.n	8000730 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800072a:	4a04      	ldr	r2, [pc, #16]	; (800073c <FLASH_SetErrorCode+0x98>)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	60d3      	str	r3, [r2, #12]
}  
 8000730:	bf00      	nop
 8000732:	370c      	adds	r7, #12
 8000734:	46bd      	mov	sp, r7
 8000736:	bc80      	pop	{r7}
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	40022000 	.word	0x40022000
 8000740:	20000040 	.word	0x20000040

08000744 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
 800074c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800074e:	2301      	movs	r3, #1
 8000750:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8000752:	2300      	movs	r3, #0
 8000754:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000756:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <HAL_FLASHEx_Erase+0xd0>)
 8000758:	7e1b      	ldrb	r3, [r3, #24]
 800075a:	2b01      	cmp	r3, #1
 800075c:	d101      	bne.n	8000762 <HAL_FLASHEx_Erase+0x1e>
 800075e:	2302      	movs	r3, #2
 8000760:	e053      	b.n	800080a <HAL_FLASHEx_Erase+0xc6>
 8000762:	4b2c      	ldr	r3, [pc, #176]	; (8000814 <HAL_FLASHEx_Erase+0xd0>)
 8000764:	2201      	movs	r2, #1
 8000766:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	2b02      	cmp	r3, #2
 800076e:	d116      	bne.n	800079e <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000770:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000774:	f7ff ff50 	bl	8000618 <FLASH_WaitForLastOperation>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d141      	bne.n	8000802 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800077e:	2001      	movs	r0, #1
 8000780:	f000 f926 	bl	80009d0 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000784:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000788:	f7ff ff46 	bl	8000618 <FLASH_WaitForLastOperation>
 800078c:	4603      	mov	r3, r0
 800078e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8000790:	4b21      	ldr	r3, [pc, #132]	; (8000818 <HAL_FLASHEx_Erase+0xd4>)
 8000792:	691b      	ldr	r3, [r3, #16]
 8000794:	4a20      	ldr	r2, [pc, #128]	; (8000818 <HAL_FLASHEx_Erase+0xd4>)
 8000796:	f023 0304 	bic.w	r3, r3, #4
 800079a:	6113      	str	r3, [r2, #16]
 800079c:	e031      	b.n	8000802 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800079e:	f24c 3050 	movw	r0, #50000	; 0xc350
 80007a2:	f7ff ff39 	bl	8000618 <FLASH_WaitForLastOperation>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d12a      	bne.n	8000802 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	f04f 32ff 	mov.w	r2, #4294967295
 80007b2:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	689b      	ldr	r3, [r3, #8]
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	e019      	b.n	80007f0 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80007bc:	68b8      	ldr	r0, [r7, #8]
 80007be:	f000 fb57 	bl	8000e70 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80007c2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80007c6:	f7ff ff27 	bl	8000618 <FLASH_WaitForLastOperation>
 80007ca:	4603      	mov	r3, r0
 80007cc:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80007ce:	4b12      	ldr	r3, [pc, #72]	; (8000818 <HAL_FLASHEx_Erase+0xd4>)
 80007d0:	691b      	ldr	r3, [r3, #16]
 80007d2:	4a11      	ldr	r2, [pc, #68]	; (8000818 <HAL_FLASHEx_Erase+0xd4>)
 80007d4:	f023 0302 	bic.w	r3, r3, #2
 80007d8:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80007da:	7bfb      	ldrb	r3, [r7, #15]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d003      	beq.n	80007e8 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	68ba      	ldr	r2, [r7, #8]
 80007e4:	601a      	str	r2, [r3, #0]
            break;
 80007e6:	e00c      	b.n	8000802 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80007ee:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	68db      	ldr	r3, [r3, #12]
 80007f4:	029a      	lsls	r2, r3, #10
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	689b      	ldr	r3, [r3, #8]
 80007fa:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80007fc:	68ba      	ldr	r2, [r7, #8]
 80007fe:	429a      	cmp	r2, r3
 8000800:	d3dc      	bcc.n	80007bc <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000802:	4b04      	ldr	r3, [pc, #16]	; (8000814 <HAL_FLASHEx_Erase+0xd0>)
 8000804:	2200      	movs	r2, #0
 8000806:	761a      	strb	r2, [r3, #24]

  return status;
 8000808:	7bfb      	ldrb	r3, [r7, #15]
}
 800080a:	4618      	mov	r0, r3
 800080c:	3710      	adds	r7, #16
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	20000040 	.word	0x20000040
 8000818:	40022000 	.word	0x40022000

0800081c <HAL_FLASHEx_OBErase>:
  *         (system reset will occur)
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_FLASHEx_OBErase(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
  uint8_t rdptmp = OB_RDP_LEVEL_0;
 8000822:	23a5      	movs	r3, #165	; 0xa5
 8000824:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000826:	2301      	movs	r3, #1
 8000828:	71fb      	strb	r3, [r7, #7]

  /* Get the actual read protection Option Byte value */
  rdptmp = FLASH_OB_GetRDP();
 800082a:	f000 faf5 	bl	8000e18 <FLASH_OB_GetRDP>
 800082e:	4603      	mov	r3, r0
 8000830:	71bb      	strb	r3, [r7, #6]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000832:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000836:	f7ff feef 	bl	8000618 <FLASH_WaitForLastOperation>
 800083a:	4603      	mov	r3, r0
 800083c:	71fb      	strb	r3, [r7, #7]

  if(status == HAL_OK)
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d123      	bne.n	800088c <HAL_FLASHEx_OBErase+0x70>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000844:	4b14      	ldr	r3, [pc, #80]	; (8000898 <HAL_FLASHEx_OBErase+0x7c>)
 8000846:	2200      	movs	r2, #0
 8000848:	61da      	str	r2, [r3, #28]

    /* If the previous operation is completed, proceed to erase the option bytes */
    SET_BIT(FLASH->CR, FLASH_CR_OPTER);
 800084a:	4b14      	ldr	r3, [pc, #80]	; (800089c <HAL_FLASHEx_OBErase+0x80>)
 800084c:	691b      	ldr	r3, [r3, #16]
 800084e:	4a13      	ldr	r2, [pc, #76]	; (800089c <HAL_FLASHEx_OBErase+0x80>)
 8000850:	f043 0320 	orr.w	r3, r3, #32
 8000854:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000856:	4b11      	ldr	r3, [pc, #68]	; (800089c <HAL_FLASHEx_OBErase+0x80>)
 8000858:	691b      	ldr	r3, [r3, #16]
 800085a:	4a10      	ldr	r2, [pc, #64]	; (800089c <HAL_FLASHEx_OBErase+0x80>)
 800085c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000860:	6113      	str	r3, [r2, #16]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000862:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000866:	f7ff fed7 	bl	8000618 <FLASH_WaitForLastOperation>
 800086a:	4603      	mov	r3, r0
 800086c:	71fb      	strb	r3, [r7, #7]

    /* If the erase operation is completed, disable the OPTER Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTER);
 800086e:	4b0b      	ldr	r3, [pc, #44]	; (800089c <HAL_FLASHEx_OBErase+0x80>)
 8000870:	691b      	ldr	r3, [r3, #16]
 8000872:	4a0a      	ldr	r2, [pc, #40]	; (800089c <HAL_FLASHEx_OBErase+0x80>)
 8000874:	f023 0320 	bic.w	r3, r3, #32
 8000878:	6113      	str	r3, [r2, #16]

    if(status == HAL_OK)
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d105      	bne.n	800088c <HAL_FLASHEx_OBErase+0x70>
    {
      /* Restore the last read protection Option Byte value */
      status = FLASH_OB_RDP_LevelConfig(rdptmp);
 8000880:	79bb      	ldrb	r3, [r7, #6]
 8000882:	4618      	mov	r0, r3
 8000884:	f000 fa02 	bl	8000c8c <FLASH_OB_RDP_LevelConfig>
 8000888:	4603      	mov	r3, r0
 800088a:	71fb      	strb	r3, [r7, #7]
    }
  }

  /* Return the erase status */
  return status;
 800088c:	79fb      	ldrb	r3, [r7, #7]
}
 800088e:	4618      	mov	r0, r3
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	20000040 	.word	0x20000040
 800089c:	40022000 	.word	0x40022000

080008a0 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80008a8:	2301      	movs	r3, #1
 80008aa:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80008ac:	4b39      	ldr	r3, [pc, #228]	; (8000994 <HAL_FLASHEx_OBProgram+0xf4>)
 80008ae:	7e1b      	ldrb	r3, [r3, #24]
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d101      	bne.n	80008b8 <HAL_FLASHEx_OBProgram+0x18>
 80008b4:	2302      	movs	r3, #2
 80008b6:	e069      	b.n	800098c <HAL_FLASHEx_OBProgram+0xec>
 80008b8:	4b36      	ldr	r3, [pc, #216]	; (8000994 <HAL_FLASHEx_OBProgram+0xf4>)
 80008ba:	2201      	movs	r2, #1
 80008bc:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /* Write protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d01a      	beq.n	8000900 <HAL_FLASHEx_OBProgram+0x60>
  {
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
    if (pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	685b      	ldr	r3, [r3, #4]
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	d107      	bne.n	80008e2 <HAL_FLASHEx_OBProgram+0x42>
    {
      /* Enable of Write protection on the selected page */
      status = FLASH_OB_EnableWRP(pOBInit->WRPPage);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	689b      	ldr	r3, [r3, #8]
 80008d6:	4618      	mov	r0, r3
 80008d8:	f000 f896 	bl	8000a08 <FLASH_OB_EnableWRP>
 80008dc:	4603      	mov	r3, r0
 80008de:	73fb      	strb	r3, [r7, #15]
 80008e0:	e006      	b.n	80008f0 <HAL_FLASHEx_OBProgram+0x50>
    }
    else
    {
      /* Disable of Write protection on the selected page */
      status = FLASH_OB_DisableWRP(pOBInit->WRPPage);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	689b      	ldr	r3, [r3, #8]
 80008e6:	4618      	mov	r0, r3
 80008e8:	f000 f930 	bl	8000b4c <FLASH_OB_DisableWRP>
 80008ec:	4603      	mov	r3, r0
 80008ee:	73fb      	strb	r3, [r7, #15]
    }
    if (status != HAL_OK)
 80008f0:	7bfb      	ldrb	r3, [r7, #15]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d004      	beq.n	8000900 <HAL_FLASHEx_OBProgram+0x60>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 80008f6:	4b27      	ldr	r3, [pc, #156]	; (8000994 <HAL_FLASHEx_OBProgram+0xf4>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	761a      	strb	r2, [r3, #24]
      return status;
 80008fc:	7bfb      	ldrb	r3, [r7, #15]
 80008fe:	e045      	b.n	800098c <HAL_FLASHEx_OBProgram+0xec>
    }
  }

  /* Read protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f003 0302 	and.w	r3, r3, #2
 8000908:	2b00      	cmp	r3, #0
 800090a:	d00e      	beq.n	800092a <HAL_FLASHEx_OBProgram+0x8a>
  {
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	7c1b      	ldrb	r3, [r3, #16]
 8000910:	4618      	mov	r0, r3
 8000912:	f000 f9bb 	bl	8000c8c <FLASH_OB_RDP_LevelConfig>
 8000916:	4603      	mov	r3, r0
 8000918:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 800091a:	7bfb      	ldrb	r3, [r7, #15]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d004      	beq.n	800092a <HAL_FLASHEx_OBProgram+0x8a>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8000920:	4b1c      	ldr	r3, [pc, #112]	; (8000994 <HAL_FLASHEx_OBProgram+0xf4>)
 8000922:	2200      	movs	r2, #0
 8000924:	761a      	strb	r2, [r3, #24]
      return status;
 8000926:	7bfb      	ldrb	r3, [r7, #15]
 8000928:	e030      	b.n	800098c <HAL_FLASHEx_OBProgram+0xec>
    }
  }

  /* USER configuration */
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	f003 0304 	and.w	r3, r3, #4
 8000932:	2b00      	cmp	r3, #0
 8000934:	d00e      	beq.n	8000954 <HAL_FLASHEx_OBProgram+0xb4>
  {
    status = FLASH_OB_UserConfig(pOBInit->USERConfig);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	7c5b      	ldrb	r3, [r3, #17]
 800093a:	4618      	mov	r0, r3
 800093c:	f000 f9f6 	bl	8000d2c <FLASH_OB_UserConfig>
 8000940:	4603      	mov	r3, r0
 8000942:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 8000944:	7bfb      	ldrb	r3, [r7, #15]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d004      	beq.n	8000954 <HAL_FLASHEx_OBProgram+0xb4>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 800094a:	4b12      	ldr	r3, [pc, #72]	; (8000994 <HAL_FLASHEx_OBProgram+0xf4>)
 800094c:	2200      	movs	r2, #0
 800094e:	761a      	strb	r2, [r3, #24]
      return status;
 8000950:	7bfb      	ldrb	r3, [r7, #15]
 8000952:	e01b      	b.n	800098c <HAL_FLASHEx_OBProgram+0xec>
    }
  }

  /* DATA configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_DATA) == OPTIONBYTE_DATA)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f003 0308 	and.w	r3, r3, #8
 800095c:	2b00      	cmp	r3, #0
 800095e:	d011      	beq.n	8000984 <HAL_FLASHEx_OBProgram+0xe4>
  {
    status = FLASH_OB_ProgramData(pOBInit->DATAAddress, pOBInit->DATAData);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	695a      	ldr	r2, [r3, #20]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	7e1b      	ldrb	r3, [r3, #24]
 8000968:	4619      	mov	r1, r3
 800096a:	4610      	mov	r0, r2
 800096c:	f000 fa16 	bl	8000d9c <FLASH_OB_ProgramData>
 8000970:	4603      	mov	r3, r0
 8000972:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 8000974:	7bfb      	ldrb	r3, [r7, #15]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d004      	beq.n	8000984 <HAL_FLASHEx_OBProgram+0xe4>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 800097a:	4b06      	ldr	r3, [pc, #24]	; (8000994 <HAL_FLASHEx_OBProgram+0xf4>)
 800097c:	2200      	movs	r2, #0
 800097e:	761a      	strb	r2, [r3, #24]
      return status;
 8000980:	7bfb      	ldrb	r3, [r7, #15]
 8000982:	e003      	b.n	800098c <HAL_FLASHEx_OBProgram+0xec>
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000984:	4b03      	ldr	r3, [pc, #12]	; (8000994 <HAL_FLASHEx_OBProgram+0xf4>)
 8000986:	2200      	movs	r2, #0
 8000988:	761a      	strb	r2, [r3, #24]

  return status;
 800098a:	7bfb      	ldrb	r3, [r7, #15]
}
 800098c:	4618      	mov	r0, r3
 800098e:	3710      	adds	r7, #16
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	20000040 	.word	0x20000040

08000998 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2207      	movs	r2, #7
 80009a4:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPPage = FLASH_OB_GetWRP();
 80009a6:	f000 fa2d 	bl	8000e04 <FLASH_OB_GetWRP>
 80009aa:	4602      	mov	r2, r0
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 80009b0:	f000 fa32 	bl	8000e18 <FLASH_OB_GetRDP>
 80009b4:	4603      	mov	r3, r0
 80009b6:	b2da      	uxtb	r2, r3
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	741a      	strb	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = FLASH_OB_GetUser();
 80009bc:	f000 fa48 	bl	8000e50 <FLASH_OB_GetUser>
 80009c0:	4603      	mov	r3, r0
 80009c2:	461a      	mov	r2, r3
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	745a      	strb	r2, [r3, #17]
}
 80009c8:	bf00      	nop
 80009ca:	3708      	adds	r7, #8
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80009d8:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <FLASH_MassErase+0x30>)
 80009da:	2200      	movs	r2, #0
 80009dc:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80009de:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <FLASH_MassErase+0x34>)
 80009e0:	691b      	ldr	r3, [r3, #16]
 80009e2:	4a08      	ldr	r2, [pc, #32]	; (8000a04 <FLASH_MassErase+0x34>)
 80009e4:	f043 0304 	orr.w	r3, r3, #4
 80009e8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80009ea:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <FLASH_MassErase+0x34>)
 80009ec:	691b      	ldr	r3, [r3, #16]
 80009ee:	4a05      	ldr	r2, [pc, #20]	; (8000a04 <FLASH_MassErase+0x34>)
 80009f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009f4:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80009f6:	bf00      	nop
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bc80      	pop	{r7}
 80009fe:	4770      	bx	lr
 8000a00:	20000040 	.word	0x20000040
 8000a04:	40022000 	.word	0x40022000

08000a08 <FLASH_OB_EnableWRP>:
  * @param  WriteProtectPage specifies the page(s) to be write protected.
  *         The value of this parameter depend on device used within the same series 
  * @retval HAL status 
  */
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WriteProtectPage)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b086      	sub	sp, #24
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a10:	2300      	movs	r3, #0
 8000a12:	75fb      	strb	r3, [r7, #23]
  uint16_t WRP0_Data = 0xFFFF;
 8000a14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a18:	82bb      	strh	r3, [r7, #20]
#if defined(FLASH_WRP1_WRP1)
  uint16_t WRP1_Data = 0xFFFF;
 8000a1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a1e:	827b      	strh	r3, [r7, #18]
#endif /* FLASH_WRP1_WRP1 */
#if defined(FLASH_WRP2_WRP2)
  uint16_t WRP2_Data = 0xFFFF;
 8000a20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a24:	823b      	strh	r3, [r7, #16]
#endif /* FLASH_WRP2_WRP2 */
#if defined(FLASH_WRP3_WRP3)
  uint16_t WRP3_Data = 0xFFFF;
 8000a26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a2a:	81fb      	strh	r3, [r7, #14]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(WriteProtectPage));
    
  /* Get current write protected pages and the new pages to be protected ******/
  WriteProtectPage = (uint32_t)(~((~FLASH_OB_GetWRP()) | WriteProtectPage));
 8000a2c:	f000 f9ea 	bl	8000e04 <FLASH_OB_GetWRP>
 8000a30:	4603      	mov	r3, r0
 8000a32:	43da      	mvns	r2, r3
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	4313      	orrs	r3, r2
 8000a38:	43db      	mvns	r3, r3
 8000a3a:	607b      	str	r3, [r7, #4]
  
#if defined(OB_WRP_PAGES0TO15MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO15MASK);
#elif defined(OB_WRP_PAGES0TO31MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO31MASK);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	b29b      	uxth	r3, r3
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	82bb      	strh	r3, [r7, #20]
#endif /* OB_WRP_PAGES0TO31MASK */
  
#if defined(OB_WRP_PAGES16TO31MASK)
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES16TO31MASK) >> 8U);
#elif defined(OB_WRP_PAGES32TO63MASK)
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO63MASK) >> 8U);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	0a1b      	lsrs	r3, r3, #8
 8000a48:	b29b      	uxth	r3, r3
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	827b      	strh	r3, [r7, #18]
#endif /* OB_WRP_PAGES32TO63MASK */
 
#if defined(OB_WRP_PAGES64TO95MASK)
  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES64TO95MASK) >> 16U);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	0c1b      	lsrs	r3, r3, #16
 8000a52:	b29b      	uxth	r3, r3
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	823b      	strh	r3, [r7, #16]
#if defined(OB_WRP_PAGES32TO47MASK)
  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO47MASK) >> 16U);
#endif /* OB_WRP_PAGES32TO47MASK */

#if defined(OB_WRP_PAGES96TO127MASK)
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES96TO127MASK) >> 24U); 
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	0e1b      	lsrs	r3, r3, #24
 8000a5c:	81fb      	strh	r3, [r7, #14]
#elif defined(OB_WRP_PAGES48TO127MASK)
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO127MASK) >> 24U); 
#endif /* OB_WRP_PAGES96TO127MASK */
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000a5e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000a62:	f7ff fdd9 	bl	8000618 <FLASH_WaitForLastOperation>
 8000a66:	4603      	mov	r3, r0
 8000a68:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8000a6a:	7dfb      	ldrb	r3, [r7, #23]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d162      	bne.n	8000b36 <FLASH_OB_EnableWRP+0x12e>
  { 
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000a70:	4b33      	ldr	r3, [pc, #204]	; (8000b40 <FLASH_OB_EnableWRP+0x138>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	61da      	str	r2, [r3, #28]

    /* To be able to write again option byte, need to perform a option byte erase */
    status = HAL_FLASHEx_OBErase();
 8000a76:	f7ff fed1 	bl	800081c <HAL_FLASHEx_OBErase>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	75fb      	strb	r3, [r7, #23]
    if (status == HAL_OK)  
 8000a7e:	7dfb      	ldrb	r3, [r7, #23]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d158      	bne.n	8000b36 <FLASH_OB_EnableWRP+0x12e>
    {
      /* Enable write protection */
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8000a84:	4b2f      	ldr	r3, [pc, #188]	; (8000b44 <FLASH_OB_EnableWRP+0x13c>)
 8000a86:	691b      	ldr	r3, [r3, #16]
 8000a88:	4a2e      	ldr	r2, [pc, #184]	; (8000b44 <FLASH_OB_EnableWRP+0x13c>)
 8000a8a:	f043 0310 	orr.w	r3, r3, #16
 8000a8e:	6113      	str	r3, [r2, #16]

#if defined(FLASH_WRP0_WRP0)
      if(WRP0_Data != 0xFFU)
 8000a90:	8abb      	ldrh	r3, [r7, #20]
 8000a92:	2bff      	cmp	r3, #255	; 0xff
 8000a94:	d00d      	beq.n	8000ab2 <FLASH_OB_EnableWRP+0xaa>
      {
        OB->WRP0 &= WRP0_Data;
 8000a96:	4b2c      	ldr	r3, [pc, #176]	; (8000b48 <FLASH_OB_EnableWRP+0x140>)
 8000a98:	891b      	ldrh	r3, [r3, #8]
 8000a9a:	b29a      	uxth	r2, r3
 8000a9c:	492a      	ldr	r1, [pc, #168]	; (8000b48 <FLASH_OB_EnableWRP+0x140>)
 8000a9e:	8abb      	ldrh	r3, [r7, #20]
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	b29b      	uxth	r3, r3
 8000aa4:	810b      	strh	r3, [r1, #8]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000aa6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000aaa:	f7ff fdb5 	bl	8000618 <FLASH_WaitForLastOperation>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP0_WRP0 */

#if defined(FLASH_WRP1_WRP1)
      if((status == HAL_OK) && (WRP1_Data != 0xFFU))
 8000ab2:	7dfb      	ldrb	r3, [r7, #23]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d110      	bne.n	8000ada <FLASH_OB_EnableWRP+0xd2>
 8000ab8:	8a7b      	ldrh	r3, [r7, #18]
 8000aba:	2bff      	cmp	r3, #255	; 0xff
 8000abc:	d00d      	beq.n	8000ada <FLASH_OB_EnableWRP+0xd2>
      {
        OB->WRP1 &= WRP1_Data;
 8000abe:	4b22      	ldr	r3, [pc, #136]	; (8000b48 <FLASH_OB_EnableWRP+0x140>)
 8000ac0:	895b      	ldrh	r3, [r3, #10]
 8000ac2:	b29a      	uxth	r2, r3
 8000ac4:	4920      	ldr	r1, [pc, #128]	; (8000b48 <FLASH_OB_EnableWRP+0x140>)
 8000ac6:	8a7b      	ldrh	r3, [r7, #18]
 8000ac8:	4013      	ands	r3, r2
 8000aca:	b29b      	uxth	r3, r3
 8000acc:	814b      	strh	r3, [r1, #10]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000ace:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000ad2:	f7ff fda1 	bl	8000618 <FLASH_WaitForLastOperation>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP1_WRP1 */

#if defined(FLASH_WRP2_WRP2)
      if((status == HAL_OK) && (WRP2_Data != 0xFFU))
 8000ada:	7dfb      	ldrb	r3, [r7, #23]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d110      	bne.n	8000b02 <FLASH_OB_EnableWRP+0xfa>
 8000ae0:	8a3b      	ldrh	r3, [r7, #16]
 8000ae2:	2bff      	cmp	r3, #255	; 0xff
 8000ae4:	d00d      	beq.n	8000b02 <FLASH_OB_EnableWRP+0xfa>
      {
        OB->WRP2 &= WRP2_Data;
 8000ae6:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <FLASH_OB_EnableWRP+0x140>)
 8000ae8:	899b      	ldrh	r3, [r3, #12]
 8000aea:	b29a      	uxth	r2, r3
 8000aec:	4916      	ldr	r1, [pc, #88]	; (8000b48 <FLASH_OB_EnableWRP+0x140>)
 8000aee:	8a3b      	ldrh	r3, [r7, #16]
 8000af0:	4013      	ands	r3, r2
 8000af2:	b29b      	uxth	r3, r3
 8000af4:	818b      	strh	r3, [r1, #12]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000af6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000afa:	f7ff fd8d 	bl	8000618 <FLASH_WaitForLastOperation>
 8000afe:	4603      	mov	r3, r0
 8000b00:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP2_WRP2 */

#if defined(FLASH_WRP3_WRP3)
      if((status == HAL_OK) && (WRP3_Data != 0xFFU))
 8000b02:	7dfb      	ldrb	r3, [r7, #23]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d110      	bne.n	8000b2a <FLASH_OB_EnableWRP+0x122>
 8000b08:	89fb      	ldrh	r3, [r7, #14]
 8000b0a:	2bff      	cmp	r3, #255	; 0xff
 8000b0c:	d00d      	beq.n	8000b2a <FLASH_OB_EnableWRP+0x122>
      {
        OB->WRP3 &= WRP3_Data;
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <FLASH_OB_EnableWRP+0x140>)
 8000b10:	89db      	ldrh	r3, [r3, #14]
 8000b12:	b29a      	uxth	r2, r3
 8000b14:	490c      	ldr	r1, [pc, #48]	; (8000b48 <FLASH_OB_EnableWRP+0x140>)
 8000b16:	89fb      	ldrh	r3, [r7, #14]
 8000b18:	4013      	ands	r3, r2
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	81cb      	strh	r3, [r1, #14]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000b1e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000b22:	f7ff fd79 	bl	8000618 <FLASH_WaitForLastOperation>
 8000b26:	4603      	mov	r3, r0
 8000b28:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP3_WRP3 */

      /* if the program operation is completed, disable the OPTPG Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <FLASH_OB_EnableWRP+0x13c>)
 8000b2c:	691b      	ldr	r3, [r3, #16]
 8000b2e:	4a05      	ldr	r2, [pc, #20]	; (8000b44 <FLASH_OB_EnableWRP+0x13c>)
 8000b30:	f023 0310 	bic.w	r3, r3, #16
 8000b34:	6113      	str	r3, [r2, #16]
    }
  }
  
  return status;
 8000b36:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3718      	adds	r7, #24
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20000040 	.word	0x20000040
 8000b44:	40022000 	.word	0x40022000
 8000b48:	1ffff800 	.word	0x1ffff800

08000b4c <FLASH_OB_DisableWRP>:
  * @param  WriteProtectPage specifies the page(s) to be write unprotected.
  *         The value of this parameter depend on device used within the same series 
  * @retval HAL status 
  */
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WriteProtectPage)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b54:	2300      	movs	r3, #0
 8000b56:	75fb      	strb	r3, [r7, #23]
  uint16_t WRP0_Data = 0xFFFF;
 8000b58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b5c:	82bb      	strh	r3, [r7, #20]
#if defined(FLASH_WRP1_WRP1)
  uint16_t WRP1_Data = 0xFFFF;
 8000b5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b62:	827b      	strh	r3, [r7, #18]
#endif /* FLASH_WRP1_WRP1 */
#if defined(FLASH_WRP2_WRP2)
  uint16_t WRP2_Data = 0xFFFF;
 8000b64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b68:	823b      	strh	r3, [r7, #16]
#endif /* FLASH_WRP2_WRP2 */
#if defined(FLASH_WRP3_WRP3)
  uint16_t WRP3_Data = 0xFFFF;
 8000b6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b6e:	81fb      	strh	r3, [r7, #14]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(WriteProtectPage));

  /* Get current write protected pages and the new pages to be unprotected ******/
  WriteProtectPage = (FLASH_OB_GetWRP() | WriteProtectPage);
 8000b70:	f000 f948 	bl	8000e04 <FLASH_OB_GetWRP>
 8000b74:	4602      	mov	r2, r0
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	607b      	str	r3, [r7, #4]

#if defined(OB_WRP_PAGES0TO15MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO15MASK);
#elif defined(OB_WRP_PAGES0TO31MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO31MASK);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	b29b      	uxth	r3, r3
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	82bb      	strh	r3, [r7, #20]
#endif /* OB_WRP_PAGES0TO31MASK */
  
#if defined(OB_WRP_PAGES16TO31MASK)
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES16TO31MASK) >> 8U);
#elif defined(OB_WRP_PAGES32TO63MASK)
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO63MASK) >> 8U);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	0a1b      	lsrs	r3, r3, #8
 8000b88:	b29b      	uxth	r3, r3
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	827b      	strh	r3, [r7, #18]
#endif /* OB_WRP_PAGES32TO63MASK */
 
#if defined(OB_WRP_PAGES64TO95MASK)
  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES64TO95MASK) >> 16U);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	0c1b      	lsrs	r3, r3, #16
 8000b92:	b29b      	uxth	r3, r3
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	823b      	strh	r3, [r7, #16]
#if defined(OB_WRP_PAGES32TO47MASK)
  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO47MASK) >> 16U);
#endif /* OB_WRP_PAGES32TO47MASK */

#if defined(OB_WRP_PAGES96TO127MASK)
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES96TO127MASK) >> 24U); 
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	0e1b      	lsrs	r3, r3, #24
 8000b9c:	81fb      	strh	r3, [r7, #14]
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO127MASK) >> 24U); 
#endif /* OB_WRP_PAGES96TO127MASK */

    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000b9e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000ba2:	f7ff fd39 	bl	8000618 <FLASH_WaitForLastOperation>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8000baa:	7dfb      	ldrb	r3, [r7, #23]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d162      	bne.n	8000c76 <FLASH_OB_DisableWRP+0x12a>
  { 
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000bb0:	4b33      	ldr	r3, [pc, #204]	; (8000c80 <FLASH_OB_DisableWRP+0x134>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	61da      	str	r2, [r3, #28]

    /* To be able to write again option byte, need to perform a option byte erase */
    status = HAL_FLASHEx_OBErase();
 8000bb6:	f7ff fe31 	bl	800081c <HAL_FLASHEx_OBErase>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	75fb      	strb	r3, [r7, #23]
    if (status == HAL_OK)  
 8000bbe:	7dfb      	ldrb	r3, [r7, #23]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d158      	bne.n	8000c76 <FLASH_OB_DisableWRP+0x12a>
    {
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8000bc4:	4b2f      	ldr	r3, [pc, #188]	; (8000c84 <FLASH_OB_DisableWRP+0x138>)
 8000bc6:	691b      	ldr	r3, [r3, #16]
 8000bc8:	4a2e      	ldr	r2, [pc, #184]	; (8000c84 <FLASH_OB_DisableWRP+0x138>)
 8000bca:	f043 0310 	orr.w	r3, r3, #16
 8000bce:	6113      	str	r3, [r2, #16]

#if defined(FLASH_WRP0_WRP0)
      if(WRP0_Data != 0xFFU)
 8000bd0:	8abb      	ldrh	r3, [r7, #20]
 8000bd2:	2bff      	cmp	r3, #255	; 0xff
 8000bd4:	d00d      	beq.n	8000bf2 <FLASH_OB_DisableWRP+0xa6>
      {
        OB->WRP0 |= WRP0_Data;
 8000bd6:	4b2c      	ldr	r3, [pc, #176]	; (8000c88 <FLASH_OB_DisableWRP+0x13c>)
 8000bd8:	891b      	ldrh	r3, [r3, #8]
 8000bda:	b29a      	uxth	r2, r3
 8000bdc:	492a      	ldr	r1, [pc, #168]	; (8000c88 <FLASH_OB_DisableWRP+0x13c>)
 8000bde:	8abb      	ldrh	r3, [r7, #20]
 8000be0:	4313      	orrs	r3, r2
 8000be2:	b29b      	uxth	r3, r3
 8000be4:	810b      	strh	r3, [r1, #8]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000be6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000bea:	f7ff fd15 	bl	8000618 <FLASH_WaitForLastOperation>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP0_WRP0 */

#if defined(FLASH_WRP1_WRP1)
      if((status == HAL_OK) && (WRP1_Data != 0xFFU))
 8000bf2:	7dfb      	ldrb	r3, [r7, #23]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d110      	bne.n	8000c1a <FLASH_OB_DisableWRP+0xce>
 8000bf8:	8a7b      	ldrh	r3, [r7, #18]
 8000bfa:	2bff      	cmp	r3, #255	; 0xff
 8000bfc:	d00d      	beq.n	8000c1a <FLASH_OB_DisableWRP+0xce>
      {
        OB->WRP1 |= WRP1_Data;
 8000bfe:	4b22      	ldr	r3, [pc, #136]	; (8000c88 <FLASH_OB_DisableWRP+0x13c>)
 8000c00:	895b      	ldrh	r3, [r3, #10]
 8000c02:	b29a      	uxth	r2, r3
 8000c04:	4920      	ldr	r1, [pc, #128]	; (8000c88 <FLASH_OB_DisableWRP+0x13c>)
 8000c06:	8a7b      	ldrh	r3, [r7, #18]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	814b      	strh	r3, [r1, #10]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000c0e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000c12:	f7ff fd01 	bl	8000618 <FLASH_WaitForLastOperation>
 8000c16:	4603      	mov	r3, r0
 8000c18:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP1_WRP1 */

#if defined(FLASH_WRP2_WRP2)
      if((status == HAL_OK) && (WRP2_Data != 0xFFU))
 8000c1a:	7dfb      	ldrb	r3, [r7, #23]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d110      	bne.n	8000c42 <FLASH_OB_DisableWRP+0xf6>
 8000c20:	8a3b      	ldrh	r3, [r7, #16]
 8000c22:	2bff      	cmp	r3, #255	; 0xff
 8000c24:	d00d      	beq.n	8000c42 <FLASH_OB_DisableWRP+0xf6>
      {
        OB->WRP2 |= WRP2_Data;
 8000c26:	4b18      	ldr	r3, [pc, #96]	; (8000c88 <FLASH_OB_DisableWRP+0x13c>)
 8000c28:	899b      	ldrh	r3, [r3, #12]
 8000c2a:	b29a      	uxth	r2, r3
 8000c2c:	4916      	ldr	r1, [pc, #88]	; (8000c88 <FLASH_OB_DisableWRP+0x13c>)
 8000c2e:	8a3b      	ldrh	r3, [r7, #16]
 8000c30:	4313      	orrs	r3, r2
 8000c32:	b29b      	uxth	r3, r3
 8000c34:	818b      	strh	r3, [r1, #12]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000c36:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000c3a:	f7ff fced 	bl	8000618 <FLASH_WaitForLastOperation>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP2_WRP2 */

#if defined(FLASH_WRP3_WRP3)
      if((status == HAL_OK) && (WRP3_Data != 0xFFU))
 8000c42:	7dfb      	ldrb	r3, [r7, #23]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d110      	bne.n	8000c6a <FLASH_OB_DisableWRP+0x11e>
 8000c48:	89fb      	ldrh	r3, [r7, #14]
 8000c4a:	2bff      	cmp	r3, #255	; 0xff
 8000c4c:	d00d      	beq.n	8000c6a <FLASH_OB_DisableWRP+0x11e>
      {
        OB->WRP3 |= WRP3_Data;
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <FLASH_OB_DisableWRP+0x13c>)
 8000c50:	89db      	ldrh	r3, [r3, #14]
 8000c52:	b29a      	uxth	r2, r3
 8000c54:	490c      	ldr	r1, [pc, #48]	; (8000c88 <FLASH_OB_DisableWRP+0x13c>)
 8000c56:	89fb      	ldrh	r3, [r7, #14]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	b29b      	uxth	r3, r3
 8000c5c:	81cb      	strh	r3, [r1, #14]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000c5e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000c62:	f7ff fcd9 	bl	8000618 <FLASH_WaitForLastOperation>
 8000c66:	4603      	mov	r3, r0
 8000c68:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP3_WRP3 */

      /* if the program operation is completed, disable the OPTPG Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8000c6a:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <FLASH_OB_DisableWRP+0x138>)
 8000c6c:	691b      	ldr	r3, [r3, #16]
 8000c6e:	4a05      	ldr	r2, [pc, #20]	; (8000c84 <FLASH_OB_DisableWRP+0x138>)
 8000c70:	f023 0310 	bic.w	r3, r3, #16
 8000c74:	6113      	str	r3, [r2, #16]
    }
  }
  return status;
 8000c76:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3718      	adds	r7, #24
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20000040 	.word	0x20000040
 8000c84:	40022000 	.word	0x40022000
 8000c88:	1ffff800 	.word	0x1ffff800

08000c8c <FLASH_OB_RDP_LevelConfig>:
  *            @arg @ref OB_RDP_LEVEL_0 No protection
  *            @arg @ref OB_RDP_LEVEL_1 Read protection of the memory
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t ReadProtectLevel)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8000c96:	2300      	movs	r3, #0
 8000c98:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(ReadProtectLevel));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000c9a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000c9e:	f7ff fcbb 	bl	8000618 <FLASH_WaitForLastOperation>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	73fb      	strb	r3, [r7, #15]
  
  if(status == HAL_OK)
 8000ca6:	7bfb      	ldrb	r3, [r7, #15]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d133      	bne.n	8000d14 <FLASH_OB_RDP_LevelConfig+0x88>
  { 
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000cac:	4b1c      	ldr	r3, [pc, #112]	; (8000d20 <FLASH_OB_RDP_LevelConfig+0x94>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	61da      	str	r2, [r3, #28]
    
    /* If the previous operation is completed, proceed to erase the option bytes */
    SET_BIT(FLASH->CR, FLASH_CR_OPTER);
 8000cb2:	4b1c      	ldr	r3, [pc, #112]	; (8000d24 <FLASH_OB_RDP_LevelConfig+0x98>)
 8000cb4:	691b      	ldr	r3, [r3, #16]
 8000cb6:	4a1b      	ldr	r2, [pc, #108]	; (8000d24 <FLASH_OB_RDP_LevelConfig+0x98>)
 8000cb8:	f043 0320 	orr.w	r3, r3, #32
 8000cbc:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000cbe:	4b19      	ldr	r3, [pc, #100]	; (8000d24 <FLASH_OB_RDP_LevelConfig+0x98>)
 8000cc0:	691b      	ldr	r3, [r3, #16]
 8000cc2:	4a18      	ldr	r2, [pc, #96]	; (8000d24 <FLASH_OB_RDP_LevelConfig+0x98>)
 8000cc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cc8:	6113      	str	r3, [r2, #16]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000cca:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000cce:	f7ff fca3 	bl	8000618 <FLASH_WaitForLastOperation>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	73fb      	strb	r3, [r7, #15]

    /* If the erase operation is completed, disable the OPTER Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTER);
 8000cd6:	4b13      	ldr	r3, [pc, #76]	; (8000d24 <FLASH_OB_RDP_LevelConfig+0x98>)
 8000cd8:	691b      	ldr	r3, [r3, #16]
 8000cda:	4a12      	ldr	r2, [pc, #72]	; (8000d24 <FLASH_OB_RDP_LevelConfig+0x98>)
 8000cdc:	f023 0320 	bic.w	r3, r3, #32
 8000ce0:	6113      	str	r3, [r2, #16]

    if(status == HAL_OK)
 8000ce2:	7bfb      	ldrb	r3, [r7, #15]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d115      	bne.n	8000d14 <FLASH_OB_RDP_LevelConfig+0x88>
    {
      /* Enable the Option Bytes Programming operation */
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8000ce8:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <FLASH_OB_RDP_LevelConfig+0x98>)
 8000cea:	691b      	ldr	r3, [r3, #16]
 8000cec:	4a0d      	ldr	r2, [pc, #52]	; (8000d24 <FLASH_OB_RDP_LevelConfig+0x98>)
 8000cee:	f043 0310 	orr.w	r3, r3, #16
 8000cf2:	6113      	str	r3, [r2, #16]
      
      WRITE_REG(OB->RDP, ReadProtectLevel);
 8000cf4:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <FLASH_OB_RDP_LevelConfig+0x9c>)
 8000cf6:	79fa      	ldrb	r2, [r7, #7]
 8000cf8:	b292      	uxth	r2, r2
 8000cfa:	801a      	strh	r2, [r3, #0]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE); 
 8000cfc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000d00:	f7ff fc8a 	bl	8000618 <FLASH_WaitForLastOperation>
 8000d04:	4603      	mov	r3, r0
 8000d06:	73fb      	strb	r3, [r7, #15]
      
      /* if the program operation is completed, disable the OPTPG Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <FLASH_OB_RDP_LevelConfig+0x98>)
 8000d0a:	691b      	ldr	r3, [r3, #16]
 8000d0c:	4a05      	ldr	r2, [pc, #20]	; (8000d24 <FLASH_OB_RDP_LevelConfig+0x98>)
 8000d0e:	f023 0310 	bic.w	r3, r3, #16
 8000d12:	6113      	str	r3, [r2, #16]
    }
  }
  
  return status;
 8000d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3710      	adds	r7, #16
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20000040 	.word	0x20000040
 8000d24:	40022000 	.word	0x40022000
 8000d28:	1ffff800 	.word	0x1ffff800

08000d2c <FLASH_OB_UserConfig>:
  *         FLASH_OBR_nRST_STOP(Bit3),FLASH_OBR_nRST_STDBY(Bit4).
  *         And BFBF2(Bit5) for STM32F101xG and STM32F103xG . 
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t UserConfig)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8000d36:	2300      	movs	r3, #0
 8000d38:	73fb      	strb	r3, [r7, #15]
#if defined(FLASH_BANK2_END)
  assert_param(IS_OB_BOOT1((UserConfig&OB_BOOT1_SET)));
#endif /* FLASH_BANK2_END */

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000d3a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000d3e:	f7ff fc6b 	bl	8000618 <FLASH_WaitForLastOperation>
 8000d42:	4603      	mov	r3, r0
 8000d44:	73fb      	strb	r3, [r7, #15]
  
  if(status == HAL_OK)
 8000d46:	7bfb      	ldrb	r3, [r7, #15]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d11b      	bne.n	8000d84 <FLASH_OB_UserConfig+0x58>
  {     
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000d4c:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <FLASH_OB_UserConfig+0x64>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	61da      	str	r2, [r3, #28]

    /* Enable the Option Bytes Programming operation */
    SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
 8000d52:	4b10      	ldr	r3, [pc, #64]	; (8000d94 <FLASH_OB_UserConfig+0x68>)
 8000d54:	691b      	ldr	r3, [r3, #16]
 8000d56:	4a0f      	ldr	r2, [pc, #60]	; (8000d94 <FLASH_OB_UserConfig+0x68>)
 8000d58:	f043 0310 	orr.w	r3, r3, #16
 8000d5c:	6113      	str	r3, [r2, #16]
 
#if defined(FLASH_BANK2_END)
    OB->USER = (UserConfig | 0xF0U);
#else
    OB->USER = (UserConfig | 0x88U);
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	f063 0377 	orn	r3, r3, #119	; 0x77
 8000d64:	b2da      	uxtb	r2, r3
 8000d66:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <FLASH_OB_UserConfig+0x6c>)
 8000d68:	b292      	uxth	r2, r2
 8000d6a:	805a      	strh	r2, [r3, #2]
#endif /* FLASH_BANK2_END */

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000d6c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000d70:	f7ff fc52 	bl	8000618 <FLASH_WaitForLastOperation>
 8000d74:	4603      	mov	r3, r0
 8000d76:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the OPTPG Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <FLASH_OB_UserConfig+0x68>)
 8000d7a:	691b      	ldr	r3, [r3, #16]
 8000d7c:	4a05      	ldr	r2, [pc, #20]	; (8000d94 <FLASH_OB_UserConfig+0x68>)
 8000d7e:	f023 0310 	bic.w	r3, r3, #16
 8000d82:	6113      	str	r3, [r2, #16]
  }
  
  return status; 
 8000d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000040 	.word	0x20000040
 8000d94:	40022000 	.word	0x40022000
 8000d98:	1ffff800 	.word	0x1ffff800

08000d9c <FLASH_OB_ProgramData>:
  *         This parameter can be 0x1FFFF804 or 0x1FFFF806. 
  * @param  Data specifies the data to be programmed.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_ProgramData(uint32_t Address, uint8_t Data)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	460b      	mov	r3, r1
 8000da6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000da8:	2301      	movs	r3, #1
 8000daa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000dac:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000db0:	f7ff fc32 	bl	8000618 <FLASH_WaitForLastOperation>
 8000db4:	4603      	mov	r3, r0
 8000db6:	73fb      	strb	r3, [r7, #15]
  
  if(status == HAL_OK)
 8000db8:	7bfb      	ldrb	r3, [r7, #15]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d118      	bne.n	8000df0 <FLASH_OB_ProgramData+0x54>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000dbe:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <FLASH_OB_ProgramData+0x60>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	61da      	str	r2, [r3, #28]

    /* Enables the Option Bytes Programming operation */
    SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
 8000dc4:	4b0e      	ldr	r3, [pc, #56]	; (8000e00 <FLASH_OB_ProgramData+0x64>)
 8000dc6:	691b      	ldr	r3, [r3, #16]
 8000dc8:	4a0d      	ldr	r2, [pc, #52]	; (8000e00 <FLASH_OB_ProgramData+0x64>)
 8000dca:	f043 0310 	orr.w	r3, r3, #16
 8000dce:	6113      	str	r3, [r2, #16]
    *(__IO uint16_t*)Address = Data;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	78fa      	ldrb	r2, [r7, #3]
 8000dd4:	b292      	uxth	r2, r2
 8000dd6:	801a      	strh	r2, [r3, #0]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000dd8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000ddc:	f7ff fc1c 	bl	8000618 <FLASH_WaitForLastOperation>
 8000de0:	4603      	mov	r3, r0
 8000de2:	73fb      	strb	r3, [r7, #15]
    
    /* If the program operation is completed, disable the OPTPG Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <FLASH_OB_ProgramData+0x64>)
 8000de6:	691b      	ldr	r3, [r3, #16]
 8000de8:	4a05      	ldr	r2, [pc, #20]	; (8000e00 <FLASH_OB_ProgramData+0x64>)
 8000dea:	f023 0310 	bic.w	r3, r3, #16
 8000dee:	6113      	str	r3, [r2, #16]
  }
  /* Return the Option Byte Data Program Status */
  return status;
 8000df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000040 	.word	0x20000040
 8000e00:	40022000 	.word	0x40022000

08000e04 <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval The FLASH Write Protection Option Bytes value
  */
static uint32_t FLASH_OB_GetWRP(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (uint32_t)(READ_REG(FLASH->WRPR));
 8000e08:	4b02      	ldr	r3, [pc, #8]	; (8000e14 <FLASH_OB_GetWRP+0x10>)
 8000e0a:	6a1b      	ldr	r3, [r3, #32]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bc80      	pop	{r7}
 8000e12:	4770      	bx	lr
 8000e14:	40022000 	.word	0x40022000

08000e18 <FLASH_OB_GetRDP>:
  *         This parameter can be one of the following values:
  *            @arg @ref OB_RDP_LEVEL_0 No protection
  *            @arg @ref OB_RDP_LEVEL_1 Read protection of the memory
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
  uint32_t readstatus = OB_RDP_LEVEL_0;
 8000e1e:	23a5      	movs	r3, #165	; 0xa5
 8000e20:	607b      	str	r3, [r7, #4]
  uint32_t tmp_reg = 0U;
 8000e22:	2300      	movs	r3, #0
 8000e24:	603b      	str	r3, [r7, #0]
  
  /* Read RDP level bits */
  tmp_reg = READ_BIT(FLASH->OBR, FLASH_OBR_RDPRT);
 8000e26:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <FLASH_OB_GetRDP+0x34>)
 8000e28:	69db      	ldr	r3, [r3, #28]
 8000e2a:	f003 0302 	and.w	r3, r3, #2
 8000e2e:	603b      	str	r3, [r7, #0]

  if (tmp_reg == FLASH_OBR_RDPRT)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	2b02      	cmp	r3, #2
 8000e34:	d102      	bne.n	8000e3c <FLASH_OB_GetRDP+0x24>
  {
    readstatus = OB_RDP_LEVEL_1;
 8000e36:	2300      	movs	r3, #0
 8000e38:	607b      	str	r3, [r7, #4]
 8000e3a:	e001      	b.n	8000e40 <FLASH_OB_GetRDP+0x28>
  }
  else 
  {
    readstatus = OB_RDP_LEVEL_0;
 8000e3c:	23a5      	movs	r3, #165	; 0xa5
 8000e3e:	607b      	str	r3, [r7, #4]
  }

  return readstatus;
 8000e40:	687b      	ldr	r3, [r7, #4]
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr
 8000e4c:	40022000 	.word	0x40022000

08000e50 <FLASH_OB_GetUser>:
  * @retval The FLASH User Option Bytes values: FLASH_OBR_IWDG_SW(Bit2), 
  *         FLASH_OBR_nRST_STOP(Bit3),FLASH_OBR_nRST_STDBY(Bit4).
  *         And FLASH_OBR_BFB2(Bit5) for STM32F101xG and STM32F103xG . 
  */
static uint8_t FLASH_OB_GetUser(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return (uint8_t)((READ_REG(FLASH->OBR) & FLASH_OBR_USER) >> FLASH_POSITION_IWDGSW_BIT);
 8000e54:	4b05      	ldr	r3, [pc, #20]	; (8000e6c <FLASH_OB_GetUser+0x1c>)
 8000e56:	69db      	ldr	r3, [r3, #28]
 8000e58:	089b      	lsrs	r3, r3, #2
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	f003 0307 	and.w	r3, r3, #7
 8000e60:	b2db      	uxtb	r3, r3
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bc80      	pop	{r7}
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	40022000 	.word	0x40022000

08000e70 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000e78:	4b0b      	ldr	r3, [pc, #44]	; (8000ea8 <FLASH_PageErase+0x38>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000e7e:	4b0b      	ldr	r3, [pc, #44]	; (8000eac <FLASH_PageErase+0x3c>)
 8000e80:	691b      	ldr	r3, [r3, #16]
 8000e82:	4a0a      	ldr	r2, [pc, #40]	; (8000eac <FLASH_PageErase+0x3c>)
 8000e84:	f043 0302 	orr.w	r3, r3, #2
 8000e88:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8000e8a:	4a08      	ldr	r2, [pc, #32]	; (8000eac <FLASH_PageErase+0x3c>)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <FLASH_PageErase+0x3c>)
 8000e92:	691b      	ldr	r3, [r3, #16]
 8000e94:	4a05      	ldr	r2, [pc, #20]	; (8000eac <FLASH_PageErase+0x3c>)
 8000e96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e9a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bc80      	pop	{r7}
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	20000040 	.word	0x20000040
 8000eac:	40022000 	.word	0x40022000

08000eb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b08b      	sub	sp, #44	; 0x2c
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8000eca:	2300      	movs	r3, #0
 8000ecc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000ece:	2300      	movs	r3, #0
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ed2:	e127      	b.n	8001124 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	69fa      	ldr	r2, [r7, #28]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	f040 8116 	bne.w	800111e <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	2b12      	cmp	r3, #18
 8000ef8:	d034      	beq.n	8000f64 <HAL_GPIO_Init+0xb4>
 8000efa:	2b12      	cmp	r3, #18
 8000efc:	d80d      	bhi.n	8000f1a <HAL_GPIO_Init+0x6a>
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	d02b      	beq.n	8000f5a <HAL_GPIO_Init+0xaa>
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d804      	bhi.n	8000f10 <HAL_GPIO_Init+0x60>
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d031      	beq.n	8000f6e <HAL_GPIO_Init+0xbe>
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d01c      	beq.n	8000f48 <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f0e:	e048      	b.n	8000fa2 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000f10:	2b03      	cmp	r3, #3
 8000f12:	d043      	beq.n	8000f9c <HAL_GPIO_Init+0xec>
 8000f14:	2b11      	cmp	r3, #17
 8000f16:	d01b      	beq.n	8000f50 <HAL_GPIO_Init+0xa0>
          break;
 8000f18:	e043      	b.n	8000fa2 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000f1a:	4a87      	ldr	r2, [pc, #540]	; (8001138 <HAL_GPIO_Init+0x288>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d026      	beq.n	8000f6e <HAL_GPIO_Init+0xbe>
 8000f20:	4a85      	ldr	r2, [pc, #532]	; (8001138 <HAL_GPIO_Init+0x288>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d806      	bhi.n	8000f34 <HAL_GPIO_Init+0x84>
 8000f26:	4a85      	ldr	r2, [pc, #532]	; (800113c <HAL_GPIO_Init+0x28c>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d020      	beq.n	8000f6e <HAL_GPIO_Init+0xbe>
 8000f2c:	4a84      	ldr	r2, [pc, #528]	; (8001140 <HAL_GPIO_Init+0x290>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d01d      	beq.n	8000f6e <HAL_GPIO_Init+0xbe>
          break;
 8000f32:	e036      	b.n	8000fa2 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000f34:	4a83      	ldr	r2, [pc, #524]	; (8001144 <HAL_GPIO_Init+0x294>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d019      	beq.n	8000f6e <HAL_GPIO_Init+0xbe>
 8000f3a:	4a83      	ldr	r2, [pc, #524]	; (8001148 <HAL_GPIO_Init+0x298>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d016      	beq.n	8000f6e <HAL_GPIO_Init+0xbe>
 8000f40:	4a82      	ldr	r2, [pc, #520]	; (800114c <HAL_GPIO_Init+0x29c>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d013      	beq.n	8000f6e <HAL_GPIO_Init+0xbe>
          break;
 8000f46:	e02c      	b.n	8000fa2 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	623b      	str	r3, [r7, #32]
          break;
 8000f4e:	e028      	b.n	8000fa2 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	3304      	adds	r3, #4
 8000f56:	623b      	str	r3, [r7, #32]
          break;
 8000f58:	e023      	b.n	8000fa2 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	68db      	ldr	r3, [r3, #12]
 8000f5e:	3308      	adds	r3, #8
 8000f60:	623b      	str	r3, [r7, #32]
          break;
 8000f62:	e01e      	b.n	8000fa2 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	330c      	adds	r3, #12
 8000f6a:	623b      	str	r3, [r7, #32]
          break;
 8000f6c:	e019      	b.n	8000fa2 <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d102      	bne.n	8000f7c <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f76:	2304      	movs	r3, #4
 8000f78:	623b      	str	r3, [r7, #32]
          break;
 8000f7a:	e012      	b.n	8000fa2 <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d105      	bne.n	8000f90 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f84:	2308      	movs	r3, #8
 8000f86:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	69fa      	ldr	r2, [r7, #28]
 8000f8c:	611a      	str	r2, [r3, #16]
          break;
 8000f8e:	e008      	b.n	8000fa2 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f90:	2308      	movs	r3, #8
 8000f92:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	69fa      	ldr	r2, [r7, #28]
 8000f98:	615a      	str	r2, [r3, #20]
          break;
 8000f9a:	e002      	b.n	8000fa2 <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	623b      	str	r3, [r7, #32]
          break;
 8000fa0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fa2:	69bb      	ldr	r3, [r7, #24]
 8000fa4:	2bff      	cmp	r3, #255	; 0xff
 8000fa6:	d801      	bhi.n	8000fac <HAL_GPIO_Init+0xfc>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	e001      	b.n	8000fb0 <HAL_GPIO_Init+0x100>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3304      	adds	r3, #4
 8000fb0:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	2bff      	cmp	r3, #255	; 0xff
 8000fb6:	d802      	bhi.n	8000fbe <HAL_GPIO_Init+0x10e>
 8000fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	e002      	b.n	8000fc4 <HAL_GPIO_Init+0x114>
 8000fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc0:	3b08      	subs	r3, #8
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	210f      	movs	r1, #15
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	401a      	ands	r2, r3
 8000fd6:	6a39      	ldr	r1, [r7, #32]
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	fa01 f303 	lsl.w	r3, r1, r3
 8000fde:	431a      	orrs	r2, r3
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	f000 8096 	beq.w	800111e <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ff2:	4b57      	ldr	r3, [pc, #348]	; (8001150 <HAL_GPIO_Init+0x2a0>)
 8000ff4:	699b      	ldr	r3, [r3, #24]
 8000ff6:	4a56      	ldr	r2, [pc, #344]	; (8001150 <HAL_GPIO_Init+0x2a0>)
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	6193      	str	r3, [r2, #24]
 8000ffe:	4b54      	ldr	r3, [pc, #336]	; (8001150 <HAL_GPIO_Init+0x2a0>)
 8001000:	699b      	ldr	r3, [r3, #24]
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 800100a:	4a52      	ldr	r2, [pc, #328]	; (8001154 <HAL_GPIO_Init+0x2a4>)
 800100c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100e:	089b      	lsrs	r3, r3, #2
 8001010:	3302      	adds	r3, #2
 8001012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001016:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101a:	f003 0303 	and.w	r3, r3, #3
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	220f      	movs	r2, #15
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43db      	mvns	r3, r3
 8001028:	697a      	ldr	r2, [r7, #20]
 800102a:	4013      	ands	r3, r2
 800102c:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a49      	ldr	r2, [pc, #292]	; (8001158 <HAL_GPIO_Init+0x2a8>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d013      	beq.n	800105e <HAL_GPIO_Init+0x1ae>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a48      	ldr	r2, [pc, #288]	; (800115c <HAL_GPIO_Init+0x2ac>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d00d      	beq.n	800105a <HAL_GPIO_Init+0x1aa>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a47      	ldr	r2, [pc, #284]	; (8001160 <HAL_GPIO_Init+0x2b0>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d007      	beq.n	8001056 <HAL_GPIO_Init+0x1a6>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a46      	ldr	r2, [pc, #280]	; (8001164 <HAL_GPIO_Init+0x2b4>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d101      	bne.n	8001052 <HAL_GPIO_Init+0x1a2>
 800104e:	2303      	movs	r3, #3
 8001050:	e006      	b.n	8001060 <HAL_GPIO_Init+0x1b0>
 8001052:	2304      	movs	r3, #4
 8001054:	e004      	b.n	8001060 <HAL_GPIO_Init+0x1b0>
 8001056:	2302      	movs	r3, #2
 8001058:	e002      	b.n	8001060 <HAL_GPIO_Init+0x1b0>
 800105a:	2301      	movs	r3, #1
 800105c:	e000      	b.n	8001060 <HAL_GPIO_Init+0x1b0>
 800105e:	2300      	movs	r3, #0
 8001060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001062:	f002 0203 	and.w	r2, r2, #3
 8001066:	0092      	lsls	r2, r2, #2
 8001068:	4093      	lsls	r3, r2
 800106a:	697a      	ldr	r2, [r7, #20]
 800106c:	4313      	orrs	r3, r2
 800106e:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8001070:	4938      	ldr	r1, [pc, #224]	; (8001154 <HAL_GPIO_Init+0x2a4>)
 8001072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001074:	089b      	lsrs	r3, r3, #2
 8001076:	3302      	adds	r3, #2
 8001078:	697a      	ldr	r2, [r7, #20]
 800107a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001086:	2b00      	cmp	r3, #0
 8001088:	d006      	beq.n	8001098 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800108a:	4b37      	ldr	r3, [pc, #220]	; (8001168 <HAL_GPIO_Init+0x2b8>)
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	4936      	ldr	r1, [pc, #216]	; (8001168 <HAL_GPIO_Init+0x2b8>)
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	4313      	orrs	r3, r2
 8001094:	600b      	str	r3, [r1, #0]
 8001096:	e006      	b.n	80010a6 <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001098:	4b33      	ldr	r3, [pc, #204]	; (8001168 <HAL_GPIO_Init+0x2b8>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	43db      	mvns	r3, r3
 80010a0:	4931      	ldr	r1, [pc, #196]	; (8001168 <HAL_GPIO_Init+0x2b8>)
 80010a2:	4013      	ands	r3, r2
 80010a4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d006      	beq.n	80010c0 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80010b2:	4b2d      	ldr	r3, [pc, #180]	; (8001168 <HAL_GPIO_Init+0x2b8>)
 80010b4:	685a      	ldr	r2, [r3, #4]
 80010b6:	492c      	ldr	r1, [pc, #176]	; (8001168 <HAL_GPIO_Init+0x2b8>)
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	604b      	str	r3, [r1, #4]
 80010be:	e006      	b.n	80010ce <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80010c0:	4b29      	ldr	r3, [pc, #164]	; (8001168 <HAL_GPIO_Init+0x2b8>)
 80010c2:	685a      	ldr	r2, [r3, #4]
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	43db      	mvns	r3, r3
 80010c8:	4927      	ldr	r1, [pc, #156]	; (8001168 <HAL_GPIO_Init+0x2b8>)
 80010ca:	4013      	ands	r3, r2
 80010cc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d006      	beq.n	80010e8 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010da:	4b23      	ldr	r3, [pc, #140]	; (8001168 <HAL_GPIO_Init+0x2b8>)
 80010dc:	689a      	ldr	r2, [r3, #8]
 80010de:	4922      	ldr	r1, [pc, #136]	; (8001168 <HAL_GPIO_Init+0x2b8>)
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	608b      	str	r3, [r1, #8]
 80010e6:	e006      	b.n	80010f6 <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010e8:	4b1f      	ldr	r3, [pc, #124]	; (8001168 <HAL_GPIO_Init+0x2b8>)
 80010ea:	689a      	ldr	r2, [r3, #8]
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	43db      	mvns	r3, r3
 80010f0:	491d      	ldr	r1, [pc, #116]	; (8001168 <HAL_GPIO_Init+0x2b8>)
 80010f2:	4013      	ands	r3, r2
 80010f4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d006      	beq.n	8001110 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001102:	4b19      	ldr	r3, [pc, #100]	; (8001168 <HAL_GPIO_Init+0x2b8>)
 8001104:	68da      	ldr	r2, [r3, #12]
 8001106:	4918      	ldr	r1, [pc, #96]	; (8001168 <HAL_GPIO_Init+0x2b8>)
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	4313      	orrs	r3, r2
 800110c:	60cb      	str	r3, [r1, #12]
 800110e:	e006      	b.n	800111e <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001110:	4b15      	ldr	r3, [pc, #84]	; (8001168 <HAL_GPIO_Init+0x2b8>)
 8001112:	68da      	ldr	r2, [r3, #12]
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	43db      	mvns	r3, r3
 8001118:	4913      	ldr	r1, [pc, #76]	; (8001168 <HAL_GPIO_Init+0x2b8>)
 800111a:	4013      	ands	r3, r2
 800111c:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 800111e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001120:	3301      	adds	r3, #1
 8001122:	627b      	str	r3, [r7, #36]	; 0x24
 8001124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001126:	2b0f      	cmp	r3, #15
 8001128:	f67f aed4 	bls.w	8000ed4 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 800112c:	bf00      	nop
 800112e:	372c      	adds	r7, #44	; 0x2c
 8001130:	46bd      	mov	sp, r7
 8001132:	bc80      	pop	{r7}
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	10210000 	.word	0x10210000
 800113c:	10110000 	.word	0x10110000
 8001140:	10120000 	.word	0x10120000
 8001144:	10310000 	.word	0x10310000
 8001148:	10320000 	.word	0x10320000
 800114c:	10220000 	.word	0x10220000
 8001150:	40021000 	.word	0x40021000
 8001154:	40010000 	.word	0x40010000
 8001158:	40010800 	.word	0x40010800
 800115c:	40010c00 	.word	0x40010c00
 8001160:	40011000 	.word	0x40011000
 8001164:	40011400 	.word	0x40011400
 8001168:	40010400 	.word	0x40010400

0800116c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	460b      	mov	r3, r1
 8001176:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	689a      	ldr	r2, [r3, #8]
 800117c:	887b      	ldrh	r3, [r7, #2]
 800117e:	4013      	ands	r3, r2
 8001180:	2b00      	cmp	r3, #0
 8001182:	d002      	beq.n	800118a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001184:	2301      	movs	r3, #1
 8001186:	73fb      	strb	r3, [r7, #15]
 8001188:	e001      	b.n	800118e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800118a:	2300      	movs	r3, #0
 800118c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800118e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001190:	4618      	mov	r0, r3
 8001192:	3714      	adds	r7, #20
 8001194:	46bd      	mov	sp, r7
 8001196:	bc80      	pop	{r7}
 8001198:	4770      	bx	lr
	...

0800119c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 80011a4:	2300      	movs	r3, #0
 80011a6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	f000 8087 	beq.w	80012c4 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80011b6:	4b92      	ldr	r3, [pc, #584]	; (8001400 <HAL_RCC_OscConfig+0x264>)
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f003 030c 	and.w	r3, r3, #12
 80011be:	2b04      	cmp	r3, #4
 80011c0:	d00c      	beq.n	80011dc <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011c2:	4b8f      	ldr	r3, [pc, #572]	; (8001400 <HAL_RCC_OscConfig+0x264>)
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f003 030c 	and.w	r3, r3, #12
 80011ca:	2b08      	cmp	r3, #8
 80011cc:	d112      	bne.n	80011f4 <HAL_RCC_OscConfig+0x58>
 80011ce:	4b8c      	ldr	r3, [pc, #560]	; (8001400 <HAL_RCC_OscConfig+0x264>)
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011da:	d10b      	bne.n	80011f4 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011dc:	4b88      	ldr	r3, [pc, #544]	; (8001400 <HAL_RCC_OscConfig+0x264>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d06c      	beq.n	80012c2 <HAL_RCC_OscConfig+0x126>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d168      	bne.n	80012c2 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	e22d      	b.n	8001650 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011fc:	d106      	bne.n	800120c <HAL_RCC_OscConfig+0x70>
 80011fe:	4b80      	ldr	r3, [pc, #512]	; (8001400 <HAL_RCC_OscConfig+0x264>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a7f      	ldr	r2, [pc, #508]	; (8001400 <HAL_RCC_OscConfig+0x264>)
 8001204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001208:	6013      	str	r3, [r2, #0]
 800120a:	e02e      	b.n	800126a <HAL_RCC_OscConfig+0xce>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d10c      	bne.n	800122e <HAL_RCC_OscConfig+0x92>
 8001214:	4b7a      	ldr	r3, [pc, #488]	; (8001400 <HAL_RCC_OscConfig+0x264>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a79      	ldr	r2, [pc, #484]	; (8001400 <HAL_RCC_OscConfig+0x264>)
 800121a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800121e:	6013      	str	r3, [r2, #0]
 8001220:	4b77      	ldr	r3, [pc, #476]	; (8001400 <HAL_RCC_OscConfig+0x264>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a76      	ldr	r2, [pc, #472]	; (8001400 <HAL_RCC_OscConfig+0x264>)
 8001226:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800122a:	6013      	str	r3, [r2, #0]
 800122c:	e01d      	b.n	800126a <HAL_RCC_OscConfig+0xce>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001236:	d10c      	bne.n	8001252 <HAL_RCC_OscConfig+0xb6>
 8001238:	4b71      	ldr	r3, [pc, #452]	; (8001400 <HAL_RCC_OscConfig+0x264>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a70      	ldr	r2, [pc, #448]	; (8001400 <HAL_RCC_OscConfig+0x264>)
 800123e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001242:	6013      	str	r3, [r2, #0]
 8001244:	4b6e      	ldr	r3, [pc, #440]	; (8001400 <HAL_RCC_OscConfig+0x264>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a6d      	ldr	r2, [pc, #436]	; (8001400 <HAL_RCC_OscConfig+0x264>)
 800124a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800124e:	6013      	str	r3, [r2, #0]
 8001250:	e00b      	b.n	800126a <HAL_RCC_OscConfig+0xce>
 8001252:	4b6b      	ldr	r3, [pc, #428]	; (8001400 <HAL_RCC_OscConfig+0x264>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a6a      	ldr	r2, [pc, #424]	; (8001400 <HAL_RCC_OscConfig+0x264>)
 8001258:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800125c:	6013      	str	r3, [r2, #0]
 800125e:	4b68      	ldr	r3, [pc, #416]	; (8001400 <HAL_RCC_OscConfig+0x264>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a67      	ldr	r2, [pc, #412]	; (8001400 <HAL_RCC_OscConfig+0x264>)
 8001264:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001268:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d013      	beq.n	800129a <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001272:	f7fe ffc3 	bl	80001fc <HAL_GetTick>
 8001276:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001278:	e008      	b.n	800128c <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800127a:	f7fe ffbf 	bl	80001fc <HAL_GetTick>
 800127e:	4602      	mov	r2, r0
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	2b64      	cmp	r3, #100	; 0x64
 8001286:	d901      	bls.n	800128c <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e1e1      	b.n	8001650 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800128c:	4b5c      	ldr	r3, [pc, #368]	; (8001400 <HAL_RCC_OscConfig+0x264>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0f0      	beq.n	800127a <HAL_RCC_OscConfig+0xde>
 8001298:	e014      	b.n	80012c4 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800129a:	f7fe ffaf 	bl	80001fc <HAL_GetTick>
 800129e:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012a0:	e008      	b.n	80012b4 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012a2:	f7fe ffab 	bl	80001fc <HAL_GetTick>
 80012a6:	4602      	mov	r2, r0
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	2b64      	cmp	r3, #100	; 0x64
 80012ae:	d901      	bls.n	80012b4 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 80012b0:	2303      	movs	r3, #3
 80012b2:	e1cd      	b.n	8001650 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012b4:	4b52      	ldr	r3, [pc, #328]	; (8001400 <HAL_RCC_OscConfig+0x264>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d1f0      	bne.n	80012a2 <HAL_RCC_OscConfig+0x106>
 80012c0:	e000      	b.n	80012c4 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012c2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 0302 	and.w	r3, r3, #2
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d063      	beq.n	8001398 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80012d0:	4b4b      	ldr	r3, [pc, #300]	; (8001400 <HAL_RCC_OscConfig+0x264>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f003 030c 	and.w	r3, r3, #12
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d00b      	beq.n	80012f4 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80012dc:	4b48      	ldr	r3, [pc, #288]	; (8001400 <HAL_RCC_OscConfig+0x264>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f003 030c 	and.w	r3, r3, #12
 80012e4:	2b08      	cmp	r3, #8
 80012e6:	d11c      	bne.n	8001322 <HAL_RCC_OscConfig+0x186>
 80012e8:	4b45      	ldr	r3, [pc, #276]	; (8001400 <HAL_RCC_OscConfig+0x264>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d116      	bne.n	8001322 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012f4:	4b42      	ldr	r3, [pc, #264]	; (8001400 <HAL_RCC_OscConfig+0x264>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 0302 	and.w	r3, r3, #2
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d005      	beq.n	800130c <HAL_RCC_OscConfig+0x170>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	691b      	ldr	r3, [r3, #16]
 8001304:	2b01      	cmp	r3, #1
 8001306:	d001      	beq.n	800130c <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	e1a1      	b.n	8001650 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800130c:	4b3c      	ldr	r3, [pc, #240]	; (8001400 <HAL_RCC_OscConfig+0x264>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	695b      	ldr	r3, [r3, #20]
 8001318:	00db      	lsls	r3, r3, #3
 800131a:	4939      	ldr	r1, [pc, #228]	; (8001400 <HAL_RCC_OscConfig+0x264>)
 800131c:	4313      	orrs	r3, r2
 800131e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001320:	e03a      	b.n	8001398 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	691b      	ldr	r3, [r3, #16]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d020      	beq.n	800136c <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800132a:	4b36      	ldr	r3, [pc, #216]	; (8001404 <HAL_RCC_OscConfig+0x268>)
 800132c:	2201      	movs	r2, #1
 800132e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001330:	f7fe ff64 	bl	80001fc <HAL_GetTick>
 8001334:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001336:	e008      	b.n	800134a <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001338:	f7fe ff60 	bl	80001fc <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	2b02      	cmp	r3, #2
 8001344:	d901      	bls.n	800134a <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8001346:	2303      	movs	r3, #3
 8001348:	e182      	b.n	8001650 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800134a:	4b2d      	ldr	r3, [pc, #180]	; (8001400 <HAL_RCC_OscConfig+0x264>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	2b00      	cmp	r3, #0
 8001354:	d0f0      	beq.n	8001338 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001356:	4b2a      	ldr	r3, [pc, #168]	; (8001400 <HAL_RCC_OscConfig+0x264>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	695b      	ldr	r3, [r3, #20]
 8001362:	00db      	lsls	r3, r3, #3
 8001364:	4926      	ldr	r1, [pc, #152]	; (8001400 <HAL_RCC_OscConfig+0x264>)
 8001366:	4313      	orrs	r3, r2
 8001368:	600b      	str	r3, [r1, #0]
 800136a:	e015      	b.n	8001398 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800136c:	4b25      	ldr	r3, [pc, #148]	; (8001404 <HAL_RCC_OscConfig+0x268>)
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001372:	f7fe ff43 	bl	80001fc <HAL_GetTick>
 8001376:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001378:	e008      	b.n	800138c <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800137a:	f7fe ff3f 	bl	80001fc <HAL_GetTick>
 800137e:	4602      	mov	r2, r0
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	2b02      	cmp	r3, #2
 8001386:	d901      	bls.n	800138c <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8001388:	2303      	movs	r3, #3
 800138a:	e161      	b.n	8001650 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800138c:	4b1c      	ldr	r3, [pc, #112]	; (8001400 <HAL_RCC_OscConfig+0x264>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0302 	and.w	r3, r3, #2
 8001394:	2b00      	cmp	r3, #0
 8001396:	d1f0      	bne.n	800137a <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 0308 	and.w	r3, r3, #8
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d039      	beq.n	8001418 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d019      	beq.n	80013e0 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013ac:	4b16      	ldr	r3, [pc, #88]	; (8001408 <HAL_RCC_OscConfig+0x26c>)
 80013ae:	2201      	movs	r2, #1
 80013b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b2:	f7fe ff23 	bl	80001fc <HAL_GetTick>
 80013b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013b8:	e008      	b.n	80013cc <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013ba:	f7fe ff1f 	bl	80001fc <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d901      	bls.n	80013cc <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e141      	b.n	8001650 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013cc:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <HAL_RCC_OscConfig+0x264>)
 80013ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d0:	f003 0302 	and.w	r3, r3, #2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d0f0      	beq.n	80013ba <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 80013d8:	2001      	movs	r0, #1
 80013da:	f000 fae3 	bl	80019a4 <RCC_Delay>
 80013de:	e01b      	b.n	8001418 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013e0:	4b09      	ldr	r3, [pc, #36]	; (8001408 <HAL_RCC_OscConfig+0x26c>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013e6:	f7fe ff09 	bl	80001fc <HAL_GetTick>
 80013ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013ec:	e00e      	b.n	800140c <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013ee:	f7fe ff05 	bl	80001fc <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d907      	bls.n	800140c <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 80013fc:	2303      	movs	r3, #3
 80013fe:	e127      	b.n	8001650 <HAL_RCC_OscConfig+0x4b4>
 8001400:	40021000 	.word	0x40021000
 8001404:	42420000 	.word	0x42420000
 8001408:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800140c:	4b92      	ldr	r3, [pc, #584]	; (8001658 <HAL_RCC_OscConfig+0x4bc>)
 800140e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001410:	f003 0302 	and.w	r3, r3, #2
 8001414:	2b00      	cmp	r3, #0
 8001416:	d1ea      	bne.n	80013ee <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0304 	and.w	r3, r3, #4
 8001420:	2b00      	cmp	r3, #0
 8001422:	f000 80a6 	beq.w	8001572 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001426:	2300      	movs	r3, #0
 8001428:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800142a:	4b8b      	ldr	r3, [pc, #556]	; (8001658 <HAL_RCC_OscConfig+0x4bc>)
 800142c:	69db      	ldr	r3, [r3, #28]
 800142e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d10d      	bne.n	8001452 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001436:	4b88      	ldr	r3, [pc, #544]	; (8001658 <HAL_RCC_OscConfig+0x4bc>)
 8001438:	69db      	ldr	r3, [r3, #28]
 800143a:	4a87      	ldr	r2, [pc, #540]	; (8001658 <HAL_RCC_OscConfig+0x4bc>)
 800143c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001440:	61d3      	str	r3, [r2, #28]
 8001442:	4b85      	ldr	r3, [pc, #532]	; (8001658 <HAL_RCC_OscConfig+0x4bc>)
 8001444:	69db      	ldr	r3, [r3, #28]
 8001446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800144e:	2301      	movs	r3, #1
 8001450:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001452:	4b82      	ldr	r3, [pc, #520]	; (800165c <HAL_RCC_OscConfig+0x4c0>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800145a:	2b00      	cmp	r3, #0
 800145c:	d118      	bne.n	8001490 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800145e:	4b7f      	ldr	r3, [pc, #508]	; (800165c <HAL_RCC_OscConfig+0x4c0>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a7e      	ldr	r2, [pc, #504]	; (800165c <HAL_RCC_OscConfig+0x4c0>)
 8001464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001468:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800146a:	f7fe fec7 	bl	80001fc <HAL_GetTick>
 800146e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001470:	e008      	b.n	8001484 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001472:	f7fe fec3 	bl	80001fc <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b64      	cmp	r3, #100	; 0x64
 800147e:	d901      	bls.n	8001484 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e0e5      	b.n	8001650 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001484:	4b75      	ldr	r3, [pc, #468]	; (800165c <HAL_RCC_OscConfig+0x4c0>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800148c:	2b00      	cmp	r3, #0
 800148e:	d0f0      	beq.n	8001472 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	2b01      	cmp	r3, #1
 8001496:	d106      	bne.n	80014a6 <HAL_RCC_OscConfig+0x30a>
 8001498:	4b6f      	ldr	r3, [pc, #444]	; (8001658 <HAL_RCC_OscConfig+0x4bc>)
 800149a:	6a1b      	ldr	r3, [r3, #32]
 800149c:	4a6e      	ldr	r2, [pc, #440]	; (8001658 <HAL_RCC_OscConfig+0x4bc>)
 800149e:	f043 0301 	orr.w	r3, r3, #1
 80014a2:	6213      	str	r3, [r2, #32]
 80014a4:	e02d      	b.n	8001502 <HAL_RCC_OscConfig+0x366>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	68db      	ldr	r3, [r3, #12]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d10c      	bne.n	80014c8 <HAL_RCC_OscConfig+0x32c>
 80014ae:	4b6a      	ldr	r3, [pc, #424]	; (8001658 <HAL_RCC_OscConfig+0x4bc>)
 80014b0:	6a1b      	ldr	r3, [r3, #32]
 80014b2:	4a69      	ldr	r2, [pc, #420]	; (8001658 <HAL_RCC_OscConfig+0x4bc>)
 80014b4:	f023 0301 	bic.w	r3, r3, #1
 80014b8:	6213      	str	r3, [r2, #32]
 80014ba:	4b67      	ldr	r3, [pc, #412]	; (8001658 <HAL_RCC_OscConfig+0x4bc>)
 80014bc:	6a1b      	ldr	r3, [r3, #32]
 80014be:	4a66      	ldr	r2, [pc, #408]	; (8001658 <HAL_RCC_OscConfig+0x4bc>)
 80014c0:	f023 0304 	bic.w	r3, r3, #4
 80014c4:	6213      	str	r3, [r2, #32]
 80014c6:	e01c      	b.n	8001502 <HAL_RCC_OscConfig+0x366>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	2b05      	cmp	r3, #5
 80014ce:	d10c      	bne.n	80014ea <HAL_RCC_OscConfig+0x34e>
 80014d0:	4b61      	ldr	r3, [pc, #388]	; (8001658 <HAL_RCC_OscConfig+0x4bc>)
 80014d2:	6a1b      	ldr	r3, [r3, #32]
 80014d4:	4a60      	ldr	r2, [pc, #384]	; (8001658 <HAL_RCC_OscConfig+0x4bc>)
 80014d6:	f043 0304 	orr.w	r3, r3, #4
 80014da:	6213      	str	r3, [r2, #32]
 80014dc:	4b5e      	ldr	r3, [pc, #376]	; (8001658 <HAL_RCC_OscConfig+0x4bc>)
 80014de:	6a1b      	ldr	r3, [r3, #32]
 80014e0:	4a5d      	ldr	r2, [pc, #372]	; (8001658 <HAL_RCC_OscConfig+0x4bc>)
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	6213      	str	r3, [r2, #32]
 80014e8:	e00b      	b.n	8001502 <HAL_RCC_OscConfig+0x366>
 80014ea:	4b5b      	ldr	r3, [pc, #364]	; (8001658 <HAL_RCC_OscConfig+0x4bc>)
 80014ec:	6a1b      	ldr	r3, [r3, #32]
 80014ee:	4a5a      	ldr	r2, [pc, #360]	; (8001658 <HAL_RCC_OscConfig+0x4bc>)
 80014f0:	f023 0301 	bic.w	r3, r3, #1
 80014f4:	6213      	str	r3, [r2, #32]
 80014f6:	4b58      	ldr	r3, [pc, #352]	; (8001658 <HAL_RCC_OscConfig+0x4bc>)
 80014f8:	6a1b      	ldr	r3, [r3, #32]
 80014fa:	4a57      	ldr	r2, [pc, #348]	; (8001658 <HAL_RCC_OscConfig+0x4bc>)
 80014fc:	f023 0304 	bic.w	r3, r3, #4
 8001500:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d015      	beq.n	8001536 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800150a:	f7fe fe77 	bl	80001fc <HAL_GetTick>
 800150e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001510:	e00a      	b.n	8001528 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001512:	f7fe fe73 	bl	80001fc <HAL_GetTick>
 8001516:	4602      	mov	r2, r0
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001520:	4293      	cmp	r3, r2
 8001522:	d901      	bls.n	8001528 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e093      	b.n	8001650 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001528:	4b4b      	ldr	r3, [pc, #300]	; (8001658 <HAL_RCC_OscConfig+0x4bc>)
 800152a:	6a1b      	ldr	r3, [r3, #32]
 800152c:	f003 0302 	and.w	r3, r3, #2
 8001530:	2b00      	cmp	r3, #0
 8001532:	d0ee      	beq.n	8001512 <HAL_RCC_OscConfig+0x376>
 8001534:	e014      	b.n	8001560 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001536:	f7fe fe61 	bl	80001fc <HAL_GetTick>
 800153a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800153c:	e00a      	b.n	8001554 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800153e:	f7fe fe5d 	bl	80001fc <HAL_GetTick>
 8001542:	4602      	mov	r2, r0
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	f241 3288 	movw	r2, #5000	; 0x1388
 800154c:	4293      	cmp	r3, r2
 800154e:	d901      	bls.n	8001554 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e07d      	b.n	8001650 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001554:	4b40      	ldr	r3, [pc, #256]	; (8001658 <HAL_RCC_OscConfig+0x4bc>)
 8001556:	6a1b      	ldr	r3, [r3, #32]
 8001558:	f003 0302 	and.w	r3, r3, #2
 800155c:	2b00      	cmp	r3, #0
 800155e:	d1ee      	bne.n	800153e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001560:	7dfb      	ldrb	r3, [r7, #23]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d105      	bne.n	8001572 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001566:	4b3c      	ldr	r3, [pc, #240]	; (8001658 <HAL_RCC_OscConfig+0x4bc>)
 8001568:	69db      	ldr	r3, [r3, #28]
 800156a:	4a3b      	ldr	r2, [pc, #236]	; (8001658 <HAL_RCC_OscConfig+0x4bc>)
 800156c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001570:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	69db      	ldr	r3, [r3, #28]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d069      	beq.n	800164e <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800157a:	4b37      	ldr	r3, [pc, #220]	; (8001658 <HAL_RCC_OscConfig+0x4bc>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f003 030c 	and.w	r3, r3, #12
 8001582:	2b08      	cmp	r3, #8
 8001584:	d061      	beq.n	800164a <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	69db      	ldr	r3, [r3, #28]
 800158a:	2b02      	cmp	r3, #2
 800158c:	d146      	bne.n	800161c <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800158e:	4b34      	ldr	r3, [pc, #208]	; (8001660 <HAL_RCC_OscConfig+0x4c4>)
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001594:	f7fe fe32 	bl	80001fc <HAL_GetTick>
 8001598:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800159c:	f7fe fe2e 	bl	80001fc <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e050      	b.n	8001650 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015ae:	4b2a      	ldr	r3, [pc, #168]	; (8001658 <HAL_RCC_OscConfig+0x4bc>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1f0      	bne.n	800159c <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a1b      	ldr	r3, [r3, #32]
 80015be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015c2:	d108      	bne.n	80015d6 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015c4:	4b24      	ldr	r3, [pc, #144]	; (8001658 <HAL_RCC_OscConfig+0x4bc>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	4921      	ldr	r1, [pc, #132]	; (8001658 <HAL_RCC_OscConfig+0x4bc>)
 80015d2:	4313      	orrs	r3, r2
 80015d4:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015d6:	4b20      	ldr	r3, [pc, #128]	; (8001658 <HAL_RCC_OscConfig+0x4bc>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6a19      	ldr	r1, [r3, #32]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e6:	430b      	orrs	r3, r1
 80015e8:	491b      	ldr	r1, [pc, #108]	; (8001658 <HAL_RCC_OscConfig+0x4bc>)
 80015ea:	4313      	orrs	r3, r2
 80015ec:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015ee:	4b1c      	ldr	r3, [pc, #112]	; (8001660 <HAL_RCC_OscConfig+0x4c4>)
 80015f0:	2201      	movs	r2, #1
 80015f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f4:	f7fe fe02 	bl	80001fc <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015fc:	f7fe fdfe 	bl	80001fc <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e020      	b.n	8001650 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800160e:	4b12      	ldr	r3, [pc, #72]	; (8001658 <HAL_RCC_OscConfig+0x4bc>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d0f0      	beq.n	80015fc <HAL_RCC_OscConfig+0x460>
 800161a:	e018      	b.n	800164e <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800161c:	4b10      	ldr	r3, [pc, #64]	; (8001660 <HAL_RCC_OscConfig+0x4c4>)
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001622:	f7fe fdeb 	bl	80001fc <HAL_GetTick>
 8001626:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001628:	e008      	b.n	800163c <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800162a:	f7fe fde7 	bl	80001fc <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d901      	bls.n	800163c <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e009      	b.n	8001650 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800163c:	4b06      	ldr	r3, [pc, #24]	; (8001658 <HAL_RCC_OscConfig+0x4bc>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d1f0      	bne.n	800162a <HAL_RCC_OscConfig+0x48e>
 8001648:	e001      	b.n	800164e <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e000      	b.n	8001650 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 800164e:	2300      	movs	r3, #0
}
 8001650:	4618      	mov	r0, r3
 8001652:	3718      	adds	r7, #24
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40021000 	.word	0x40021000
 800165c:	40007000 	.word	0x40007000
 8001660:	42420060 	.word	0x42420060

08001664 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800166e:	2300      	movs	r3, #0
 8001670:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001672:	4b7e      	ldr	r3, [pc, #504]	; (800186c <HAL_RCC_ClockConfig+0x208>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	683a      	ldr	r2, [r7, #0]
 800167c:	429a      	cmp	r2, r3
 800167e:	d910      	bls.n	80016a2 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001680:	4b7a      	ldr	r3, [pc, #488]	; (800186c <HAL_RCC_ClockConfig+0x208>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f023 0207 	bic.w	r2, r3, #7
 8001688:	4978      	ldr	r1, [pc, #480]	; (800186c <HAL_RCC_ClockConfig+0x208>)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	4313      	orrs	r3, r2
 800168e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001690:	4b76      	ldr	r3, [pc, #472]	; (800186c <HAL_RCC_ClockConfig+0x208>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0307 	and.w	r3, r3, #7
 8001698:	683a      	ldr	r2, [r7, #0]
 800169a:	429a      	cmp	r2, r3
 800169c:	d001      	beq.n	80016a2 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e0e0      	b.n	8001864 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d020      	beq.n	80016f0 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0304 	and.w	r3, r3, #4
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d005      	beq.n	80016c6 <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016ba:	4b6d      	ldr	r3, [pc, #436]	; (8001870 <HAL_RCC_ClockConfig+0x20c>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	4a6c      	ldr	r2, [pc, #432]	; (8001870 <HAL_RCC_ClockConfig+0x20c>)
 80016c0:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80016c4:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0308 	and.w	r3, r3, #8
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d005      	beq.n	80016de <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016d2:	4b67      	ldr	r3, [pc, #412]	; (8001870 <HAL_RCC_ClockConfig+0x20c>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	4a66      	ldr	r2, [pc, #408]	; (8001870 <HAL_RCC_ClockConfig+0x20c>)
 80016d8:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80016dc:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016de:	4b64      	ldr	r3, [pc, #400]	; (8001870 <HAL_RCC_ClockConfig+0x20c>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	4961      	ldr	r1, [pc, #388]	; (8001870 <HAL_RCC_ClockConfig+0x20c>)
 80016ec:	4313      	orrs	r3, r2
 80016ee:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0301 	and.w	r3, r3, #1
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d06a      	beq.n	80017d2 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d107      	bne.n	8001714 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001704:	4b5a      	ldr	r3, [pc, #360]	; (8001870 <HAL_RCC_ClockConfig+0x20c>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d115      	bne.n	800173c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e0a7      	b.n	8001864 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	2b02      	cmp	r3, #2
 800171a:	d107      	bne.n	800172c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800171c:	4b54      	ldr	r3, [pc, #336]	; (8001870 <HAL_RCC_ClockConfig+0x20c>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d109      	bne.n	800173c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e09b      	b.n	8001864 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800172c:	4b50      	ldr	r3, [pc, #320]	; (8001870 <HAL_RCC_ClockConfig+0x20c>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d101      	bne.n	800173c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e093      	b.n	8001864 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800173c:	4b4c      	ldr	r3, [pc, #304]	; (8001870 <HAL_RCC_ClockConfig+0x20c>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f023 0203 	bic.w	r2, r3, #3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	4949      	ldr	r1, [pc, #292]	; (8001870 <HAL_RCC_ClockConfig+0x20c>)
 800174a:	4313      	orrs	r3, r2
 800174c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800174e:	f7fe fd55 	bl	80001fc <HAL_GetTick>
 8001752:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d112      	bne.n	8001782 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800175c:	e00a      	b.n	8001774 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800175e:	f7fe fd4d 	bl	80001fc <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	f241 3288 	movw	r2, #5000	; 0x1388
 800176c:	4293      	cmp	r3, r2
 800176e:	d901      	bls.n	8001774 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e077      	b.n	8001864 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001774:	4b3e      	ldr	r3, [pc, #248]	; (8001870 <HAL_RCC_ClockConfig+0x20c>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f003 030c 	and.w	r3, r3, #12
 800177c:	2b04      	cmp	r3, #4
 800177e:	d1ee      	bne.n	800175e <HAL_RCC_ClockConfig+0xfa>
 8001780:	e027      	b.n	80017d2 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	2b02      	cmp	r3, #2
 8001788:	d11d      	bne.n	80017c6 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800178a:	e00a      	b.n	80017a2 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800178c:	f7fe fd36 	bl	80001fc <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	f241 3288 	movw	r2, #5000	; 0x1388
 800179a:	4293      	cmp	r3, r2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e060      	b.n	8001864 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017a2:	4b33      	ldr	r3, [pc, #204]	; (8001870 <HAL_RCC_ClockConfig+0x20c>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f003 030c 	and.w	r3, r3, #12
 80017aa:	2b08      	cmp	r3, #8
 80017ac:	d1ee      	bne.n	800178c <HAL_RCC_ClockConfig+0x128>
 80017ae:	e010      	b.n	80017d2 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017b0:	f7fe fd24 	bl	80001fc <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80017be:	4293      	cmp	r3, r2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e04e      	b.n	8001864 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80017c6:	4b2a      	ldr	r3, [pc, #168]	; (8001870 <HAL_RCC_ClockConfig+0x20c>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f003 030c 	and.w	r3, r3, #12
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1ee      	bne.n	80017b0 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80017d2:	4b26      	ldr	r3, [pc, #152]	; (800186c <HAL_RCC_ClockConfig+0x208>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	683a      	ldr	r2, [r7, #0]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d210      	bcs.n	8001802 <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017e0:	4b22      	ldr	r3, [pc, #136]	; (800186c <HAL_RCC_ClockConfig+0x208>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f023 0207 	bic.w	r2, r3, #7
 80017e8:	4920      	ldr	r1, [pc, #128]	; (800186c <HAL_RCC_ClockConfig+0x208>)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80017f0:	4b1e      	ldr	r3, [pc, #120]	; (800186c <HAL_RCC_ClockConfig+0x208>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0307 	and.w	r3, r3, #7
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d001      	beq.n	8001802 <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e030      	b.n	8001864 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0304 	and.w	r3, r3, #4
 800180a:	2b00      	cmp	r3, #0
 800180c:	d008      	beq.n	8001820 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800180e:	4b18      	ldr	r3, [pc, #96]	; (8001870 <HAL_RCC_ClockConfig+0x20c>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	4915      	ldr	r1, [pc, #84]	; (8001870 <HAL_RCC_ClockConfig+0x20c>)
 800181c:	4313      	orrs	r3, r2
 800181e:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0308 	and.w	r3, r3, #8
 8001828:	2b00      	cmp	r3, #0
 800182a:	d009      	beq.n	8001840 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800182c:	4b10      	ldr	r3, [pc, #64]	; (8001870 <HAL_RCC_ClockConfig+0x20c>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	691b      	ldr	r3, [r3, #16]
 8001838:	00db      	lsls	r3, r3, #3
 800183a:	490d      	ldr	r1, [pc, #52]	; (8001870 <HAL_RCC_ClockConfig+0x20c>)
 800183c:	4313      	orrs	r3, r2
 800183e:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001840:	f000 f81c 	bl	800187c <HAL_RCC_GetSysClockFreq>
 8001844:	4601      	mov	r1, r0
 8001846:	4b0a      	ldr	r3, [pc, #40]	; (8001870 <HAL_RCC_ClockConfig+0x20c>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	091b      	lsrs	r3, r3, #4
 800184c:	f003 030f 	and.w	r3, r3, #15
 8001850:	4a08      	ldr	r2, [pc, #32]	; (8001874 <HAL_RCC_ClockConfig+0x210>)
 8001852:	5cd3      	ldrb	r3, [r2, r3]
 8001854:	fa21 f303 	lsr.w	r3, r1, r3
 8001858:	4a07      	ldr	r2, [pc, #28]	; (8001878 <HAL_RCC_ClockConfig+0x214>)
 800185a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800185c:	2000      	movs	r0, #0
 800185e:	f7fe fc8b 	bl	8000178 <HAL_InitTick>
  
  return HAL_OK;
 8001862:	2300      	movs	r3, #0
}
 8001864:	4618      	mov	r0, r3
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40022000 	.word	0x40022000
 8001870:	40021000 	.word	0x40021000
 8001874:	08003bac 	.word	0x08003bac
 8001878:	20000014 	.word	0x20000014

0800187c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800187c:	b490      	push	{r4, r7}
 800187e:	b08a      	sub	sp, #40	; 0x28
 8001880:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001882:	4b2a      	ldr	r3, [pc, #168]	; (800192c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001884:	1d3c      	adds	r4, r7, #4
 8001886:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001888:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800188c:	4b28      	ldr	r3, [pc, #160]	; (8001930 <HAL_RCC_GetSysClockFreq+0xb4>)
 800188e:	881b      	ldrh	r3, [r3, #0]
 8001890:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001892:	2300      	movs	r3, #0
 8001894:	61fb      	str	r3, [r7, #28]
 8001896:	2300      	movs	r3, #0
 8001898:	61bb      	str	r3, [r7, #24]
 800189a:	2300      	movs	r3, #0
 800189c:	627b      	str	r3, [r7, #36]	; 0x24
 800189e:	2300      	movs	r3, #0
 80018a0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80018a2:	2300      	movs	r3, #0
 80018a4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80018a6:	4b23      	ldr	r3, [pc, #140]	; (8001934 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	f003 030c 	and.w	r3, r3, #12
 80018b2:	2b04      	cmp	r3, #4
 80018b4:	d002      	beq.n	80018bc <HAL_RCC_GetSysClockFreq+0x40>
 80018b6:	2b08      	cmp	r3, #8
 80018b8:	d003      	beq.n	80018c2 <HAL_RCC_GetSysClockFreq+0x46>
 80018ba:	e02d      	b.n	8001918 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018bc:	4b1e      	ldr	r3, [pc, #120]	; (8001938 <HAL_RCC_GetSysClockFreq+0xbc>)
 80018be:	623b      	str	r3, [r7, #32]
      break;
 80018c0:	e02d      	b.n	800191e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	0c9b      	lsrs	r3, r3, #18
 80018c6:	f003 030f 	and.w	r3, r3, #15
 80018ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80018ce:	4413      	add	r3, r2
 80018d0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80018d4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d013      	beq.n	8001908 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80018e0:	4b14      	ldr	r3, [pc, #80]	; (8001934 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	0c5b      	lsrs	r3, r3, #17
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80018ee:	4413      	add	r3, r2
 80018f0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80018f4:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	4a0f      	ldr	r2, [pc, #60]	; (8001938 <HAL_RCC_GetSysClockFreq+0xbc>)
 80018fa:	fb02 f203 	mul.w	r2, r2, r3
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	fbb2 f3f3 	udiv	r3, r2, r3
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
 8001906:	e004      	b.n	8001912 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	4a0c      	ldr	r2, [pc, #48]	; (800193c <HAL_RCC_GetSysClockFreq+0xc0>)
 800190c:	fb02 f303 	mul.w	r3, r2, r3
 8001910:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001914:	623b      	str	r3, [r7, #32]
      break;
 8001916:	e002      	b.n	800191e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001918:	4b07      	ldr	r3, [pc, #28]	; (8001938 <HAL_RCC_GetSysClockFreq+0xbc>)
 800191a:	623b      	str	r3, [r7, #32]
      break;
 800191c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800191e:	6a3b      	ldr	r3, [r7, #32]
}
 8001920:	4618      	mov	r0, r3
 8001922:	3728      	adds	r7, #40	; 0x28
 8001924:	46bd      	mov	sp, r7
 8001926:	bc90      	pop	{r4, r7}
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	08003558 	.word	0x08003558
 8001930:	08003568 	.word	0x08003568
 8001934:	40021000 	.word	0x40021000
 8001938:	007a1200 	.word	0x007a1200
 800193c:	003d0900 	.word	0x003d0900

08001940 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001944:	4b02      	ldr	r3, [pc, #8]	; (8001950 <HAL_RCC_GetHCLKFreq+0x10>)
 8001946:	681b      	ldr	r3, [r3, #0]
}
 8001948:	4618      	mov	r0, r3
 800194a:	46bd      	mov	sp, r7
 800194c:	bc80      	pop	{r7}
 800194e:	4770      	bx	lr
 8001950:	20000014 	.word	0x20000014

08001954 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001958:	f7ff fff2 	bl	8001940 <HAL_RCC_GetHCLKFreq>
 800195c:	4601      	mov	r1, r0
 800195e:	4b05      	ldr	r3, [pc, #20]	; (8001974 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	0a1b      	lsrs	r3, r3, #8
 8001964:	f003 0307 	and.w	r3, r3, #7
 8001968:	4a03      	ldr	r2, [pc, #12]	; (8001978 <HAL_RCC_GetPCLK1Freq+0x24>)
 800196a:	5cd3      	ldrb	r3, [r2, r3]
 800196c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001970:	4618      	mov	r0, r3
 8001972:	bd80      	pop	{r7, pc}
 8001974:	40021000 	.word	0x40021000
 8001978:	08003bbc 	.word	0x08003bbc

0800197c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001980:	f7ff ffde 	bl	8001940 <HAL_RCC_GetHCLKFreq>
 8001984:	4601      	mov	r1, r0
 8001986:	4b05      	ldr	r3, [pc, #20]	; (800199c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	0adb      	lsrs	r3, r3, #11
 800198c:	f003 0307 	and.w	r3, r3, #7
 8001990:	4a03      	ldr	r2, [pc, #12]	; (80019a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001992:	5cd3      	ldrb	r3, [r2, r3]
 8001994:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001998:	4618      	mov	r0, r3
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40021000 	.word	0x40021000
 80019a0:	08003bbc 	.word	0x08003bbc

080019a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80019ac:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <RCC_Delay+0x34>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a0a      	ldr	r2, [pc, #40]	; (80019dc <RCC_Delay+0x38>)
 80019b2:	fba2 2303 	umull	r2, r3, r2, r3
 80019b6:	0a5b      	lsrs	r3, r3, #9
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	fb02 f303 	mul.w	r3, r2, r3
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	1e5a      	subs	r2, r3, #1
 80019c6:	60fa      	str	r2, [r7, #12]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d1f9      	bne.n	80019c0 <RCC_Delay+0x1c>
}
 80019cc:	bf00      	nop
 80019ce:	3714      	adds	r7, #20
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bc80      	pop	{r7}
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	20000014 	.word	0x20000014
 80019dc:	10624dd3 	.word	0x10624dd3

080019e0 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e03f      	b.n	8001a72 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d106      	bne.n	8001a0c <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f000 fff6 	bl	80029f8 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2224      	movs	r2, #36	; 0x24
 8001a10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	68da      	ldr	r2, [r3, #12]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a22:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f000 f9b1 	bl	8001d8c <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	691a      	ldr	r2, [r3, #16]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	695a      	ldr	r2, [r3, #20]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a48:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	68da      	ldr	r2, [r3, #12]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a58:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2220      	movs	r2, #32
 8001a64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2220      	movs	r2, #32
 8001a6c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b088      	sub	sp, #32
 8001a7e:	af02      	add	r7, sp, #8
 8001a80:	60f8      	str	r0, [r7, #12]
 8001a82:	60b9      	str	r1, [r7, #8]
 8001a84:	603b      	str	r3, [r7, #0]
 8001a86:	4613      	mov	r3, r2
 8001a88:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b20      	cmp	r3, #32
 8001a98:	f040 8083 	bne.w	8001ba2 <HAL_UART_Transmit+0x128>
  {
    if((pData == NULL) || (Size == 0U))
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d002      	beq.n	8001aa8 <HAL_UART_Transmit+0x2e>
 8001aa2:	88fb      	ldrh	r3, [r7, #6]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d101      	bne.n	8001aac <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e07b      	b.n	8001ba4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d101      	bne.n	8001aba <HAL_UART_Transmit+0x40>
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	e074      	b.n	8001ba4 <HAL_UART_Transmit+0x12a>
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2201      	movs	r2, #1
 8001abe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2221      	movs	r2, #33	; 0x21
 8001acc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001ad0:	f7fe fb94 	bl	80001fc <HAL_GetTick>
 8001ad4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	88fa      	ldrh	r2, [r7, #6]
 8001ada:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	88fa      	ldrh	r2, [r7, #6]
 8001ae0:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8001ae2:	e042      	b.n	8001b6a <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	3b01      	subs	r3, #1
 8001aec:	b29a      	uxth	r2, r3
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001afa:	d122      	bne.n	8001b42 <HAL_UART_Transmit+0xc8>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	9300      	str	r3, [sp, #0]
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	2200      	movs	r2, #0
 8001b04:	2180      	movs	r1, #128	; 0x80
 8001b06:	68f8      	ldr	r0, [r7, #12]
 8001b08:	f000 f8f6 	bl	8001cf8 <UART_WaitOnFlagUntilTimeout>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e046      	b.n	8001ba4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t*) pData;
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	881b      	ldrh	r3, [r3, #0]
 8001b1e:	461a      	mov	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b28:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	691b      	ldr	r3, [r3, #16]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d103      	bne.n	8001b3a <HAL_UART_Transmit+0xc0>
        {
          pData +=2U;
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	3302      	adds	r3, #2
 8001b36:	60bb      	str	r3, [r7, #8]
 8001b38:	e017      	b.n	8001b6a <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData +=1U;
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	60bb      	str	r3, [r7, #8]
 8001b40:	e013      	b.n	8001b6a <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	2180      	movs	r1, #128	; 0x80
 8001b4c:	68f8      	ldr	r0, [r7, #12]
 8001b4e:	f000 f8d3 	bl	8001cf8 <UART_WaitOnFlagUntilTimeout>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e023      	b.n	8001ba4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	1c5a      	adds	r2, r3, #1
 8001b60:	60ba      	str	r2, [r7, #8]
 8001b62:	781a      	ldrb	r2, [r3, #0]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d1b7      	bne.n	8001ae4 <HAL_UART_Transmit+0x6a>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	9300      	str	r3, [sp, #0]
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	2140      	movs	r1, #64	; 0x40
 8001b7e:	68f8      	ldr	r0, [r7, #12]
 8001b80:	f000 f8ba 	bl	8001cf8 <UART_WaitOnFlagUntilTimeout>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e00a      	b.n	8001ba4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2220      	movs	r2, #32
 8001b92:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	e000      	b.n	8001ba4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001ba2:	2302      	movs	r3, #2
  }
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3718      	adds	r7, #24
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <HAL_UART_Receive>:
  * @param  Size: Amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b088      	sub	sp, #32
 8001bb0:	af02      	add	r7, sp, #8
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	603b      	str	r3, [r7, #0]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	617b      	str	r3, [r7, #20]
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	2b20      	cmp	r3, #32
 8001bca:	f040 8090 	bne.w	8001cee <HAL_UART_Receive+0x142>
  {
    if((pData == NULL) || (Size == 0U))
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d002      	beq.n	8001bda <HAL_UART_Receive+0x2e>
 8001bd4:	88fb      	ldrh	r3, [r7, #6]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e088      	b.n	8001cf0 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d101      	bne.n	8001bec <HAL_UART_Receive+0x40>
 8001be8:	2302      	movs	r3, #2
 8001bea:	e081      	b.n	8001cf0 <HAL_UART_Receive+0x144>
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2222      	movs	r2, #34	; 0x22
 8001bfe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001c02:	f7fe fafb 	bl	80001fc <HAL_GetTick>
 8001c06:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	88fa      	ldrh	r2, [r7, #6]
 8001c0c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	88fa      	ldrh	r2, [r7, #6]
 8001c12:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while(huart->RxXferCount > 0U)
 8001c14:	e05c      	b.n	8001cd0 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	85da      	strh	r2, [r3, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c2c:	d12b      	bne.n	8001c86 <HAL_UART_Receive+0xda>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	9300      	str	r3, [sp, #0]
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	2200      	movs	r2, #0
 8001c36:	2120      	movs	r1, #32
 8001c38:	68f8      	ldr	r0, [r7, #12]
 8001c3a:	f000 f85d 	bl	8001cf8 <UART_WaitOnFlagUntilTimeout>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e053      	b.n	8001cf0 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t*)pData;
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	613b      	str	r3, [r7, #16]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	691b      	ldr	r3, [r3, #16]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d10c      	bne.n	8001c6e <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	801a      	strh	r2, [r3, #0]
          pData +=2U;
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	3302      	adds	r3, #2
 8001c6a:	60bb      	str	r3, [r7, #8]
 8001c6c:	e030      	b.n	8001cd0 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	b29a      	uxth	r2, r3
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	801a      	strh	r2, [r3, #0]
          pData +=1U;
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	3301      	adds	r3, #1
 8001c82:	60bb      	str	r3, [r7, #8]
 8001c84:	e024      	b.n	8001cd0 <HAL_UART_Receive+0x124>
        }

      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	9300      	str	r3, [sp, #0]
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	2120      	movs	r1, #32
 8001c90:	68f8      	ldr	r0, [r7, #12]
 8001c92:	f000 f831 	bl	8001cf8 <UART_WaitOnFlagUntilTimeout>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e027      	b.n	8001cf0 <HAL_UART_Receive+0x144>
        }
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	691b      	ldr	r3, [r3, #16]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d108      	bne.n	8001cba <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6859      	ldr	r1, [r3, #4]
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	1c5a      	adds	r2, r3, #1
 8001cb2:	60ba      	str	r2, [r7, #8]
 8001cb4:	b2ca      	uxtb	r2, r1
 8001cb6:	701a      	strb	r2, [r3, #0]
 8001cb8:	e00a      	b.n	8001cd0 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	b2da      	uxtb	r2, r3
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	1c59      	adds	r1, r3, #1
 8001cc6:	60b9      	str	r1, [r7, #8]
 8001cc8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001ccc:	b2d2      	uxtb	r2, r2
 8001cce:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0U)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d19d      	bne.n	8001c16 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2220      	movs	r2, #32
 8001cde:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001cea:	2300      	movs	r3, #0
 8001cec:	e000      	b.n	8001cf0 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8001cee:	2302      	movs	r3, #2
  }
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3718      	adds	r7, #24
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	603b      	str	r3, [r7, #0]
 8001d04:	4613      	mov	r3, r2
 8001d06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001d08:	e02c      	b.n	8001d64 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d10:	d028      	beq.n	8001d64 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d007      	beq.n	8001d28 <UART_WaitOnFlagUntilTimeout+0x30>
 8001d18:	f7fe fa70 	bl	80001fc <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d21d      	bcs.n	8001d64 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	68da      	ldr	r2, [r3, #12]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001d36:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	695a      	ldr	r2, [r3, #20]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f022 0201 	bic.w	r2, r2, #1
 8001d46:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2220      	movs	r2, #32
 8001d4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2220      	movs	r2, #32
 8001d54:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e00f      	b.n	8001d84 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	68ba      	ldr	r2, [r7, #8]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	bf0c      	ite	eq
 8001d74:	2301      	moveq	r3, #1
 8001d76:	2300      	movne	r3, #0
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	79fb      	ldrb	r3, [r7, #7]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d0c3      	beq.n	8001d0a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8001d82:	2300      	movs	r3, #0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3710      	adds	r7, #16
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d8c:	b5b0      	push	{r4, r5, r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8001d94:	2300      	movs	r3, #0
 8001d96:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	68da      	ldr	r2, [r3, #12]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	430a      	orrs	r2, r1
 8001dac:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	689a      	ldr	r2, [r3, #8]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	431a      	orrs	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	695b      	ldr	r3, [r3, #20]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001dce:	f023 030c 	bic.w	r3, r3, #12
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	6812      	ldr	r2, [r2, #0]
 8001dd6:	68f9      	ldr	r1, [r7, #12]
 8001dd8:	430b      	orrs	r3, r1
 8001dda:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	695b      	ldr	r3, [r3, #20]
 8001de2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	699a      	ldr	r2, [r3, #24]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	430a      	orrs	r2, r1
 8001df0:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a6f      	ldr	r2, [pc, #444]	; (8001fb4 <UART_SetConfig+0x228>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d16b      	bne.n	8001ed4 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001dfc:	f7ff fdbe 	bl	800197c <HAL_RCC_GetPCLK2Freq>
 8001e00:	4602      	mov	r2, r0
 8001e02:	4613      	mov	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4413      	add	r3, r2
 8001e08:	009a      	lsls	r2, r3, #2
 8001e0a:	441a      	add	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e16:	4a68      	ldr	r2, [pc, #416]	; (8001fb8 <UART_SetConfig+0x22c>)
 8001e18:	fba2 2303 	umull	r2, r3, r2, r3
 8001e1c:	095b      	lsrs	r3, r3, #5
 8001e1e:	011c      	lsls	r4, r3, #4
 8001e20:	f7ff fdac 	bl	800197c <HAL_RCC_GetPCLK2Freq>
 8001e24:	4602      	mov	r2, r0
 8001e26:	4613      	mov	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	4413      	add	r3, r2
 8001e2c:	009a      	lsls	r2, r3, #2
 8001e2e:	441a      	add	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	fbb2 f5f3 	udiv	r5, r2, r3
 8001e3a:	f7ff fd9f 	bl	800197c <HAL_RCC_GetPCLK2Freq>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	4613      	mov	r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	4413      	add	r3, r2
 8001e46:	009a      	lsls	r2, r3, #2
 8001e48:	441a      	add	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e54:	4a58      	ldr	r2, [pc, #352]	; (8001fb8 <UART_SetConfig+0x22c>)
 8001e56:	fba2 2303 	umull	r2, r3, r2, r3
 8001e5a:	095b      	lsrs	r3, r3, #5
 8001e5c:	2264      	movs	r2, #100	; 0x64
 8001e5e:	fb02 f303 	mul.w	r3, r2, r3
 8001e62:	1aeb      	subs	r3, r5, r3
 8001e64:	011b      	lsls	r3, r3, #4
 8001e66:	3332      	adds	r3, #50	; 0x32
 8001e68:	4a53      	ldr	r2, [pc, #332]	; (8001fb8 <UART_SetConfig+0x22c>)
 8001e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e6e:	095b      	lsrs	r3, r3, #5
 8001e70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e74:	441c      	add	r4, r3
 8001e76:	f7ff fd81 	bl	800197c <HAL_RCC_GetPCLK2Freq>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	4413      	add	r3, r2
 8001e82:	009a      	lsls	r2, r3, #2
 8001e84:	441a      	add	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	fbb2 f5f3 	udiv	r5, r2, r3
 8001e90:	f7ff fd74 	bl	800197c <HAL_RCC_GetPCLK2Freq>
 8001e94:	4602      	mov	r2, r0
 8001e96:	4613      	mov	r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	4413      	add	r3, r2
 8001e9c:	009a      	lsls	r2, r3, #2
 8001e9e:	441a      	add	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eaa:	4a43      	ldr	r2, [pc, #268]	; (8001fb8 <UART_SetConfig+0x22c>)
 8001eac:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb0:	095b      	lsrs	r3, r3, #5
 8001eb2:	2264      	movs	r2, #100	; 0x64
 8001eb4:	fb02 f303 	mul.w	r3, r2, r3
 8001eb8:	1aeb      	subs	r3, r5, r3
 8001eba:	011b      	lsls	r3, r3, #4
 8001ebc:	3332      	adds	r3, #50	; 0x32
 8001ebe:	4a3e      	ldr	r2, [pc, #248]	; (8001fb8 <UART_SetConfig+0x22c>)
 8001ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec4:	095b      	lsrs	r3, r3, #5
 8001ec6:	f003 020f 	and.w	r2, r3, #15
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4422      	add	r2, r4
 8001ed0:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8001ed2:	e06a      	b.n	8001faa <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001ed4:	f7ff fd3e 	bl	8001954 <HAL_RCC_GetPCLK1Freq>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	4613      	mov	r3, r2
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	4413      	add	r3, r2
 8001ee0:	009a      	lsls	r2, r3, #2
 8001ee2:	441a      	add	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eee:	4a32      	ldr	r2, [pc, #200]	; (8001fb8 <UART_SetConfig+0x22c>)
 8001ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef4:	095b      	lsrs	r3, r3, #5
 8001ef6:	011c      	lsls	r4, r3, #4
 8001ef8:	f7ff fd2c 	bl	8001954 <HAL_RCC_GetPCLK1Freq>
 8001efc:	4602      	mov	r2, r0
 8001efe:	4613      	mov	r3, r2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	4413      	add	r3, r2
 8001f04:	009a      	lsls	r2, r3, #2
 8001f06:	441a      	add	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	fbb2 f5f3 	udiv	r5, r2, r3
 8001f12:	f7ff fd1f 	bl	8001954 <HAL_RCC_GetPCLK1Freq>
 8001f16:	4602      	mov	r2, r0
 8001f18:	4613      	mov	r3, r2
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	4413      	add	r3, r2
 8001f1e:	009a      	lsls	r2, r3, #2
 8001f20:	441a      	add	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f2c:	4a22      	ldr	r2, [pc, #136]	; (8001fb8 <UART_SetConfig+0x22c>)
 8001f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f32:	095b      	lsrs	r3, r3, #5
 8001f34:	2264      	movs	r2, #100	; 0x64
 8001f36:	fb02 f303 	mul.w	r3, r2, r3
 8001f3a:	1aeb      	subs	r3, r5, r3
 8001f3c:	011b      	lsls	r3, r3, #4
 8001f3e:	3332      	adds	r3, #50	; 0x32
 8001f40:	4a1d      	ldr	r2, [pc, #116]	; (8001fb8 <UART_SetConfig+0x22c>)
 8001f42:	fba2 2303 	umull	r2, r3, r2, r3
 8001f46:	095b      	lsrs	r3, r3, #5
 8001f48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f4c:	441c      	add	r4, r3
 8001f4e:	f7ff fd01 	bl	8001954 <HAL_RCC_GetPCLK1Freq>
 8001f52:	4602      	mov	r2, r0
 8001f54:	4613      	mov	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	4413      	add	r3, r2
 8001f5a:	009a      	lsls	r2, r3, #2
 8001f5c:	441a      	add	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	fbb2 f5f3 	udiv	r5, r2, r3
 8001f68:	f7ff fcf4 	bl	8001954 <HAL_RCC_GetPCLK1Freq>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	4613      	mov	r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	4413      	add	r3, r2
 8001f74:	009a      	lsls	r2, r3, #2
 8001f76:	441a      	add	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f82:	4a0d      	ldr	r2, [pc, #52]	; (8001fb8 <UART_SetConfig+0x22c>)
 8001f84:	fba2 2303 	umull	r2, r3, r2, r3
 8001f88:	095b      	lsrs	r3, r3, #5
 8001f8a:	2264      	movs	r2, #100	; 0x64
 8001f8c:	fb02 f303 	mul.w	r3, r2, r3
 8001f90:	1aeb      	subs	r3, r5, r3
 8001f92:	011b      	lsls	r3, r3, #4
 8001f94:	3332      	adds	r3, #50	; 0x32
 8001f96:	4a08      	ldr	r2, [pc, #32]	; (8001fb8 <UART_SetConfig+0x22c>)
 8001f98:	fba2 2303 	umull	r2, r3, r2, r3
 8001f9c:	095b      	lsrs	r3, r3, #5
 8001f9e:	f003 020f 	and.w	r2, r3, #15
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4422      	add	r2, r4
 8001fa8:	609a      	str	r2, [r3, #8]
}
 8001faa:	bf00      	nop
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bdb0      	pop	{r4, r5, r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	40013800 	.word	0x40013800
 8001fb8:	51eb851f 	.word	0x51eb851f

08001fbc <Int2Str>:
  * @param  p_str: The string output pointer
  * @param  intnum: The integer to be converted
  * @retval None
  */
void Int2Str(uint8_t *p_str, uint32_t intnum)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b087      	sub	sp, #28
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  uint32_t i, divider = 1000000000, pos = 0, status = 0;
 8001fc6:	4b25      	ldr	r3, [pc, #148]	; (800205c <Int2Str+0xa0>)
 8001fc8:	613b      	str	r3, [r7, #16]
 8001fca:	2300      	movs	r3, #0
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60bb      	str	r3, [r7, #8]

  for (i = 0; i < 10; i++)
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	617b      	str	r3, [r7, #20]
 8001fd6:	e038      	b.n	800204a <Int2Str+0x8e>
  {
    p_str[pos++] = (intnum / divider) + 48;
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	1c59      	adds	r1, r3, #1
 8001fe6:	60f9      	str	r1, [r7, #12]
 8001fe8:	6879      	ldr	r1, [r7, #4]
 8001fea:	440b      	add	r3, r1
 8001fec:	3230      	adds	r2, #48	; 0x30
 8001fee:	b2d2      	uxtb	r2, r2
 8001ff0:	701a      	strb	r2, [r3, #0]

    intnum = intnum % divider;
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	fbb3 f2f2 	udiv	r2, r3, r2
 8001ffa:	6939      	ldr	r1, [r7, #16]
 8001ffc:	fb01 f202 	mul.w	r2, r1, r2
 8002000:	1a9b      	subs	r3, r3, r2
 8002002:	603b      	str	r3, [r7, #0]
    divider /= 10;
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	4a16      	ldr	r2, [pc, #88]	; (8002060 <Int2Str+0xa4>)
 8002008:	fba2 2303 	umull	r2, r3, r2, r3
 800200c:	08db      	lsrs	r3, r3, #3
 800200e:	613b      	str	r3, [r7, #16]
    if ((p_str[pos-1] == '0') & (status == 0))
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	3b01      	subs	r3, #1
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	4413      	add	r3, r2
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	2b30      	cmp	r3, #48	; 0x30
 800201c:	bf0c      	ite	eq
 800201e:	2301      	moveq	r3, #1
 8002020:	2300      	movne	r3, #0
 8002022:	b2da      	uxtb	r2, r3
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	2b00      	cmp	r3, #0
 8002028:	bf0c      	ite	eq
 800202a:	2301      	moveq	r3, #1
 800202c:	2300      	movne	r3, #0
 800202e:	b2db      	uxtb	r3, r3
 8002030:	4013      	ands	r3, r2
 8002032:	b2db      	uxtb	r3, r3
 8002034:	2b00      	cmp	r3, #0
 8002036:	d002      	beq.n	800203e <Int2Str+0x82>
    {
      pos = 0;
 8002038:	2300      	movs	r3, #0
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	e002      	b.n	8002044 <Int2Str+0x88>
    }
    else
    {
      status++;
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	3301      	adds	r3, #1
 8002042:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < 10; i++)
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	3301      	adds	r3, #1
 8002048:	617b      	str	r3, [r7, #20]
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	2b09      	cmp	r3, #9
 800204e:	d9c3      	bls.n	8001fd8 <Int2Str+0x1c>
    }
  }
}
 8002050:	bf00      	nop
 8002052:	371c      	adds	r7, #28
 8002054:	46bd      	mov	sp, r7
 8002056:	bc80      	pop	{r7}
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	3b9aca00 	.word	0x3b9aca00
 8002060:	cccccccd 	.word	0xcccccccd

08002064 <Str2Int>:
  * @param  p_intnum: The integer value
  * @retval 1: Correct
  *         0: Error
  */
uint32_t Str2Int(uint8_t *p_inputstr, uint32_t *p_intnum)
{
 8002064:	b480      	push	{r7}
 8002066:	b087      	sub	sp, #28
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0, res = 0;
 800206e:	2300      	movs	r3, #0
 8002070:	617b      	str	r3, [r7, #20]
 8002072:	2300      	movs	r3, #0
 8002074:	613b      	str	r3, [r7, #16]
  uint32_t val = 0;
 8002076:	2300      	movs	r3, #0
 8002078:	60fb      	str	r3, [r7, #12]

  if ((p_inputstr[0] == '0') && ((p_inputstr[1] == 'x') || (p_inputstr[1] == 'X')))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	2b30      	cmp	r3, #48	; 0x30
 8002080:	f040 80d7 	bne.w	8002232 <Str2Int+0x1ce>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	3301      	adds	r3, #1
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	2b78      	cmp	r3, #120	; 0x78
 800208c:	d005      	beq.n	800209a <Str2Int+0x36>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	3301      	adds	r3, #1
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	2b58      	cmp	r3, #88	; 0x58
 8002096:	f040 80cc 	bne.w	8002232 <Str2Int+0x1ce>
  {
    i = 2;
 800209a:	2302      	movs	r3, #2
 800209c:	617b      	str	r3, [r7, #20]
    while ( ( i < 11 ) && ( p_inputstr[i] != '\0' ) )
 800209e:	e057      	b.n	8002150 <Str2Int+0xec>
    {
      if (ISVALIDHEX(p_inputstr[i]))
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	4413      	add	r3, r2
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2b40      	cmp	r3, #64	; 0x40
 80020aa:	d905      	bls.n	80020b8 <Str2Int+0x54>
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	4413      	add	r3, r2
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	2b46      	cmp	r3, #70	; 0x46
 80020b6:	d917      	bls.n	80020e8 <Str2Int+0x84>
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	4413      	add	r3, r2
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	2b60      	cmp	r3, #96	; 0x60
 80020c2:	d905      	bls.n	80020d0 <Str2Int+0x6c>
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	4413      	add	r3, r2
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	2b66      	cmp	r3, #102	; 0x66
 80020ce:	d90b      	bls.n	80020e8 <Str2Int+0x84>
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	4413      	add	r3, r2
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	2b2f      	cmp	r3, #47	; 0x2f
 80020da:	d936      	bls.n	800214a <Str2Int+0xe6>
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	4413      	add	r3, r2
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	2b39      	cmp	r3, #57	; 0x39
 80020e6:	d830      	bhi.n	800214a <Str2Int+0xe6>
      {
        val = (val << 4) + CONVERTHEX(p_inputstr[i]);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	011b      	lsls	r3, r3, #4
 80020ec:	6879      	ldr	r1, [r7, #4]
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	440a      	add	r2, r1
 80020f2:	7812      	ldrb	r2, [r2, #0]
 80020f4:	2a2f      	cmp	r2, #47	; 0x2f
 80020f6:	d90b      	bls.n	8002110 <Str2Int+0xac>
 80020f8:	6879      	ldr	r1, [r7, #4]
 80020fa:	697a      	ldr	r2, [r7, #20]
 80020fc:	440a      	add	r2, r1
 80020fe:	7812      	ldrb	r2, [r2, #0]
 8002100:	2a39      	cmp	r2, #57	; 0x39
 8002102:	d805      	bhi.n	8002110 <Str2Int+0xac>
 8002104:	6879      	ldr	r1, [r7, #4]
 8002106:	697a      	ldr	r2, [r7, #20]
 8002108:	440a      	add	r2, r1
 800210a:	7812      	ldrb	r2, [r2, #0]
 800210c:	3a30      	subs	r2, #48	; 0x30
 800210e:	e016      	b.n	800213e <Str2Int+0xda>
 8002110:	6879      	ldr	r1, [r7, #4]
 8002112:	697a      	ldr	r2, [r7, #20]
 8002114:	440a      	add	r2, r1
 8002116:	7812      	ldrb	r2, [r2, #0]
 8002118:	2a40      	cmp	r2, #64	; 0x40
 800211a:	d90b      	bls.n	8002134 <Str2Int+0xd0>
 800211c:	6879      	ldr	r1, [r7, #4]
 800211e:	697a      	ldr	r2, [r7, #20]
 8002120:	440a      	add	r2, r1
 8002122:	7812      	ldrb	r2, [r2, #0]
 8002124:	2a46      	cmp	r2, #70	; 0x46
 8002126:	d805      	bhi.n	8002134 <Str2Int+0xd0>
 8002128:	6879      	ldr	r1, [r7, #4]
 800212a:	697a      	ldr	r2, [r7, #20]
 800212c:	440a      	add	r2, r1
 800212e:	7812      	ldrb	r2, [r2, #0]
 8002130:	3a37      	subs	r2, #55	; 0x37
 8002132:	e004      	b.n	800213e <Str2Int+0xda>
 8002134:	6879      	ldr	r1, [r7, #4]
 8002136:	697a      	ldr	r2, [r7, #20]
 8002138:	440a      	add	r2, r1
 800213a:	7812      	ldrb	r2, [r2, #0]
 800213c:	3a57      	subs	r2, #87	; 0x57
 800213e:	4413      	add	r3, r2
 8002140:	60fb      	str	r3, [r7, #12]
      {
        /* Return 0, Invalid input */
        res = 0;
        break;
      }
      i++;
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	3301      	adds	r3, #1
 8002146:	617b      	str	r3, [r7, #20]
 8002148:	e002      	b.n	8002150 <Str2Int+0xec>
        res = 0;
 800214a:	2300      	movs	r3, #0
 800214c:	613b      	str	r3, [r7, #16]
        break;
 800214e:	e008      	b.n	8002162 <Str2Int+0xfe>
    while ( ( i < 11 ) && ( p_inputstr[i] != '\0' ) )
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	2b0a      	cmp	r3, #10
 8002154:	d805      	bhi.n	8002162 <Str2Int+0xfe>
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	4413      	add	r3, r2
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d19e      	bne.n	80020a0 <Str2Int+0x3c>
    }

    /* valid result */
    if (p_inputstr[i] == '\0')
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	4413      	add	r3, r2
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d167      	bne.n	800223e <Str2Int+0x1da>
    {
      *p_intnum = val;
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	601a      	str	r2, [r3, #0]
      res = 1;
 8002174:	2301      	movs	r3, #1
 8002176:	613b      	str	r3, [r7, #16]
    if (p_inputstr[i] == '\0')
 8002178:	e061      	b.n	800223e <Str2Int+0x1da>
  }
  else /* max 10-digit decimal input */
  {
    while ( ( i < 11 ) && ( res != 1 ) )
    {
      if (p_inputstr[i] == '\0')
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	4413      	add	r3, r2
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d105      	bne.n	8002192 <Str2Int+0x12e>
      {
        *p_intnum = val;
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	68fa      	ldr	r2, [r7, #12]
 800218a:	601a      	str	r2, [r3, #0]
        /* return 1 */
        res = 1;
 800218c:	2301      	movs	r3, #1
 800218e:	613b      	str	r3, [r7, #16]
 8002190:	e04c      	b.n	800222c <Str2Int+0x1c8>
      }
      else if (((p_inputstr[i] == 'k') || (p_inputstr[i] == 'K')) && (i > 0))
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	4413      	add	r3, r2
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	2b6b      	cmp	r3, #107	; 0x6b
 800219c:	d005      	beq.n	80021aa <Str2Int+0x146>
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	4413      	add	r3, r2
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	2b4b      	cmp	r3, #75	; 0x4b
 80021a8:	d10b      	bne.n	80021c2 <Str2Int+0x15e>
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d008      	beq.n	80021c2 <Str2Int+0x15e>
      {
        val = val << 10;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	029b      	lsls	r3, r3, #10
 80021b4:	60fb      	str	r3, [r7, #12]
        *p_intnum = val;
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	68fa      	ldr	r2, [r7, #12]
 80021ba:	601a      	str	r2, [r3, #0]
        res = 1;
 80021bc:	2301      	movs	r3, #1
 80021be:	613b      	str	r3, [r7, #16]
 80021c0:	e034      	b.n	800222c <Str2Int+0x1c8>
      }
      else if (((p_inputstr[i] == 'm') || (p_inputstr[i] == 'M')) && (i > 0))
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	4413      	add	r3, r2
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	2b6d      	cmp	r3, #109	; 0x6d
 80021cc:	d005      	beq.n	80021da <Str2Int+0x176>
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	4413      	add	r3, r2
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	2b4d      	cmp	r3, #77	; 0x4d
 80021d8:	d10b      	bne.n	80021f2 <Str2Int+0x18e>
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d008      	beq.n	80021f2 <Str2Int+0x18e>
      {
        val = val << 20;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	051b      	lsls	r3, r3, #20
 80021e4:	60fb      	str	r3, [r7, #12]
        *p_intnum = val;
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	601a      	str	r2, [r3, #0]
        res = 1;
 80021ec:	2301      	movs	r3, #1
 80021ee:	613b      	str	r3, [r7, #16]
 80021f0:	e01c      	b.n	800222c <Str2Int+0x1c8>
      }
      else if (ISVALIDDEC(p_inputstr[i]))
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	4413      	add	r3, r2
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	2b2f      	cmp	r3, #47	; 0x2f
 80021fc:	d913      	bls.n	8002226 <Str2Int+0x1c2>
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	4413      	add	r3, r2
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	2b39      	cmp	r3, #57	; 0x39
 8002208:	d80d      	bhi.n	8002226 <Str2Int+0x1c2>
      {
        val = val * 10 + CONVERTDEC(p_inputstr[i]);
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	4613      	mov	r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	4413      	add	r3, r2
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	4619      	mov	r1, r3
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	4413      	add	r3, r2
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	440b      	add	r3, r1
 8002220:	3b30      	subs	r3, #48	; 0x30
 8002222:	60fb      	str	r3, [r7, #12]
 8002224:	e002      	b.n	800222c <Str2Int+0x1c8>
      }
      else
      {
        /* return 0, Invalid input */
        res = 0;
 8002226:	2300      	movs	r3, #0
 8002228:	613b      	str	r3, [r7, #16]
        break;
 800222a:	e008      	b.n	800223e <Str2Int+0x1da>
      }
      i++;
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	3301      	adds	r3, #1
 8002230:	617b      	str	r3, [r7, #20]
    while ( ( i < 11 ) && ( res != 1 ) )
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	2b0a      	cmp	r3, #10
 8002236:	d802      	bhi.n	800223e <Str2Int+0x1da>
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d19d      	bne.n	800217a <Str2Int+0x116>
    }
  }

  return res;
 800223e:	693b      	ldr	r3, [r7, #16]
}
 8002240:	4618      	mov	r0, r3
 8002242:	371c      	adds	r7, #28
 8002244:	46bd      	mov	sp, r7
 8002246:	bc80      	pop	{r7}
 8002248:	4770      	bx	lr
	...

0800224c <Serial_PutString>:
  * @brief  Print a string on the HyperTerminal
  * @param  p_string: The string to be printed
  * @retval None
  */
void Serial_PutString(uint8_t *p_string)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  uint16_t length = 0;
 8002254:	2300      	movs	r3, #0
 8002256:	81fb      	strh	r3, [r7, #14]

  while (p_string[length] != '\0')
 8002258:	e002      	b.n	8002260 <Serial_PutString+0x14>
  {
    length++;
 800225a:	89fb      	ldrh	r3, [r7, #14]
 800225c:	3301      	adds	r3, #1
 800225e:	81fb      	strh	r3, [r7, #14]
  while (p_string[length] != '\0')
 8002260:	89fb      	ldrh	r3, [r7, #14]
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	4413      	add	r3, r2
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1f6      	bne.n	800225a <Serial_PutString+0xe>
  }
  HAL_UART_Transmit(&UartHandle, p_string, length, TX_TIMEOUT);
 800226c:	89fa      	ldrh	r2, [r7, #14]
 800226e:	2364      	movs	r3, #100	; 0x64
 8002270:	6879      	ldr	r1, [r7, #4]
 8002272:	4803      	ldr	r0, [pc, #12]	; (8002280 <Serial_PutString+0x34>)
 8002274:	f7ff fc01 	bl	8001a7a <HAL_UART_Transmit>
}
 8002278:	bf00      	nop
 800227a:	3710      	adds	r7, #16
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	20000060 	.word	0x20000060

08002284 <Serial_PutByte>:
  * @brief  Transmit a byte to the HyperTerminal
  * @param  param The byte to be sent
  * @retval HAL_StatusTypeDef HAL_OK if OK
  */
HAL_StatusTypeDef Serial_PutByte( uint8_t param )
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	4603      	mov	r3, r0
 800228c:	71fb      	strb	r3, [r7, #7]
  /* May be timeouted... */
  if ( UartHandle.gState == HAL_UART_STATE_TIMEOUT )
 800228e:	4b0a      	ldr	r3, [pc, #40]	; (80022b8 <Serial_PutByte+0x34>)
 8002290:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2ba0      	cmp	r3, #160	; 0xa0
 8002298:	d103      	bne.n	80022a2 <Serial_PutByte+0x1e>
  {
    UartHandle.gState = HAL_UART_STATE_READY;
 800229a:	4b07      	ldr	r3, [pc, #28]	; (80022b8 <Serial_PutByte+0x34>)
 800229c:	2220      	movs	r2, #32
 800229e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }
  return HAL_UART_Transmit(&UartHandle, &param, 1, TX_TIMEOUT);
 80022a2:	1df9      	adds	r1, r7, #7
 80022a4:	2364      	movs	r3, #100	; 0x64
 80022a6:	2201      	movs	r2, #1
 80022a8:	4803      	ldr	r0, [pc, #12]	; (80022b8 <Serial_PutByte+0x34>)
 80022aa:	f7ff fbe6 	bl	8001a7a <HAL_UART_Transmit>
 80022ae:	4603      	mov	r3, r0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3708      	adds	r7, #8
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	20000060 	.word	0x20000060

080022bc <FLASH_If_Init>:
  * @brief  Unlocks Flash for write access
  * @param  None
  * @retval None
  */
void FLASH_If_Init(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* Unlock the Program memory */
  HAL_FLASH_Unlock();
 80022c0:	f7fe f936 	bl	8000530 <HAL_FLASH_Unlock>

  /* Clear all FLASH flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPERR);
 80022c4:	4b03      	ldr	r3, [pc, #12]	; (80022d4 <FLASH_If_Init+0x18>)
 80022c6:	2234      	movs	r2, #52	; 0x34
 80022c8:	60da      	str	r2, [r3, #12]
  /* Unlock the Program memory */
  HAL_FLASH_Lock();
 80022ca:	f7fe f957 	bl	800057c <HAL_FLASH_Lock>
}
 80022ce:	bf00      	nop
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40022000 	.word	0x40022000

080022d8 <FLASH_If_Erase>:
  * @param  start: start of user flash area
  * @retval FLASHIF_OK : user flash area successfully erased
  *         FLASHIF_ERASEKO : error occurred
  */
uint32_t FLASH_If_Erase(uint32_t start)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b08a      	sub	sp, #40	; 0x28
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  uint32_t NbrOfPages = 0;
 80022e0:	2300      	movs	r3, #0
 80022e2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t PageError = 0;
 80022e4:	2300      	movs	r3, #0
 80022e6:	61fb      	str	r3, [r7, #28]
  FLASH_EraseInitTypeDef pEraseInit;
  HAL_StatusTypeDef status = HAL_OK;
 80022e8:	2300      	movs	r3, #0
 80022ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Unlock the Flash to enable the flash control register access *************/ 
  HAL_FLASH_Unlock();
 80022ee:	f7fe f91f 	bl	8000530 <HAL_FLASH_Unlock>

  /* Get the sector where start the user flash area */
  NbrOfPages = (USER_FLASH_END_ADDRESS - start)/FLASH_PAGE_SIZE;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f1c3 6300 	rsb	r3, r3, #134217728	; 0x8000000
 80022f8:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 80022fc:	0a9b      	lsrs	r3, r3, #10
 80022fe:	627b      	str	r3, [r7, #36]	; 0x24

  pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8002300:	2300      	movs	r3, #0
 8002302:	60fb      	str	r3, [r7, #12]
  pEraseInit.PageAddress = start;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	617b      	str	r3, [r7, #20]
  pEraseInit.Banks = FLASH_BANK_1;
 8002308:	2301      	movs	r3, #1
 800230a:	613b      	str	r3, [r7, #16]
  pEraseInit.NbPages = NbrOfPages;
 800230c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230e:	61bb      	str	r3, [r7, #24]
  status = HAL_FLASHEx_Erase(&pEraseInit, &PageError);
 8002310:	f107 021c 	add.w	r2, r7, #28
 8002314:	f107 030c 	add.w	r3, r7, #12
 8002318:	4611      	mov	r1, r2
 800231a:	4618      	mov	r0, r3
 800231c:	f7fe fa12 	bl	8000744 <HAL_FLASHEx_Erase>
 8002320:	4603      	mov	r3, r0
 8002322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Lock the Flash to disable the flash control register access (recommended
     to protect the FLASH memory against possible unwanted operation) *********/
  HAL_FLASH_Lock();
 8002326:	f7fe f929 	bl	800057c <HAL_FLASH_Lock>

  if (status != HAL_OK)
 800232a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <FLASH_If_Erase+0x5e>
  {
    /* Error occurred while page erase */
    return FLASHIF_ERASEKO;
 8002332:	2301      	movs	r3, #1
 8002334:	e000      	b.n	8002338 <FLASH_If_Erase+0x60>
  }

  return FLASHIF_OK;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	3728      	adds	r7, #40	; 0x28
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <FLASH_If_Write>:
  * @retval uint32_t 0: Data successfully written to Flash memory
  *         1: Error occurred while writing data in Flash memory
  *         2: Written Data in flash memory is different from expected one
  */
uint32_t FLASH_If_Write(uint32_t destination, uint32_t *p_source, uint32_t length)
{
 8002340:	b590      	push	{r4, r7, lr}
 8002342:	b087      	sub	sp, #28
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	607a      	str	r2, [r7, #4]
  uint32_t i = 0;
 800234c:	2300      	movs	r3, #0
 800234e:	617b      	str	r3, [r7, #20]

  /* Unlock the Flash to enable the flash control register access *************/
  HAL_FLASH_Unlock();
 8002350:	f7fe f8ee 	bl	8000530 <HAL_FLASH_Unlock>

  for (i = 0; (i < length) && (destination <= (USER_FLASH_END_ADDRESS-4)); i++)
 8002354:	2300      	movs	r3, #0
 8002356:	617b      	str	r3, [r7, #20]
 8002358:	e023      	b.n	80023a2 <FLASH_If_Write+0x62>
  {
    /* Device voltage range supposed to be [2.7V to 3.6V], the operation will
       be done by word */ 
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, destination, *(uint32_t*)(p_source+i)) == HAL_OK)      
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	68ba      	ldr	r2, [r7, #8]
 8002360:	4413      	add	r3, r2
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f04f 0400 	mov.w	r4, #0
 8002368:	461a      	mov	r2, r3
 800236a:	4623      	mov	r3, r4
 800236c:	68f9      	ldr	r1, [r7, #12]
 800236e:	2002      	movs	r0, #2
 8002370:	f7fe f86e 	bl	8000450 <HAL_FLASH_Program>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d10e      	bne.n	8002398 <FLASH_If_Write+0x58>
    {
     /* Check the written value */
      if (*(uint32_t*)destination != *(uint32_t*)(p_source+i))
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	68b9      	ldr	r1, [r7, #8]
 8002384:	440b      	add	r3, r1
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	429a      	cmp	r2, r3
 800238a:	d001      	beq.n	8002390 <FLASH_If_Write+0x50>
      {
        /* Flash content doesn't match SRAM content */
        return(FLASHIF_WRITINGCTRL_ERROR);
 800238c:	2302      	movs	r3, #2
 800238e:	e013      	b.n	80023b8 <FLASH_If_Write+0x78>
      }
      /* Increment FLASH destination address */
      destination += 4;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	3304      	adds	r3, #4
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	e001      	b.n	800239c <FLASH_If_Write+0x5c>
    }
    else
    {
      /* Error occurred while writing data in Flash memory */
      return (FLASHIF_WRITING_ERROR);
 8002398:	2303      	movs	r3, #3
 800239a:	e00d      	b.n	80023b8 <FLASH_If_Write+0x78>
  for (i = 0; (i < length) && (destination <= (USER_FLASH_END_ADDRESS-4)); i++)
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	3301      	adds	r3, #1
 80023a0:	617b      	str	r3, [r7, #20]
 80023a2:	697a      	ldr	r2, [r7, #20]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d203      	bcs.n	80023b2 <FLASH_If_Write+0x72>
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	4a04      	ldr	r2, [pc, #16]	; (80023c0 <FLASH_If_Write+0x80>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d9d3      	bls.n	800235a <FLASH_If_Write+0x1a>
    }
  }

  /* Lock the Flash to disable the flash control register access (recommended
     to protect the FLASH memory against possible unwanted operation) *********/
  HAL_FLASH_Lock();
 80023b2:	f7fe f8e3 	bl	800057c <HAL_FLASH_Lock>

  return (FLASHIF_OK);
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	371c      	adds	r7, #28
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd90      	pop	{r4, r7, pc}
 80023c0:	0803fffc 	.word	0x0803fffc

080023c4 <FLASH_If_GetWriteProtectionStatus>:
  * @retval If a sector in application area is write-protected returned value is a combinaison
            of the possible values : FLASHIF_PROTECTION_WRPENABLED, FLASHIF_PROTECTION_PCROPENABLED, ...
  *         If no sector is write-protected FLASHIF_PROTECTION_NONE is returned.
  */
uint32_t FLASH_If_GetWriteProtectionStatus(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b088      	sub	sp, #32
 80023c8:	af00      	add	r7, sp, #0
  uint32_t ProtectedPAGE = FLASHIF_PROTECTION_NONE;
 80023ca:	2300      	movs	r3, #0
 80023cc:	61fb      	str	r3, [r7, #28]
  FLASH_OBProgramInitTypeDef OptionsBytesStruct;

  /* Unlock the Flash to enable the flash control register access *************/
  HAL_FLASH_Unlock();
 80023ce:	f7fe f8af 	bl	8000530 <HAL_FLASH_Unlock>

  /* Check if there are write protected sectors inside the user flash area ****/
  HAL_FLASHEx_OBGetConfig(&OptionsBytesStruct);
 80023d2:	463b      	mov	r3, r7
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7fe fadf 	bl	8000998 <HAL_FLASHEx_OBGetConfig>

  /* Lock the Flash to disable the flash control register access (recommended
     to protect the FLASH memory against possible unwanted operation) *********/
  HAL_FLASH_Lock();
 80023da:	f7fe f8cf 	bl	800057c <HAL_FLASH_Lock>

  /* Get pages already write protected ****************************************/
//TODO  ProtectedPAGE = ~(OptionsBytesStruct.WRPPage) & FLASH_PAGE_TO_BE_PROTECTED;

  /* Check if desired pages are already write protected ***********************/
  if(ProtectedPAGE != 0)
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <FLASH_If_GetWriteProtectionStatus+0x24>
  {
    /* Some sectors inside the user flash area are write protected */
    return FLASHIF_PROTECTION_WRPENABLED;
 80023e4:	2302      	movs	r3, #2
 80023e6:	e000      	b.n	80023ea <FLASH_If_GetWriteProtectionStatus+0x26>
  }
  else
  { 
    /* No write protected sectors inside the user flash area */
    return FLASHIF_PROTECTION_NONE;
 80023e8:	2300      	movs	r3, #0
  }
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3720      	adds	r7, #32
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <FLASH_If_WriteProtectionConfig>:
  * @brief  Configure the write protection status of user flash area.
  * @param  protectionstate : FLASHIF_WRP_DISABLE or FLASHIF_WRP_ENABLE the protection
  * @retval uint32_t FLASHIF_OK if change is applied.
  */
uint32_t FLASH_If_WriteProtectionConfig(uint32_t protectionstate)
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b092      	sub	sp, #72	; 0x48
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
  uint32_t ProtectedPAGE = 0x0;
 80023fa:	2300      	movs	r3, #0
 80023fc:	643b      	str	r3, [r7, #64]	; 0x40
  FLASH_OBProgramInitTypeDef config_new, config_old;
  HAL_StatusTypeDef result = HAL_OK;
 80023fe:	2300      	movs	r3, #0
 8002400:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  

  /* Get pages write protection status ****************************************/
  HAL_FLASHEx_OBGetConfig(&config_old);
 8002404:	f107 0308 	add.w	r3, r7, #8
 8002408:	4618      	mov	r0, r3
 800240a:	f7fe fac5 	bl	8000998 <HAL_FLASHEx_OBGetConfig>

  /* The parameter says whether we turn the protection on or off */
  config_new.WRPState = (protectionstate == FLASHIF_WRP_ENABLE ? OB_WRPSTATE_ENABLE : OB_WRPSTATE_DISABLE);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d101      	bne.n	8002418 <FLASH_If_WriteProtectionConfig+0x26>
 8002414:	2301      	movs	r3, #1
 8002416:	e000      	b.n	800241a <FLASH_If_WriteProtectionConfig+0x28>
 8002418:	2300      	movs	r3, #0
 800241a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* We want to modify only the Write protection */
  config_new.OptionType = OPTIONBYTE_WRP;
 800241c:	2301      	movs	r3, #1
 800241e:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* No read protection, keep BOR and reset settings */
  config_new.RDPLevel = OB_RDP_LEVEL_0;
 8002420:	23a5      	movs	r3, #165	; 0xa5
 8002422:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  config_new.USERConfig = config_old.USERConfig;  
 8002426:	7e7b      	ldrb	r3, [r7, #25]
 8002428:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  /* Get pages already write protected ****************************************/
//TODO  ProtectedPAGE = config_old.WRPPage | FLASH_PAGE_TO_BE_PROTECTED;

  /* Unlock the Flash to enable the flash control register access *************/ 
  HAL_FLASH_Unlock();
 800242c:	f7fe f880 	bl	8000530 <HAL_FLASH_Unlock>

  /* Unlock the Options Bytes *************************************************/
  HAL_FLASH_OB_Unlock();
 8002430:	f7fe f8b4 	bl	800059c <HAL_FLASH_OB_Unlock>
  
  /* Erase all the option Bytes ***********************************************/
  result = HAL_FLASHEx_OBErase();
 8002434:	f7fe f9f2 	bl	800081c <HAL_FLASHEx_OBErase>
 8002438:	4603      	mov	r3, r0
 800243a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  if (result == HAL_OK)
 800243e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002442:	2b00      	cmp	r3, #0
 8002444:	d109      	bne.n	800245a <FLASH_If_WriteProtectionConfig+0x68>
  {
    config_new.WRPPage    = ProtectedPAGE;
 8002446:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002448:	62fb      	str	r3, [r7, #44]	; 0x2c
    result = HAL_FLASHEx_OBProgram(&config_new);
 800244a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800244e:	4618      	mov	r0, r3
 8002450:	f7fe fa26 	bl	80008a0 <HAL_FLASHEx_OBProgram>
 8002454:	4603      	mov	r3, r0
 8002456:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }
  
  return (result == HAL_OK ? FLASHIF_OK: FLASHIF_PROTECTION_ERRROR);
 800245a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <FLASH_If_WriteProtectionConfig+0x74>
 8002462:	2300      	movs	r3, #0
 8002464:	e000      	b.n	8002468 <FLASH_If_WriteProtectionConfig+0x76>
 8002466:	2304      	movs	r3, #4
}
 8002468:	4618      	mov	r0, r3
 800246a:	3748      	adds	r7, #72	; 0x48
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002476:	f7fd fe69 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800247a:	f000 f837 	bl	80024ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800247e:	f000 f8c5 	bl	800260c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8002482:	f000 f86f 	bl	8002564 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002486:	f000 f897 	bl	80025b8 <MX_USART2_UART_Init>

  /* Initialize Key Button mounted on STM3210C-EVAL RevC board */
//  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_GPIO);

  /* Test if Key push-button on STM3210C-EVAL RevC Board is pressed */
  if (BSP_PB_GetState(BUTTON_KEY) == GPIO_PIN_RESET)
 800248a:	2002      	movs	r0, #2
 800248c:	f000 fa68 	bl	8002960 <BSP_PB_GetState>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d106      	bne.n	80024a4 <main+0x34>
  {
  	/* Initialise Flash */
  	FLASH_If_Init();
 8002496:	f7ff ff11 	bl	80022bc <FLASH_If_Init>
  	/* Execute the IAP driver in order to reprogram the Flash */
    IAP_Init();
 800249a:	f000 f8cd 	bl	8002638 <IAP_Init>
    /* Display main menu */
    Main_Menu ();
 800249e:	f000 f989 	bl	80027b4 <Main_Menu>
 80024a2:	e018      	b.n	80024d6 <main+0x66>
  }
  /* Keep the user application running */
  else
  {
    /* Test if user code is programmed starting from address "APPLICATION_ADDRESS" */
    if (((*(__IO uint32_t*)APPLICATION_ADDRESS) & 0x2FFE0000 ) == 0x20000000)
 80024a4:	4b0c      	ldr	r3, [pc, #48]	; (80024d8 <main+0x68>)
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	4b0c      	ldr	r3, [pc, #48]	; (80024dc <main+0x6c>)
 80024aa:	4013      	ands	r3, r2
 80024ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024b0:	d111      	bne.n	80024d6 <main+0x66>
    {
      /* Jump to user application */
      JumpAddress = *(__IO uint32_t*) (APPLICATION_ADDRESS + 4);
 80024b2:	4b0b      	ldr	r3, [pc, #44]	; (80024e0 <main+0x70>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a0b      	ldr	r2, [pc, #44]	; (80024e4 <main+0x74>)
 80024b8:	6013      	str	r3, [r2, #0]
      JumpToApplication = (pFunction) JumpAddress;
 80024ba:	4b0a      	ldr	r3, [pc, #40]	; (80024e4 <main+0x74>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	461a      	mov	r2, r3
 80024c0:	4b09      	ldr	r3, [pc, #36]	; (80024e8 <main+0x78>)
 80024c2:	601a      	str	r2, [r3, #0]
      /* Initialize user application's Stack Pointer */
      __set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
 80024c4:	4b04      	ldr	r3, [pc, #16]	; (80024d8 <main+0x68>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f383 8808 	msr	MSP, r3
      JumpToApplication();
 80024d0:	4b05      	ldr	r3, [pc, #20]	; (80024e8 <main+0x78>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4798      	blx	r3

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80024d6:	e7fe      	b.n	80024d6 <main+0x66>
 80024d8:	08004000 	.word	0x08004000
 80024dc:	2ffe0000 	.word	0x2ffe0000
 80024e0:	08004004 	.word	0x08004004
 80024e4:	20000120 	.word	0x20000120
 80024e8:	20000124 	.word	0x20000124

080024ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b090      	sub	sp, #64	; 0x40
 80024f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024f2:	f107 0318 	add.w	r3, r7, #24
 80024f6:	2228      	movs	r2, #40	; 0x28
 80024f8:	2100      	movs	r1, #0
 80024fa:	4618      	mov	r0, r3
 80024fc:	f001 f818 	bl	8003530 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002500:	1d3b      	adds	r3, r7, #4
 8002502:	2200      	movs	r2, #0
 8002504:	601a      	str	r2, [r3, #0]
 8002506:	605a      	str	r2, [r3, #4]
 8002508:	609a      	str	r2, [r3, #8]
 800250a:	60da      	str	r2, [r3, #12]
 800250c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800250e:	2302      	movs	r3, #2
 8002510:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002512:	2301      	movs	r3, #1
 8002514:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002516:	2310      	movs	r3, #16
 8002518:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800251a:	2300      	movs	r3, #0
 800251c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800251e:	f107 0318 	add.w	r3, r7, #24
 8002522:	4618      	mov	r0, r3
 8002524:	f7fe fe3a 	bl	800119c <HAL_RCC_OscConfig>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800252e:	f000 f8a5 	bl	800267c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002532:	230f      	movs	r3, #15
 8002534:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002536:	2300      	movs	r3, #0
 8002538:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800253a:	2300      	movs	r3, #0
 800253c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800253e:	2300      	movs	r3, #0
 8002540:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002542:	2300      	movs	r3, #0
 8002544:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002546:	1d3b      	adds	r3, r7, #4
 8002548:	2100      	movs	r1, #0
 800254a:	4618      	mov	r0, r3
 800254c:	f7ff f88a 	bl	8001664 <HAL_RCC_ClockConfig>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8002556:	f000 f891 	bl	800267c <Error_Handler>
  }
}
 800255a:	bf00      	nop
 800255c:	3740      	adds	r7, #64	; 0x40
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
	...

08002564 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002568:	4b11      	ldr	r3, [pc, #68]	; (80025b0 <MX_USART1_UART_Init+0x4c>)
 800256a:	4a12      	ldr	r2, [pc, #72]	; (80025b4 <MX_USART1_UART_Init+0x50>)
 800256c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800256e:	4b10      	ldr	r3, [pc, #64]	; (80025b0 <MX_USART1_UART_Init+0x4c>)
 8002570:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002574:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002576:	4b0e      	ldr	r3, [pc, #56]	; (80025b0 <MX_USART1_UART_Init+0x4c>)
 8002578:	2200      	movs	r2, #0
 800257a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800257c:	4b0c      	ldr	r3, [pc, #48]	; (80025b0 <MX_USART1_UART_Init+0x4c>)
 800257e:	2200      	movs	r2, #0
 8002580:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002582:	4b0b      	ldr	r3, [pc, #44]	; (80025b0 <MX_USART1_UART_Init+0x4c>)
 8002584:	2200      	movs	r2, #0
 8002586:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002588:	4b09      	ldr	r3, [pc, #36]	; (80025b0 <MX_USART1_UART_Init+0x4c>)
 800258a:	220c      	movs	r2, #12
 800258c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800258e:	4b08      	ldr	r3, [pc, #32]	; (80025b0 <MX_USART1_UART_Init+0x4c>)
 8002590:	2200      	movs	r2, #0
 8002592:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002594:	4b06      	ldr	r3, [pc, #24]	; (80025b0 <MX_USART1_UART_Init+0x4c>)
 8002596:	2200      	movs	r2, #0
 8002598:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800259a:	4805      	ldr	r0, [pc, #20]	; (80025b0 <MX_USART1_UART_Init+0x4c>)
 800259c:	f7ff fa20 	bl	80019e0 <HAL_UART_Init>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80025a6:	f000 f869 	bl	800267c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80025aa:	bf00      	nop
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	200000a0 	.word	0x200000a0
 80025b4:	40013800 	.word	0x40013800

080025b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80025bc:	4b11      	ldr	r3, [pc, #68]	; (8002604 <MX_USART2_UART_Init+0x4c>)
 80025be:	4a12      	ldr	r2, [pc, #72]	; (8002608 <MX_USART2_UART_Init+0x50>)
 80025c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80025c2:	4b10      	ldr	r3, [pc, #64]	; (8002604 <MX_USART2_UART_Init+0x4c>)
 80025c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80025ca:	4b0e      	ldr	r3, [pc, #56]	; (8002604 <MX_USART2_UART_Init+0x4c>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80025d0:	4b0c      	ldr	r3, [pc, #48]	; (8002604 <MX_USART2_UART_Init+0x4c>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80025d6:	4b0b      	ldr	r3, [pc, #44]	; (8002604 <MX_USART2_UART_Init+0x4c>)
 80025d8:	2200      	movs	r2, #0
 80025da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80025dc:	4b09      	ldr	r3, [pc, #36]	; (8002604 <MX_USART2_UART_Init+0x4c>)
 80025de:	220c      	movs	r2, #12
 80025e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025e2:	4b08      	ldr	r3, [pc, #32]	; (8002604 <MX_USART2_UART_Init+0x4c>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80025e8:	4b06      	ldr	r3, [pc, #24]	; (8002604 <MX_USART2_UART_Init+0x4c>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80025ee:	4805      	ldr	r0, [pc, #20]	; (8002604 <MX_USART2_UART_Init+0x4c>)
 80025f0:	f7ff f9f6 	bl	80019e0 <HAL_UART_Init>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80025fa:	f000 f83f 	bl	800267c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80025fe:	bf00      	nop
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	200000e0 	.word	0x200000e0
 8002608:	40004400 	.word	0x40004400

0800260c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002612:	4b08      	ldr	r3, [pc, #32]	; (8002634 <MX_GPIO_Init+0x28>)
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	4a07      	ldr	r2, [pc, #28]	; (8002634 <MX_GPIO_Init+0x28>)
 8002618:	f043 0304 	orr.w	r3, r3, #4
 800261c:	6193      	str	r3, [r2, #24]
 800261e:	4b05      	ldr	r3, [pc, #20]	; (8002634 <MX_GPIO_Init+0x28>)
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	f003 0304 	and.w	r3, r3, #4
 8002626:	607b      	str	r3, [r7, #4]
 8002628:	687b      	ldr	r3, [r7, #4]

}
 800262a:	bf00      	nop
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	bc80      	pop	{r7}
 8002632:	4770      	bx	lr
 8002634:	40021000 	.word	0x40021000

08002638 <IAP_Init>:
  * @brief  Initialize the IAP: Configure USART.
  * @param  None
  * @retval None
  */
void IAP_Init(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
        - One Stop Bit
        - No parity
        - Hardware flow control disabled (RTS and CTS signals)
        - Receive and transmit enabled
  */
  UartHandle.Init.BaudRate = 115200;
 800263c:	4b0e      	ldr	r3, [pc, #56]	; (8002678 <IAP_Init+0x40>)
 800263e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002642:	605a      	str	r2, [r3, #4]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8002644:	4b0c      	ldr	r3, [pc, #48]	; (8002678 <IAP_Init+0x40>)
 8002646:	2200      	movs	r2, #0
 8002648:	609a      	str	r2, [r3, #8]
  UartHandle.Init.StopBits = UART_STOPBITS_1;
 800264a:	4b0b      	ldr	r3, [pc, #44]	; (8002678 <IAP_Init+0x40>)
 800264c:	2200      	movs	r2, #0
 800264e:	60da      	str	r2, [r3, #12]
  UartHandle.Init.Parity = UART_PARITY_NONE;
 8002650:	4b09      	ldr	r3, [pc, #36]	; (8002678 <IAP_Init+0x40>)
 8002652:	2200      	movs	r2, #0
 8002654:	611a      	str	r2, [r3, #16]
  UartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002656:	4b08      	ldr	r3, [pc, #32]	; (8002678 <IAP_Init+0x40>)
 8002658:	2200      	movs	r2, #0
 800265a:	619a      	str	r2, [r3, #24]
  UartHandle.Init.Mode = UART_MODE_RX | UART_MODE_TX;
 800265c:	4b06      	ldr	r3, [pc, #24]	; (8002678 <IAP_Init+0x40>)
 800265e:	220c      	movs	r2, #12
 8002660:	615a      	str	r2, [r3, #20]
  if (HAL_UART_Init(&UartHandle) != HAL_OK)
 8002662:	4805      	ldr	r0, [pc, #20]	; (8002678 <IAP_Init+0x40>)
 8002664:	f7ff f9bc 	bl	80019e0 <HAL_UART_Init>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <IAP_Init+0x3a>
  {
    Error_Handler();
 800266e:	f000 f805 	bl	800267c <Error_Handler>
  }

  //BSP_COM_Init(COM1, &UartHandle);

}
 8002672:	bf00      	nop
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	20000060 	.word	0x20000060

0800267c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002680:	bf00      	nop
 8002682:	46bd      	mov	sp, r7
 8002684:	bc80      	pop	{r7}
 8002686:	4770      	bx	lr

08002688 <SerialDownload>:
  * @brief  Download a file via serial port
  * @param  None
  * @retval None
  */
void SerialDownload(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
  uint8_t number[11] = {0};
 800268e:	1d3b      	adds	r3, r7, #4
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	605a      	str	r2, [r3, #4]
 8002696:	f8c3 2007 	str.w	r2, [r3, #7]
  uint32_t size = 0;
 800269a:	2300      	movs	r3, #0
 800269c:	603b      	str	r3, [r7, #0]
  COM_StatusTypeDef result;

  Serial_PutString("Waiting for the file to be sent ... (press 'a' to abort)\n\r");
 800269e:	4821      	ldr	r0, [pc, #132]	; (8002724 <SerialDownload+0x9c>)
 80026a0:	f7ff fdd4 	bl	800224c <Serial_PutString>
  result = Ymodem_Receive( &size );
 80026a4:	463b      	mov	r3, r7
 80026a6:	4618      	mov	r0, r3
 80026a8:	f000 fc46 	bl	8002f38 <Ymodem_Receive>
 80026ac:	4603      	mov	r3, r0
 80026ae:	73fb      	strb	r3, [r7, #15]
  if (result == COM_OK)
 80026b0:	7bfb      	ldrb	r3, [r7, #15]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d119      	bne.n	80026ea <SerialDownload+0x62>
  {
    Serial_PutString("\n\n\r Programming Completed Successfully!\n\r--------------------------------\r\n Name: ");
 80026b6:	481c      	ldr	r0, [pc, #112]	; (8002728 <SerialDownload+0xa0>)
 80026b8:	f7ff fdc8 	bl	800224c <Serial_PutString>
    Serial_PutString(aFileName);
 80026bc:	481b      	ldr	r0, [pc, #108]	; (800272c <SerialDownload+0xa4>)
 80026be:	f7ff fdc5 	bl	800224c <Serial_PutString>
    Int2Str(number, size);
 80026c2:	683a      	ldr	r2, [r7, #0]
 80026c4:	1d3b      	adds	r3, r7, #4
 80026c6:	4611      	mov	r1, r2
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7ff fc77 	bl	8001fbc <Int2Str>
    Serial_PutString("\n\r Size: ");
 80026ce:	4818      	ldr	r0, [pc, #96]	; (8002730 <SerialDownload+0xa8>)
 80026d0:	f7ff fdbc 	bl	800224c <Serial_PutString>
    Serial_PutString(number);
 80026d4:	1d3b      	adds	r3, r7, #4
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7ff fdb8 	bl	800224c <Serial_PutString>
    Serial_PutString(" Bytes\r\n");
 80026dc:	4815      	ldr	r0, [pc, #84]	; (8002734 <SerialDownload+0xac>)
 80026de:	f7ff fdb5 	bl	800224c <Serial_PutString>
    Serial_PutString("-------------------\n");
 80026e2:	4815      	ldr	r0, [pc, #84]	; (8002738 <SerialDownload+0xb0>)
 80026e4:	f7ff fdb2 	bl	800224c <Serial_PutString>
  }
  else
  {
    Serial_PutString("\n\rFailed to receive the file!\n\r");
  }
}
 80026e8:	e017      	b.n	800271a <SerialDownload+0x92>
  else if (result == COM_LIMIT)
 80026ea:	7bfb      	ldrb	r3, [r7, #15]
 80026ec:	2b05      	cmp	r3, #5
 80026ee:	d103      	bne.n	80026f8 <SerialDownload+0x70>
    Serial_PutString("\n\n\rThe image size is higher than the allowed space memory!\n\r");
 80026f0:	4812      	ldr	r0, [pc, #72]	; (800273c <SerialDownload+0xb4>)
 80026f2:	f7ff fdab 	bl	800224c <Serial_PutString>
}
 80026f6:	e010      	b.n	800271a <SerialDownload+0x92>
  else if (result == COM_DATA)
 80026f8:	7bfb      	ldrb	r3, [r7, #15]
 80026fa:	2b04      	cmp	r3, #4
 80026fc:	d103      	bne.n	8002706 <SerialDownload+0x7e>
    Serial_PutString("\n\n\rVerification failed!\n\r");
 80026fe:	4810      	ldr	r0, [pc, #64]	; (8002740 <SerialDownload+0xb8>)
 8002700:	f7ff fda4 	bl	800224c <Serial_PutString>
}
 8002704:	e009      	b.n	800271a <SerialDownload+0x92>
  else if (result == COM_ABORT)
 8002706:	7bfb      	ldrb	r3, [r7, #15]
 8002708:	2b02      	cmp	r3, #2
 800270a:	d103      	bne.n	8002714 <SerialDownload+0x8c>
    Serial_PutString("\r\n\nAborted by user.\n\r");
 800270c:	480d      	ldr	r0, [pc, #52]	; (8002744 <SerialDownload+0xbc>)
 800270e:	f7ff fd9d 	bl	800224c <Serial_PutString>
}
 8002712:	e002      	b.n	800271a <SerialDownload+0x92>
    Serial_PutString("\n\rFailed to receive the file!\n\r");
 8002714:	480c      	ldr	r0, [pc, #48]	; (8002748 <SerialDownload+0xc0>)
 8002716:	f7ff fd99 	bl	800224c <Serial_PutString>
}
 800271a:	bf00      	nop
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	0800356c 	.word	0x0800356c
 8002728:	080035a8 	.word	0x080035a8
 800272c:	20000128 	.word	0x20000128
 8002730:	080035fc 	.word	0x080035fc
 8002734:	08003608 	.word	0x08003608
 8002738:	08003614 	.word	0x08003614
 800273c:	0800362c 	.word	0x0800362c
 8002740:	0800366c 	.word	0x0800366c
 8002744:	08003688 	.word	0x08003688
 8002748:	080036a0 	.word	0x080036a0

0800274c <SerialUpload>:
  * @brief  Upload a file via serial port.
  * @param  None
  * @retval None
  */
void SerialUpload(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
  uint8_t status = 0;
 8002752:	2300      	movs	r3, #0
 8002754:	71fb      	strb	r3, [r7, #7]

  Serial_PutString("\n\n\rSelect Receive File\n\r");
 8002756:	4811      	ldr	r0, [pc, #68]	; (800279c <SerialUpload+0x50>)
 8002758:	f7ff fd78 	bl	800224c <Serial_PutString>

  HAL_UART_Receive(&UartHandle, &status, 1, RX_TIMEOUT);
 800275c:	1df9      	adds	r1, r7, #7
 800275e:	f04f 33ff 	mov.w	r3, #4294967295
 8002762:	2201      	movs	r2, #1
 8002764:	480e      	ldr	r0, [pc, #56]	; (80027a0 <SerialUpload+0x54>)
 8002766:	f7ff fa21 	bl	8001bac <HAL_UART_Receive>
  if ( status == CRC16)
 800276a:	79fb      	ldrb	r3, [r7, #7]
 800276c:	2b43      	cmp	r3, #67	; 0x43
 800276e:	d111      	bne.n	8002794 <SerialUpload+0x48>
  {
    /* Transmit the flash image through ymodem protocol */
    status = Ymodem_Transmit((uint8_t*)APPLICATION_ADDRESS, (const uint8_t*)"UploadedFlashImage.bin", USER_FLASH_SIZE);
 8002770:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002774:	490b      	ldr	r1, [pc, #44]	; (80027a4 <SerialUpload+0x58>)
 8002776:	480c      	ldr	r0, [pc, #48]	; (80027a8 <SerialUpload+0x5c>)
 8002778:	f000 fd02 	bl	8003180 <Ymodem_Transmit>
 800277c:	4603      	mov	r3, r0
 800277e:	71fb      	strb	r3, [r7, #7]

    if (status != 0)
 8002780:	79fb      	ldrb	r3, [r7, #7]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d003      	beq.n	800278e <SerialUpload+0x42>
    {
      Serial_PutString("\n\rError Occurred while Transmitting File\n\r");
 8002786:	4809      	ldr	r0, [pc, #36]	; (80027ac <SerialUpload+0x60>)
 8002788:	f7ff fd60 	bl	800224c <Serial_PutString>
    else
    {
      Serial_PutString("\n\rFile uploaded successfully \n\r");
    }
  }
}
 800278c:	e002      	b.n	8002794 <SerialUpload+0x48>
      Serial_PutString("\n\rFile uploaded successfully \n\r");
 800278e:	4808      	ldr	r0, [pc, #32]	; (80027b0 <SerialUpload+0x64>)
 8002790:	f7ff fd5c 	bl	800224c <Serial_PutString>
}
 8002794:	bf00      	nop
 8002796:	3708      	adds	r7, #8
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	080036c0 	.word	0x080036c0
 80027a0:	20000060 	.word	0x20000060
 80027a4:	080036dc 	.word	0x080036dc
 80027a8:	08004000 	.word	0x08004000
 80027ac:	080036f4 	.word	0x080036f4
 80027b0:	08003720 	.word	0x08003720

080027b4 <Main_Menu>:
  * @brief  Display the Main Menu on HyperTerminal
  * @param  None
  * @retval None
  */
void Main_Menu(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
  uint8_t key = 0;
 80027ba:	2300      	movs	r3, #0
 80027bc:	70fb      	strb	r3, [r7, #3]

  Serial_PutString("\r\n======================================================================");
 80027be:	484e      	ldr	r0, [pc, #312]	; (80028f8 <Main_Menu+0x144>)
 80027c0:	f7ff fd44 	bl	800224c <Serial_PutString>
  Serial_PutString("\r\n=              (C) COPYRIGHT 2015 STMicroelectronics                 =");
 80027c4:	484d      	ldr	r0, [pc, #308]	; (80028fc <Main_Menu+0x148>)
 80027c6:	f7ff fd41 	bl	800224c <Serial_PutString>
  Serial_PutString("\r\n=                                                                    =");
 80027ca:	484d      	ldr	r0, [pc, #308]	; (8002900 <Main_Menu+0x14c>)
 80027cc:	f7ff fd3e 	bl	800224c <Serial_PutString>
  Serial_PutString("\r\n=  STM32F1xx In-Application Programming Application  (Version 1.0.0) =");
 80027d0:	484c      	ldr	r0, [pc, #304]	; (8002904 <Main_Menu+0x150>)
 80027d2:	f7ff fd3b 	bl	800224c <Serial_PutString>
  Serial_PutString("\r\n=                                                                    =");
 80027d6:	484a      	ldr	r0, [pc, #296]	; (8002900 <Main_Menu+0x14c>)
 80027d8:	f7ff fd38 	bl	800224c <Serial_PutString>
  Serial_PutString("\r\n=                                   By MCD Application Team          =");
 80027dc:	484a      	ldr	r0, [pc, #296]	; (8002908 <Main_Menu+0x154>)
 80027de:	f7ff fd35 	bl	800224c <Serial_PutString>
  Serial_PutString("\r\n======================================================================");
 80027e2:	4845      	ldr	r0, [pc, #276]	; (80028f8 <Main_Menu+0x144>)
 80027e4:	f7ff fd32 	bl	800224c <Serial_PutString>
  Serial_PutString("\r\n\r\n");
 80027e8:	4848      	ldr	r0, [pc, #288]	; (800290c <Main_Menu+0x158>)
 80027ea:	f7ff fd2f 	bl	800224c <Serial_PutString>

  /* Test if any sector of Flash memory where user application will be loaded is write protected */
  FlashProtection = FLASH_If_GetWriteProtectionStatus();
 80027ee:	f7ff fde9 	bl	80023c4 <FLASH_If_GetWriteProtectionStatus>
 80027f2:	4602      	mov	r2, r0
 80027f4:	4b46      	ldr	r3, [pc, #280]	; (8002910 <Main_Menu+0x15c>)
 80027f6:	601a      	str	r2, [r3, #0]

  while (1)
  {

    Serial_PutString("\r\n=================== Main Menu ============================\r\n\n");
 80027f8:	4846      	ldr	r0, [pc, #280]	; (8002914 <Main_Menu+0x160>)
 80027fa:	f7ff fd27 	bl	800224c <Serial_PutString>
    Serial_PutString("  Download image to the internal Flash ----------------- 1\r\n\n");
 80027fe:	4846      	ldr	r0, [pc, #280]	; (8002918 <Main_Menu+0x164>)
 8002800:	f7ff fd24 	bl	800224c <Serial_PutString>
    Serial_PutString("  Upload image from the internal Flash ----------------- 2\r\n\n");
 8002804:	4845      	ldr	r0, [pc, #276]	; (800291c <Main_Menu+0x168>)
 8002806:	f7ff fd21 	bl	800224c <Serial_PutString>
    Serial_PutString("  Execute the loaded application ----------------------- 3\r\n\n");
 800280a:	4845      	ldr	r0, [pc, #276]	; (8002920 <Main_Menu+0x16c>)
 800280c:	f7ff fd1e 	bl	800224c <Serial_PutString>


    if(FlashProtection != FLASHIF_PROTECTION_NONE)
 8002810:	4b3f      	ldr	r3, [pc, #252]	; (8002910 <Main_Menu+0x15c>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d003      	beq.n	8002820 <Main_Menu+0x6c>
    {
      Serial_PutString("  Disable the write protection ------------------------- 4\r\n\n");
 8002818:	4842      	ldr	r0, [pc, #264]	; (8002924 <Main_Menu+0x170>)
 800281a:	f7ff fd17 	bl	800224c <Serial_PutString>
 800281e:	e002      	b.n	8002826 <Main_Menu+0x72>
    }
    else
    {
      Serial_PutString("  Enable the write protection -------------------------- 4\r\n\n");
 8002820:	4841      	ldr	r0, [pc, #260]	; (8002928 <Main_Menu+0x174>)
 8002822:	f7ff fd13 	bl	800224c <Serial_PutString>
    }
    Serial_PutString("==========================================================\r\n\n");
 8002826:	4841      	ldr	r0, [pc, #260]	; (800292c <Main_Menu+0x178>)
 8002828:	f7ff fd10 	bl	800224c <Serial_PutString>

    /* Clean the input path */
    __HAL_UART_FLUSH_DRREGISTER(&UartHandle);
 800282c:	4b40      	ldr	r3, [pc, #256]	; (8002930 <Main_Menu+0x17c>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
	
    /* Receive key */
    HAL_UART_Receive(&UartHandle, &key, 1, RX_TIMEOUT);
 8002832:	1cf9      	adds	r1, r7, #3
 8002834:	f04f 33ff 	mov.w	r3, #4294967295
 8002838:	2201      	movs	r2, #1
 800283a:	483d      	ldr	r0, [pc, #244]	; (8002930 <Main_Menu+0x17c>)
 800283c:	f7ff f9b6 	bl	8001bac <HAL_UART_Receive>

    switch (key)
 8002840:	78fb      	ldrb	r3, [r7, #3]
 8002842:	3b31      	subs	r3, #49	; 0x31
 8002844:	2b03      	cmp	r3, #3
 8002846:	d851      	bhi.n	80028ec <Main_Menu+0x138>
 8002848:	a201      	add	r2, pc, #4	; (adr r2, 8002850 <Main_Menu+0x9c>)
 800284a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800284e:	bf00      	nop
 8002850:	08002861 	.word	0x08002861
 8002854:	08002867 	.word	0x08002867
 8002858:	0800286d 	.word	0x0800286d
 800285c:	08002899 	.word	0x08002899
    {
    case '1' :
      /* Download user application in the Flash */
      SerialDownload();
 8002860:	f7ff ff12 	bl	8002688 <SerialDownload>
      break;
 8002864:	e046      	b.n	80028f4 <Main_Menu+0x140>
    case '2' :
      /* Upload user application from the Flash */
      SerialUpload();
 8002866:	f7ff ff71 	bl	800274c <SerialUpload>
      break;
 800286a:	e043      	b.n	80028f4 <Main_Menu+0x140>
    case '3' :
      Serial_PutString("Start program execution......\r\n\n");
 800286c:	4831      	ldr	r0, [pc, #196]	; (8002934 <Main_Menu+0x180>)
 800286e:	f7ff fced 	bl	800224c <Serial_PutString>
      /* execute the new program */
      JumpAddress = *(__IO uint32_t*) (APPLICATION_ADDRESS + 4);
 8002872:	4b31      	ldr	r3, [pc, #196]	; (8002938 <Main_Menu+0x184>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a31      	ldr	r2, [pc, #196]	; (800293c <Main_Menu+0x188>)
 8002878:	6013      	str	r3, [r2, #0]
      /* Jump to user application */
      JumpToApplication = (pFunction) JumpAddress;
 800287a:	4b30      	ldr	r3, [pc, #192]	; (800293c <Main_Menu+0x188>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	461a      	mov	r2, r3
 8002880:	4b2f      	ldr	r3, [pc, #188]	; (8002940 <Main_Menu+0x18c>)
 8002882:	601a      	str	r2, [r3, #0]
      /* Initialize user application's Stack Pointer */
      __set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
 8002884:	4b2f      	ldr	r3, [pc, #188]	; (8002944 <Main_Menu+0x190>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	607b      	str	r3, [r7, #4]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f383 8808 	msr	MSP, r3
      JumpToApplication();
 8002890:	4b2b      	ldr	r3, [pc, #172]	; (8002940 <Main_Menu+0x18c>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4798      	blx	r3
      break;
 8002896:	e02d      	b.n	80028f4 <Main_Menu+0x140>
    case '4' :
      if (FlashProtection != FLASHIF_PROTECTION_NONE)
 8002898:	4b1d      	ldr	r3, [pc, #116]	; (8002910 <Main_Menu+0x15c>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d012      	beq.n	80028c6 <Main_Menu+0x112>
      {
        /* Disable the write protection */
        if (FLASH_If_WriteProtectionConfig(FLASHIF_WRP_DISABLE) == FLASHIF_OK)
 80028a0:	2001      	movs	r0, #1
 80028a2:	f7ff fda6 	bl	80023f2 <FLASH_If_WriteProtectionConfig>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d108      	bne.n	80028be <Main_Menu+0x10a>
        {
          Serial_PutString("Write Protection disabled...\r\n");
 80028ac:	4826      	ldr	r0, [pc, #152]	; (8002948 <Main_Menu+0x194>)
 80028ae:	f7ff fccd 	bl	800224c <Serial_PutString>
          Serial_PutString("System will now restart...\r\n");
 80028b2:	4826      	ldr	r0, [pc, #152]	; (800294c <Main_Menu+0x198>)
 80028b4:	f7ff fcca 	bl	800224c <Serial_PutString>
          /* Launch the option byte loading */
          HAL_FLASH_OB_Launch();
 80028b8:	f7fd fe8c 	bl	80005d4 <HAL_FLASH_OB_Launch>
        else
        {
          Serial_PutString("Error: Flash write protection failed...\r\n");
        }
      }
      break;
 80028bc:	e01a      	b.n	80028f4 <Main_Menu+0x140>
          Serial_PutString("Error: Flash write un-protection failed...\r\n");
 80028be:	4824      	ldr	r0, [pc, #144]	; (8002950 <Main_Menu+0x19c>)
 80028c0:	f7ff fcc4 	bl	800224c <Serial_PutString>
      break;
 80028c4:	e016      	b.n	80028f4 <Main_Menu+0x140>
        if (FLASH_If_WriteProtectionConfig(FLASHIF_WRP_ENABLE) == FLASHIF_OK)
 80028c6:	2000      	movs	r0, #0
 80028c8:	f7ff fd93 	bl	80023f2 <FLASH_If_WriteProtectionConfig>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d108      	bne.n	80028e4 <Main_Menu+0x130>
          Serial_PutString("Write Protection enabled...\r\n");
 80028d2:	4820      	ldr	r0, [pc, #128]	; (8002954 <Main_Menu+0x1a0>)
 80028d4:	f7ff fcba 	bl	800224c <Serial_PutString>
          Serial_PutString("System will now restart...\r\n");
 80028d8:	481c      	ldr	r0, [pc, #112]	; (800294c <Main_Menu+0x198>)
 80028da:	f7ff fcb7 	bl	800224c <Serial_PutString>
          HAL_FLASH_OB_Launch();
 80028de:	f7fd fe79 	bl	80005d4 <HAL_FLASH_OB_Launch>
      break;
 80028e2:	e007      	b.n	80028f4 <Main_Menu+0x140>
          Serial_PutString("Error: Flash write protection failed...\r\n");
 80028e4:	481c      	ldr	r0, [pc, #112]	; (8002958 <Main_Menu+0x1a4>)
 80028e6:	f7ff fcb1 	bl	800224c <Serial_PutString>
      break;
 80028ea:	e003      	b.n	80028f4 <Main_Menu+0x140>
	default:
	Serial_PutString("Invalid Number ! ==> The number should be either 1, 2, 3 or 4\r");
 80028ec:	481b      	ldr	r0, [pc, #108]	; (800295c <Main_Menu+0x1a8>)
 80028ee:	f7ff fcad 	bl	800224c <Serial_PutString>
	break;
 80028f2:	bf00      	nop
    Serial_PutString("\r\n=================== Main Menu ============================\r\n\n");
 80028f4:	e780      	b.n	80027f8 <Main_Menu+0x44>
 80028f6:	bf00      	nop
 80028f8:	08003740 	.word	0x08003740
 80028fc:	0800378c 	.word	0x0800378c
 8002900:	080037d8 	.word	0x080037d8
 8002904:	08003824 	.word	0x08003824
 8002908:	08003870 	.word	0x08003870
 800290c:	080038bc 	.word	0x080038bc
 8002910:	20000034 	.word	0x20000034
 8002914:	080038c4 	.word	0x080038c4
 8002918:	08003904 	.word	0x08003904
 800291c:	08003944 	.word	0x08003944
 8002920:	08003984 	.word	0x08003984
 8002924:	080039c4 	.word	0x080039c4
 8002928:	08003a04 	.word	0x08003a04
 800292c:	08003a44 	.word	0x08003a44
 8002930:	20000060 	.word	0x20000060
 8002934:	08003a84 	.word	0x08003a84
 8002938:	08004004 	.word	0x08004004
 800293c:	20000120 	.word	0x20000120
 8002940:	20000124 	.word	0x20000124
 8002944:	08004000 	.word	0x08004000
 8002948:	08003aa8 	.word	0x08003aa8
 800294c:	08003ac8 	.word	0x08003ac8
 8002950:	08003ae8 	.word	0x08003ae8
 8002954:	08003b18 	.word	0x08003b18
 8002958:	08003b38 	.word	0x08003b38
 800295c:	08003b64 	.word	0x08003b64

08002960 <BSP_PB_GetState>:
  *   This parameter can be one of the following values:
  *     @arg BUTTON_TAMPER: Key/Tamper Push Button 
  * @retval Button state
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	4603      	mov	r3, r0
 8002968:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 800296a:	79fb      	ldrb	r3, [r7, #7]
 800296c:	4a07      	ldr	r2, [pc, #28]	; (800298c <BSP_PB_GetState+0x2c>)
 800296e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002972:	79fb      	ldrb	r3, [r7, #7]
 8002974:	4a06      	ldr	r2, [pc, #24]	; (8002990 <BSP_PB_GetState+0x30>)
 8002976:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800297a:	4619      	mov	r1, r3
 800297c:	f7fe fbf6 	bl	800116c <HAL_GPIO_ReadPin>
 8002980:	4603      	mov	r3, r0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	20000008 	.word	0x20000008
 8002990:	08003ba4 	.word	0x08003ba4

08002994 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800299a:	4b15      	ldr	r3, [pc, #84]	; (80029f0 <HAL_MspInit+0x5c>)
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	4a14      	ldr	r2, [pc, #80]	; (80029f0 <HAL_MspInit+0x5c>)
 80029a0:	f043 0301 	orr.w	r3, r3, #1
 80029a4:	6193      	str	r3, [r2, #24]
 80029a6:	4b12      	ldr	r3, [pc, #72]	; (80029f0 <HAL_MspInit+0x5c>)
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	60bb      	str	r3, [r7, #8]
 80029b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029b2:	4b0f      	ldr	r3, [pc, #60]	; (80029f0 <HAL_MspInit+0x5c>)
 80029b4:	69db      	ldr	r3, [r3, #28]
 80029b6:	4a0e      	ldr	r2, [pc, #56]	; (80029f0 <HAL_MspInit+0x5c>)
 80029b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029bc:	61d3      	str	r3, [r2, #28]
 80029be:	4b0c      	ldr	r3, [pc, #48]	; (80029f0 <HAL_MspInit+0x5c>)
 80029c0:	69db      	ldr	r3, [r3, #28]
 80029c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029c6:	607b      	str	r3, [r7, #4]
 80029c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80029ca:	4b0a      	ldr	r3, [pc, #40]	; (80029f4 <HAL_MspInit+0x60>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	60fb      	str	r3, [r7, #12]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80029d6:	60fb      	str	r3, [r7, #12]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029de:	60fb      	str	r3, [r7, #12]
 80029e0:	4a04      	ldr	r2, [pc, #16]	; (80029f4 <HAL_MspInit+0x60>)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029e6:	bf00      	nop
 80029e8:	3714      	adds	r7, #20
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bc80      	pop	{r7}
 80029ee:	4770      	bx	lr
 80029f0:	40021000 	.word	0x40021000
 80029f4:	40010000 	.word	0x40010000

080029f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b08a      	sub	sp, #40	; 0x28
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a00:	f107 0318 	add.w	r3, r7, #24
 8002a04:	2200      	movs	r2, #0
 8002a06:	601a      	str	r2, [r3, #0]
 8002a08:	605a      	str	r2, [r3, #4]
 8002a0a:	609a      	str	r2, [r3, #8]
 8002a0c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a37      	ldr	r2, [pc, #220]	; (8002af0 <HAL_UART_MspInit+0xf8>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d132      	bne.n	8002a7e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a18:	4b36      	ldr	r3, [pc, #216]	; (8002af4 <HAL_UART_MspInit+0xfc>)
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	4a35      	ldr	r2, [pc, #212]	; (8002af4 <HAL_UART_MspInit+0xfc>)
 8002a1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a22:	6193      	str	r3, [r2, #24]
 8002a24:	4b33      	ldr	r3, [pc, #204]	; (8002af4 <HAL_UART_MspInit+0xfc>)
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a2c:	617b      	str	r3, [r7, #20]
 8002a2e:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a30:	4b30      	ldr	r3, [pc, #192]	; (8002af4 <HAL_UART_MspInit+0xfc>)
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	4a2f      	ldr	r2, [pc, #188]	; (8002af4 <HAL_UART_MspInit+0xfc>)
 8002a36:	f043 0304 	orr.w	r3, r3, #4
 8002a3a:	6193      	str	r3, [r2, #24]
 8002a3c:	4b2d      	ldr	r3, [pc, #180]	; (8002af4 <HAL_UART_MspInit+0xfc>)
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	f003 0304 	and.w	r3, r3, #4
 8002a44:	613b      	str	r3, [r7, #16]
 8002a46:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002a48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a4e:	2302      	movs	r3, #2
 8002a50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a52:	2303      	movs	r3, #3
 8002a54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a56:	f107 0318 	add.w	r3, r7, #24
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	4826      	ldr	r0, [pc, #152]	; (8002af8 <HAL_UART_MspInit+0x100>)
 8002a5e:	f7fe fa27 	bl	8000eb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002a62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a70:	f107 0318 	add.w	r3, r7, #24
 8002a74:	4619      	mov	r1, r3
 8002a76:	4820      	ldr	r0, [pc, #128]	; (8002af8 <HAL_UART_MspInit+0x100>)
 8002a78:	f7fe fa1a 	bl	8000eb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002a7c:	e034      	b.n	8002ae8 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a1e      	ldr	r2, [pc, #120]	; (8002afc <HAL_UART_MspInit+0x104>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d12f      	bne.n	8002ae8 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a88:	4b1a      	ldr	r3, [pc, #104]	; (8002af4 <HAL_UART_MspInit+0xfc>)
 8002a8a:	69db      	ldr	r3, [r3, #28]
 8002a8c:	4a19      	ldr	r2, [pc, #100]	; (8002af4 <HAL_UART_MspInit+0xfc>)
 8002a8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a92:	61d3      	str	r3, [r2, #28]
 8002a94:	4b17      	ldr	r3, [pc, #92]	; (8002af4 <HAL_UART_MspInit+0xfc>)
 8002a96:	69db      	ldr	r3, [r3, #28]
 8002a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9c:	60fb      	str	r3, [r7, #12]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aa0:	4b14      	ldr	r3, [pc, #80]	; (8002af4 <HAL_UART_MspInit+0xfc>)
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	4a13      	ldr	r2, [pc, #76]	; (8002af4 <HAL_UART_MspInit+0xfc>)
 8002aa6:	f043 0304 	orr.w	r3, r3, #4
 8002aaa:	6193      	str	r3, [r2, #24]
 8002aac:	4b11      	ldr	r3, [pc, #68]	; (8002af4 <HAL_UART_MspInit+0xfc>)
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	f003 0304 	and.w	r3, r3, #4
 8002ab4:	60bb      	str	r3, [r7, #8]
 8002ab6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002ab8:	2304      	movs	r3, #4
 8002aba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002abc:	2302      	movs	r3, #2
 8002abe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ac4:	f107 0318 	add.w	r3, r7, #24
 8002ac8:	4619      	mov	r1, r3
 8002aca:	480b      	ldr	r0, [pc, #44]	; (8002af8 <HAL_UART_MspInit+0x100>)
 8002acc:	f7fe f9f0 	bl	8000eb0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002ad0:	2308      	movs	r3, #8
 8002ad2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002adc:	f107 0318 	add.w	r3, r7, #24
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	4805      	ldr	r0, [pc, #20]	; (8002af8 <HAL_UART_MspInit+0x100>)
 8002ae4:	f7fe f9e4 	bl	8000eb0 <HAL_GPIO_Init>
}
 8002ae8:	bf00      	nop
 8002aea:	3728      	adds	r7, #40	; 0x28
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	40013800 	.word	0x40013800
 8002af4:	40021000 	.word	0x40021000
 8002af8:	40010800 	.word	0x40010800
 8002afc:	40004400 	.word	0x40004400

08002b00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002b04:	bf00      	nop
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bc80      	pop	{r7}
 8002b0a:	4770      	bx	lr

08002b0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b10:	e7fe      	b.n	8002b10 <HardFault_Handler+0x4>

08002b12 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b12:	b480      	push	{r7}
 8002b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b16:	e7fe      	b.n	8002b16 <MemManage_Handler+0x4>

08002b18 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b1c:	e7fe      	b.n	8002b1c <BusFault_Handler+0x4>

08002b1e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b22:	e7fe      	b.n	8002b22 <UsageFault_Handler+0x4>

08002b24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b28:	bf00      	nop
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bc80      	pop	{r7}
 8002b2e:	4770      	bx	lr

08002b30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b34:	bf00      	nop
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bc80      	pop	{r7}
 8002b3a:	4770      	bx	lr

08002b3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b40:	bf00      	nop
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bc80      	pop	{r7}
 8002b46:	4770      	bx	lr

08002b48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b4c:	f7fd fb44 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b50:	bf00      	nop
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002b58:	4b15      	ldr	r3, [pc, #84]	; (8002bb0 <SystemInit+0x5c>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a14      	ldr	r2, [pc, #80]	; (8002bb0 <SystemInit+0x5c>)
 8002b5e:	f043 0301 	orr.w	r3, r3, #1
 8002b62:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002b64:	4b12      	ldr	r3, [pc, #72]	; (8002bb0 <SystemInit+0x5c>)
 8002b66:	685a      	ldr	r2, [r3, #4]
 8002b68:	4911      	ldr	r1, [pc, #68]	; (8002bb0 <SystemInit+0x5c>)
 8002b6a:	4b12      	ldr	r3, [pc, #72]	; (8002bb4 <SystemInit+0x60>)
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002b70:	4b0f      	ldr	r3, [pc, #60]	; (8002bb0 <SystemInit+0x5c>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a0e      	ldr	r2, [pc, #56]	; (8002bb0 <SystemInit+0x5c>)
 8002b76:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002b7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b7e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002b80:	4b0b      	ldr	r3, [pc, #44]	; (8002bb0 <SystemInit+0x5c>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a0a      	ldr	r2, [pc, #40]	; (8002bb0 <SystemInit+0x5c>)
 8002b86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b8a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002b8c:	4b08      	ldr	r3, [pc, #32]	; (8002bb0 <SystemInit+0x5c>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	4a07      	ldr	r2, [pc, #28]	; (8002bb0 <SystemInit+0x5c>)
 8002b92:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002b96:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002b98:	4b05      	ldr	r3, [pc, #20]	; (8002bb0 <SystemInit+0x5c>)
 8002b9a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002b9e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002ba0:	4b05      	ldr	r3, [pc, #20]	; (8002bb8 <SystemInit+0x64>)
 8002ba2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ba6:	609a      	str	r2, [r3, #8]
#endif 
}
 8002ba8:	bf00      	nop
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bc80      	pop	{r7}
 8002bae:	4770      	bx	lr
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	f8ff0000 	.word	0xf8ff0000
 8002bb8:	e000ed00 	.word	0xe000ed00

08002bbc <ReceivePacket>:
  * @param  timeout
  * @retval HAL_OK: normally return
  *         HAL_BUSY: abort by user
  */
static HAL_StatusTypeDef ReceivePacket(uint8_t *p_data, uint32_t *p_length, uint32_t timeout)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b088      	sub	sp, #32
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
  uint32_t crc;
  uint32_t packet_size = 0;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef status;
  uint8_t char1;

  *p_length = 0;
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	601a      	str	r2, [r3, #0]
  status = HAL_UART_Receive(&UartHandle, &char1, 1, timeout);
 8002bd2:	f107 0113 	add.w	r1, r7, #19
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	4844      	ldr	r0, [pc, #272]	; (8002cec <ReceivePacket+0x130>)
 8002bdc:	f7fe ffe6 	bl	8001bac <HAL_UART_Receive>
 8002be0:	4603      	mov	r3, r0
 8002be2:	76fb      	strb	r3, [r7, #27]

  if (status == HAL_OK)
 8002be4:	7efb      	ldrb	r3, [r7, #27]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d177      	bne.n	8002cda <ReceivePacket+0x11e>
  {
    switch (char1)
 8002bea:	7cfb      	ldrb	r3, [r7, #19]
 8002bec:	2b04      	cmp	r3, #4
 8002bee:	d02d      	beq.n	8002c4c <ReceivePacket+0x90>
 8002bf0:	2b04      	cmp	r3, #4
 8002bf2:	dc04      	bgt.n	8002bfe <ReceivePacket+0x42>
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d009      	beq.n	8002c0c <ReceivePacket+0x50>
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d00a      	beq.n	8002c12 <ReceivePacket+0x56>
 8002bfc:	e023      	b.n	8002c46 <ReceivePacket+0x8a>
 8002bfe:	2b41      	cmp	r3, #65	; 0x41
 8002c00:	d01e      	beq.n	8002c40 <ReceivePacket+0x84>
 8002c02:	2b61      	cmp	r3, #97	; 0x61
 8002c04:	d01c      	beq.n	8002c40 <ReceivePacket+0x84>
 8002c06:	2b18      	cmp	r3, #24
 8002c08:	d007      	beq.n	8002c1a <ReceivePacket+0x5e>
 8002c0a:	e01c      	b.n	8002c46 <ReceivePacket+0x8a>
    {
      case SOH:
        packet_size = PACKET_SIZE;
 8002c0c:	2380      	movs	r3, #128	; 0x80
 8002c0e:	61fb      	str	r3, [r7, #28]
        break;
 8002c10:	e01d      	b.n	8002c4e <ReceivePacket+0x92>
      case STX:
        packet_size = PACKET_1K_SIZE;
 8002c12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c16:	61fb      	str	r3, [r7, #28]
        break;
 8002c18:	e019      	b.n	8002c4e <ReceivePacket+0x92>
      case EOT:
        break;
      case CA:
        if ((HAL_UART_Receive(&UartHandle, &char1, 1, timeout) == HAL_OK) && (char1 == CA))
 8002c1a:	f107 0113 	add.w	r1, r7, #19
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2201      	movs	r2, #1
 8002c22:	4832      	ldr	r0, [pc, #200]	; (8002cec <ReceivePacket+0x130>)
 8002c24:	f7fe ffc2 	bl	8001bac <HAL_UART_Receive>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d105      	bne.n	8002c3a <ReceivePacket+0x7e>
 8002c2e:	7cfb      	ldrb	r3, [r7, #19]
 8002c30:	2b18      	cmp	r3, #24
 8002c32:	d102      	bne.n	8002c3a <ReceivePacket+0x7e>
        {
          packet_size = 2;
 8002c34:	2302      	movs	r3, #2
 8002c36:	61fb      	str	r3, [r7, #28]
        }
        else
        {
          status = HAL_ERROR;
        }
        break;
 8002c38:	e009      	b.n	8002c4e <ReceivePacket+0x92>
          status = HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	76fb      	strb	r3, [r7, #27]
        break;
 8002c3e:	e006      	b.n	8002c4e <ReceivePacket+0x92>
      case ABORT1:
      case ABORT2:
        status = HAL_BUSY;
 8002c40:	2302      	movs	r3, #2
 8002c42:	76fb      	strb	r3, [r7, #27]
        break;
 8002c44:	e003      	b.n	8002c4e <ReceivePacket+0x92>
      default:
        status = HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	76fb      	strb	r3, [r7, #27]
        break;
 8002c4a:	e000      	b.n	8002c4e <ReceivePacket+0x92>
        break;
 8002c4c:	bf00      	nop
    }
    *p_data = char1;
 8002c4e:	7cfa      	ldrb	r2, [r7, #19]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	701a      	strb	r2, [r3, #0]

    if (packet_size >= PACKET_SIZE )
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	2b7f      	cmp	r3, #127	; 0x7f
 8002c58:	d93f      	bls.n	8002cda <ReceivePacket+0x11e>
    {
      status = HAL_UART_Receive(&UartHandle, &p_data[PACKET_NUMBER_INDEX], packet_size + PACKET_OVERHEAD_SIZE, timeout);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	1c99      	adds	r1, r3, #2
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	3304      	adds	r3, #4
 8002c64:	b29a      	uxth	r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4820      	ldr	r0, [pc, #128]	; (8002cec <ReceivePacket+0x130>)
 8002c6a:	f7fe ff9f 	bl	8001bac <HAL_UART_Receive>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	76fb      	strb	r3, [r7, #27]

      /* Simple packet sanity check */
      if (status == HAL_OK )
 8002c72:	7efb      	ldrb	r3, [r7, #27]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d12e      	bne.n	8002cd6 <ReceivePacket+0x11a>
      {
        if (p_data[PACKET_NUMBER_INDEX] != ((p_data[PACKET_CNUMBER_INDEX]) ^ NEGATIVE_BYTE))
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	3302      	adds	r3, #2
 8002c7c:	781a      	ldrb	r2, [r3, #0]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	3303      	adds	r3, #3
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	43db      	mvns	r3, r3
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d004      	beq.n	8002c96 <ReceivePacket+0xda>
        {
          packet_size = 0;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	61fb      	str	r3, [r7, #28]
          status = HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	76fb      	strb	r3, [r7, #27]
 8002c94:	e021      	b.n	8002cda <ReceivePacket+0x11e>
        }
        else
        {
          /* Check packet CRC */
          crc = p_data[ packet_size + PACKET_DATA_INDEX ] << 8;
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	3304      	adds	r3, #4
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	021b      	lsls	r3, r3, #8
 8002ca2:	617b      	str	r3, [r7, #20]
          crc += p_data[ packet_size + PACKET_DATA_INDEX + 1 ];
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	3305      	adds	r3, #5
 8002ca8:	68fa      	ldr	r2, [r7, #12]
 8002caa:	4413      	add	r3, r2
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	461a      	mov	r2, r3
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	617b      	str	r3, [r7, #20]
          if (Cal_CRC16(&p_data[PACKET_DATA_INDEX], packet_size) != crc )
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	3304      	adds	r3, #4
 8002cba:	69f9      	ldr	r1, [r7, #28]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f000 f90a 	bl	8002ed6 <Cal_CRC16>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d006      	beq.n	8002cda <ReceivePacket+0x11e>
          {
            packet_size = 0;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	61fb      	str	r3, [r7, #28]
            status = HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	76fb      	strb	r3, [r7, #27]
 8002cd4:	e001      	b.n	8002cda <ReceivePacket+0x11e>
          }
        }
      }
      else
      {
        packet_size = 0;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	61fb      	str	r3, [r7, #28]
      }
    }
  }
  *p_length = packet_size;
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	69fa      	ldr	r2, [r7, #28]
 8002cde:	601a      	str	r2, [r3, #0]
  return status;
 8002ce0:	7efb      	ldrb	r3, [r7, #27]
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3720      	adds	r7, #32
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	20000060 	.word	0x20000060

08002cf0 <PrepareIntialPacket>:
  * @param  p_file_name: name of the file to be sent
  * @param  length: length of the file to be sent in bytes
  * @retval None
  */
static void PrepareIntialPacket(uint8_t *p_data, const uint8_t *p_file_name, uint32_t length)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b08a      	sub	sp, #40	; 0x28
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
  uint32_t i, j = 0;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	623b      	str	r3, [r7, #32]
  uint8_t astring[10];

  /* first 3 bytes are constant */
  p_data[PACKET_START_INDEX] = SOH;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	3301      	adds	r3, #1
 8002d04:	2201      	movs	r2, #1
 8002d06:	701a      	strb	r2, [r3, #0]
  p_data[PACKET_NUMBER_INDEX] = 0x00;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	3302      	adds	r3, #2
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	701a      	strb	r2, [r3, #0]
  p_data[PACKET_CNUMBER_INDEX] = 0xff;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	3303      	adds	r3, #3
 8002d14:	22ff      	movs	r2, #255	; 0xff
 8002d16:	701a      	strb	r2, [r3, #0]

  /* Filename written */
  for (i = 0; (p_file_name[i] != '\0') && (i < FILE_NAME_LENGTH); i++)
 8002d18:	2300      	movs	r3, #0
 8002d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d1c:	e00b      	b.n	8002d36 <PrepareIntialPacket+0x46>
  {
    p_data[i + PACKET_DATA_INDEX] = p_file_name[i];
 8002d1e:	68ba      	ldr	r2, [r7, #8]
 8002d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d22:	441a      	add	r2, r3
 8002d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d26:	3304      	adds	r3, #4
 8002d28:	68f9      	ldr	r1, [r7, #12]
 8002d2a:	440b      	add	r3, r1
 8002d2c:	7812      	ldrb	r2, [r2, #0]
 8002d2e:	701a      	strb	r2, [r3, #0]
  for (i = 0; (p_file_name[i] != '\0') && (i < FILE_NAME_LENGTH); i++)
 8002d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d32:	3301      	adds	r3, #1
 8002d34:	627b      	str	r3, [r7, #36]	; 0x24
 8002d36:	68ba      	ldr	r2, [r7, #8]
 8002d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3a:	4413      	add	r3, r2
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d002      	beq.n	8002d48 <PrepareIntialPacket+0x58>
 8002d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d44:	2b3f      	cmp	r3, #63	; 0x3f
 8002d46:	d9ea      	bls.n	8002d1e <PrepareIntialPacket+0x2e>
  }

  p_data[i + PACKET_DATA_INDEX] = 0x00;
 8002d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4a:	3304      	adds	r3, #4
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	4413      	add	r3, r2
 8002d50:	2200      	movs	r2, #0
 8002d52:	701a      	strb	r2, [r3, #0]

  /* file size written */
  Int2Str (astring, length);
 8002d54:	f107 0314 	add.w	r3, r7, #20
 8002d58:	6879      	ldr	r1, [r7, #4]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7ff f92e 	bl	8001fbc <Int2Str>
  i = i + PACKET_DATA_INDEX + 1;
 8002d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d62:	3305      	adds	r3, #5
 8002d64:	627b      	str	r3, [r7, #36]	; 0x24
  while (astring[j] != '\0')
 8002d66:	e00d      	b.n	8002d84 <PrepareIntialPacket+0x94>
  {
    p_data[i++] = astring[j++];
 8002d68:	6a3b      	ldr	r3, [r7, #32]
 8002d6a:	1c5a      	adds	r2, r3, #1
 8002d6c:	623a      	str	r2, [r7, #32]
 8002d6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d70:	1c51      	adds	r1, r2, #1
 8002d72:	6279      	str	r1, [r7, #36]	; 0x24
 8002d74:	68f9      	ldr	r1, [r7, #12]
 8002d76:	440a      	add	r2, r1
 8002d78:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002d7c:	440b      	add	r3, r1
 8002d7e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8002d82:	7013      	strb	r3, [r2, #0]
  while (astring[j] != '\0')
 8002d84:	f107 0214 	add.w	r2, r7, #20
 8002d88:	6a3b      	ldr	r3, [r7, #32]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1ea      	bne.n	8002d68 <PrepareIntialPacket+0x78>
  }

  /* padding with zeros */
  for (j = i; j < PACKET_SIZE + PACKET_DATA_INDEX; j++)
 8002d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d94:	623b      	str	r3, [r7, #32]
 8002d96:	e007      	b.n	8002da8 <PrepareIntialPacket+0xb8>
  {
    p_data[j] = 0;
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	6a3b      	ldr	r3, [r7, #32]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	2200      	movs	r2, #0
 8002da0:	701a      	strb	r2, [r3, #0]
  for (j = i; j < PACKET_SIZE + PACKET_DATA_INDEX; j++)
 8002da2:	6a3b      	ldr	r3, [r7, #32]
 8002da4:	3301      	adds	r3, #1
 8002da6:	623b      	str	r3, [r7, #32]
 8002da8:	6a3b      	ldr	r3, [r7, #32]
 8002daa:	2b83      	cmp	r3, #131	; 0x83
 8002dac:	d9f4      	bls.n	8002d98 <PrepareIntialPacket+0xa8>
  }
}
 8002dae:	bf00      	nop
 8002db0:	3728      	adds	r7, #40	; 0x28
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <PreparePacket>:
  * @param  pkt_nr: number of the packet
  * @param  size_blk: length of the block to be sent in bytes
  * @retval None
  */
static void PreparePacket(uint8_t *p_source, uint8_t *p_packet, uint8_t pkt_nr, uint32_t size_blk)
{
 8002db6:	b480      	push	{r7}
 8002db8:	b089      	sub	sp, #36	; 0x24
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	60f8      	str	r0, [r7, #12]
 8002dbe:	60b9      	str	r1, [r7, #8]
 8002dc0:	603b      	str	r3, [r7, #0]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_record;
  uint32_t i, size, packet_size;

  /* Make first three packet */
  packet_size = size_blk >= PACKET_1K_SIZE ? PACKET_1K_SIZE : PACKET_SIZE;
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dcc:	d302      	bcc.n	8002dd4 <PreparePacket+0x1e>
 8002dce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dd2:	e000      	b.n	8002dd6 <PreparePacket+0x20>
 8002dd4:	2380      	movs	r3, #128	; 0x80
 8002dd6:	617b      	str	r3, [r7, #20]
  size = size_blk < packet_size ? size_blk : packet_size;
 8002dd8:	697a      	ldr	r2, [r7, #20]
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	bf28      	it	cs
 8002de0:	4613      	movcs	r3, r2
 8002de2:	613b      	str	r3, [r7, #16]
  if (packet_size == PACKET_1K_SIZE)
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dea:	d104      	bne.n	8002df6 <PreparePacket+0x40>
  {
    p_packet[PACKET_START_INDEX] = STX;
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	3301      	adds	r3, #1
 8002df0:	2202      	movs	r2, #2
 8002df2:	701a      	strb	r2, [r3, #0]
 8002df4:	e003      	b.n	8002dfe <PreparePacket+0x48>
  }
  else
  {
    p_packet[PACKET_START_INDEX] = SOH;
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	3301      	adds	r3, #1
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	701a      	strb	r2, [r3, #0]
  }
  p_packet[PACKET_NUMBER_INDEX] = pkt_nr;
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	3302      	adds	r3, #2
 8002e02:	79fa      	ldrb	r2, [r7, #7]
 8002e04:	701a      	strb	r2, [r3, #0]
  p_packet[PACKET_CNUMBER_INDEX] = (~pkt_nr);
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	3303      	adds	r3, #3
 8002e0a:	79fa      	ldrb	r2, [r7, #7]
 8002e0c:	43d2      	mvns	r2, r2
 8002e0e:	b2d2      	uxtb	r2, r2
 8002e10:	701a      	strb	r2, [r3, #0]
  p_record = p_source;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	61fb      	str	r3, [r7, #28]

  /* Filename packet has valid data */
  for (i = PACKET_DATA_INDEX; i < size + PACKET_DATA_INDEX;i++)
 8002e16:	2304      	movs	r3, #4
 8002e18:	61bb      	str	r3, [r7, #24]
 8002e1a:	e00a      	b.n	8002e32 <PreparePacket+0x7c>
  {
    p_packet[i] = *p_record++;
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	1c5a      	adds	r2, r3, #1
 8002e20:	61fa      	str	r2, [r7, #28]
 8002e22:	68b9      	ldr	r1, [r7, #8]
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	440a      	add	r2, r1
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	7013      	strb	r3, [r2, #0]
  for (i = PACKET_DATA_INDEX; i < size + PACKET_DATA_INDEX;i++)
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	3301      	adds	r3, #1
 8002e30:	61bb      	str	r3, [r7, #24]
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	3304      	adds	r3, #4
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d3ef      	bcc.n	8002e1c <PreparePacket+0x66>
  }
  if ( size  <= packet_size)
 8002e3c:	693a      	ldr	r2, [r7, #16]
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d810      	bhi.n	8002e66 <PreparePacket+0xb0>
  {
    for (i = size + PACKET_DATA_INDEX; i < packet_size + PACKET_DATA_INDEX; i++)
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	3304      	adds	r3, #4
 8002e48:	61bb      	str	r3, [r7, #24]
 8002e4a:	e007      	b.n	8002e5c <PreparePacket+0xa6>
    {
      p_packet[i] = 0x1A; /* EOF (0x1A) or 0x00 */
 8002e4c:	68ba      	ldr	r2, [r7, #8]
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	4413      	add	r3, r2
 8002e52:	221a      	movs	r2, #26
 8002e54:	701a      	strb	r2, [r3, #0]
    for (i = size + PACKET_DATA_INDEX; i < packet_size + PACKET_DATA_INDEX; i++)
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	3301      	adds	r3, #1
 8002e5a:	61bb      	str	r3, [r7, #24]
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	3304      	adds	r3, #4
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d3f2      	bcc.n	8002e4c <PreparePacket+0x96>
    }
  }
}
 8002e66:	bf00      	nop
 8002e68:	3724      	adds	r7, #36	; 0x24
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bc80      	pop	{r7}
 8002e6e:	4770      	bx	lr

08002e70 <UpdateCRC16>:
  * @param  crc_in input value 
  * @param  input byte
  * @retval None
  */
uint16_t UpdateCRC16(uint16_t crc_in, uint8_t byte)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	4603      	mov	r3, r0
 8002e78:	460a      	mov	r2, r1
 8002e7a:	80fb      	strh	r3, [r7, #6]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	717b      	strb	r3, [r7, #5]
  uint32_t crc = crc_in;
 8002e80:	88fb      	ldrh	r3, [r7, #6]
 8002e82:	60fb      	str	r3, [r7, #12]
  uint32_t in = byte | 0x100;
 8002e84:	797b      	ldrb	r3, [r7, #5]
 8002e86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e8a:	60bb      	str	r3, [r7, #8]

  do
  {
    crc <<= 1;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	60fb      	str	r3, [r7, #12]
    in <<= 1;
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	60bb      	str	r3, [r7, #8]
    if(in & 0x100)
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d002      	beq.n	8002ea8 <UpdateCRC16+0x38>
      ++crc;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	60fb      	str	r3, [r7, #12]
    if(crc & 0x10000)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d005      	beq.n	8002ebe <UpdateCRC16+0x4e>
      crc ^= 0x1021;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8002eb8:	f083 0301 	eor.w	r3, r3, #1
 8002ebc:	60fb      	str	r3, [r7, #12]
  }
  
  while(!(in & 0x10000));
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d0e1      	beq.n	8002e8c <UpdateCRC16+0x1c>

  return crc & 0xffffu;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	b29b      	uxth	r3, r3
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3714      	adds	r7, #20
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bc80      	pop	{r7}
 8002ed4:	4770      	bx	lr

08002ed6 <Cal_CRC16>:
  * @param  data
  * @param  length
  * @retval None
  */
uint16_t Cal_CRC16(const uint8_t* p_data, uint32_t size)
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b084      	sub	sp, #16
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
 8002ede:	6039      	str	r1, [r7, #0]
  uint32_t crc = 0;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	60fb      	str	r3, [r7, #12]
  const uint8_t* dataEnd = p_data+size;
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	4413      	add	r3, r2
 8002eea:	60bb      	str	r3, [r7, #8]

  while(p_data < dataEnd)
 8002eec:	e00a      	b.n	8002f04 <Cal_CRC16+0x2e>
    crc = UpdateCRC16(crc, *p_data++);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	b298      	uxth	r0, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	1c5a      	adds	r2, r3, #1
 8002ef6:	607a      	str	r2, [r7, #4]
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	4619      	mov	r1, r3
 8002efc:	f7ff ffb8 	bl	8002e70 <UpdateCRC16>
 8002f00:	4603      	mov	r3, r0
 8002f02:	60fb      	str	r3, [r7, #12]
  while(p_data < dataEnd)
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d3f0      	bcc.n	8002eee <Cal_CRC16+0x18>
 
  crc = UpdateCRC16(crc, 0);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	2100      	movs	r1, #0
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7ff ffac 	bl	8002e70 <UpdateCRC16>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	60fb      	str	r3, [r7, #12]
  crc = UpdateCRC16(crc, 0);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	2100      	movs	r1, #0
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7ff ffa4 	bl	8002e70 <UpdateCRC16>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	60fb      	str	r3, [r7, #12]

  return crc&0xffffu;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	b29b      	uxth	r3, r3
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <Ymodem_Receive>:
  * @brief  Receive a file using the ymodem protocol with CRC16.
  * @param  p_size The size of the file.
  * @retval COM_StatusTypeDef result of reception/programming
  */
COM_StatusTypeDef Ymodem_Receive ( uint32_t *p_size )
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b092      	sub	sp, #72	; 0x48
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t i, packet_length, session_done = 0, file_done, errors = 0, session_begin = 0;
 8002f40:	2300      	movs	r3, #0
 8002f42:	643b      	str	r3, [r7, #64]	; 0x40
 8002f44:	2300      	movs	r3, #0
 8002f46:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f48:	2300      	movs	r3, #0
 8002f4a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t flashdestination, ramsource, filesize;
  uint8_t *file_ptr;
  uint8_t file_size[FILE_SIZE_LENGTH], tmp, packets_received;
  COM_StatusTypeDef result = COM_OK;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

  /* Initialize flashdestination variable */
  flashdestination = APPLICATION_ADDRESS;
 8002f52:	4b86      	ldr	r3, [pc, #536]	; (800316c <Ymodem_Receive+0x234>)
 8002f54:	633b      	str	r3, [r7, #48]	; 0x30

  while ((session_done == 0) && (result == COM_OK))
 8002f56:	e0fb      	b.n	8003150 <Ymodem_Receive+0x218>
  {
    packets_received = 0;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    file_done = 0;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	63fb      	str	r3, [r7, #60]	; 0x3c
    while ((file_done == 0) && (result == COM_OK))
 8002f62:	e0ed      	b.n	8003140 <Ymodem_Receive+0x208>
    {
      switch (ReceivePacket(aPacketData, &packet_length, DOWNLOAD_TIMEOUT))
 8002f64:	f107 0320 	add.w	r3, r7, #32
 8002f68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	4880      	ldr	r0, [pc, #512]	; (8003170 <Ymodem_Receive+0x238>)
 8002f70:	f7ff fe24 	bl	8002bbc <ReceivePacket>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d003      	beq.n	8002f82 <Ymodem_Receive+0x4a>
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	f000 80c2 	beq.w	8003104 <Ymodem_Receive+0x1cc>
 8002f80:	e0ca      	b.n	8003118 <Ymodem_Receive+0x1e0>
      {
        case HAL_OK:
          errors = 0;
 8002f82:	2300      	movs	r3, #0
 8002f84:	63bb      	str	r3, [r7, #56]	; 0x38
          switch (packet_length)
 8002f86:	6a3b      	ldr	r3, [r7, #32]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d008      	beq.n	8002f9e <Ymodem_Receive+0x66>
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d10c      	bne.n	8002faa <Ymodem_Receive+0x72>
          {
            case 2:
              /* Abort by sender */
              Serial_PutByte(ACK);
 8002f90:	2006      	movs	r0, #6
 8002f92:	f7ff f977 	bl	8002284 <Serial_PutByte>
              result = COM_ABORT;
 8002f96:	2302      	movs	r3, #2
 8002f98:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
              break;
 8002f9c:	e0b1      	b.n	8003102 <Ymodem_Receive+0x1ca>
            case 0:
              /* End of transmission */
              Serial_PutByte(ACK);
 8002f9e:	2006      	movs	r0, #6
 8002fa0:	f7ff f970 	bl	8002284 <Serial_PutByte>
              file_done = 1;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
              break;
 8002fa8:	e0ab      	b.n	8003102 <Ymodem_Receive+0x1ca>
            default:
              /* Normal packet */
              if (aPacketData[PACKET_NUMBER_INDEX] != packets_received)
 8002faa:	4b71      	ldr	r3, [pc, #452]	; (8003170 <Ymodem_Receive+0x238>)
 8002fac:	789b      	ldrb	r3, [r3, #2]
 8002fae:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d003      	beq.n	8002fbe <Ymodem_Receive+0x86>
              {
                Serial_PutByte(NAK);
 8002fb6:	2015      	movs	r0, #21
 8002fb8:	f7ff f964 	bl	8002284 <Serial_PutByte>
                  }
                }
                packets_received ++;
                session_begin = 1;
              }
              break;
 8002fbc:	e0a0      	b.n	8003100 <Ymodem_Receive+0x1c8>
                if (packets_received == 0)
 8002fbe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d178      	bne.n	80030b8 <Ymodem_Receive+0x180>
                  if (aPacketData[PACKET_DATA_INDEX] != 0)
 8002fc6:	4b6a      	ldr	r3, [pc, #424]	; (8003170 <Ymodem_Receive+0x238>)
 8002fc8:	791b      	ldrb	r3, [r3, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d06c      	beq.n	80030a8 <Ymodem_Receive+0x170>
                    i = 0;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	647b      	str	r3, [r7, #68]	; 0x44
                    file_ptr = aPacketData + PACKET_DATA_INDEX;
 8002fd2:	4b68      	ldr	r3, [pc, #416]	; (8003174 <Ymodem_Receive+0x23c>)
 8002fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
                    while ( (*file_ptr != 0) && (i < FILE_NAME_LENGTH))
 8002fd6:	e008      	b.n	8002fea <Ymodem_Receive+0xb2>
                      aFileName[i++] = *file_ptr++;
 8002fd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fda:	1c53      	adds	r3, r2, #1
 8002fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fe0:	1c59      	adds	r1, r3, #1
 8002fe2:	6479      	str	r1, [r7, #68]	; 0x44
 8002fe4:	7811      	ldrb	r1, [r2, #0]
 8002fe6:	4a64      	ldr	r2, [pc, #400]	; (8003178 <Ymodem_Receive+0x240>)
 8002fe8:	54d1      	strb	r1, [r2, r3]
                    while ( (*file_ptr != 0) && (i < FILE_NAME_LENGTH))
 8002fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d002      	beq.n	8002ff8 <Ymodem_Receive+0xc0>
 8002ff2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ff4:	2b3f      	cmp	r3, #63	; 0x3f
 8002ff6:	d9ef      	bls.n	8002fd8 <Ymodem_Receive+0xa0>
                    aFileName[i++] = '\0';
 8002ff8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ffa:	1c5a      	adds	r2, r3, #1
 8002ffc:	647a      	str	r2, [r7, #68]	; 0x44
 8002ffe:	4a5e      	ldr	r2, [pc, #376]	; (8003178 <Ymodem_Receive+0x240>)
 8003000:	2100      	movs	r1, #0
 8003002:	54d1      	strb	r1, [r2, r3]
                    i = 0;
 8003004:	2300      	movs	r3, #0
 8003006:	647b      	str	r3, [r7, #68]	; 0x44
                    file_ptr ++;
 8003008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800300a:	3301      	adds	r3, #1
 800300c:	62fb      	str	r3, [r7, #44]	; 0x2c
                    while ( (*file_ptr != ' ') && (i < FILE_SIZE_LENGTH))
 800300e:	e00b      	b.n	8003028 <Ymodem_Receive+0xf0>
                      file_size[i++] = *file_ptr++;
 8003010:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003012:	1c53      	adds	r3, r2, #1
 8003014:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003016:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003018:	1c59      	adds	r1, r3, #1
 800301a:	6479      	str	r1, [r7, #68]	; 0x44
 800301c:	7812      	ldrb	r2, [r2, #0]
 800301e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8003022:	440b      	add	r3, r1
 8003024:	f803 2c3c 	strb.w	r2, [r3, #-60]
                    while ( (*file_ptr != ' ') && (i < FILE_SIZE_LENGTH))
 8003028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	2b20      	cmp	r3, #32
 800302e:	d002      	beq.n	8003036 <Ymodem_Receive+0xfe>
 8003030:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003032:	2b0f      	cmp	r3, #15
 8003034:	d9ec      	bls.n	8003010 <Ymodem_Receive+0xd8>
                    file_size[i++] = '\0';
 8003036:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003038:	1c5a      	adds	r2, r3, #1
 800303a:	647a      	str	r2, [r7, #68]	; 0x44
 800303c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003040:	4413      	add	r3, r2
 8003042:	2200      	movs	r2, #0
 8003044:	f803 2c3c 	strb.w	r2, [r3, #-60]
                    Str2Int(file_size, &filesize);
 8003048:	f107 021c 	add.w	r2, r7, #28
 800304c:	f107 030c 	add.w	r3, r7, #12
 8003050:	4611      	mov	r1, r2
 8003052:	4618      	mov	r0, r3
 8003054:	f7ff f806 	bl	8002064 <Str2Int>
                    if (*p_size > (USER_FLASH_SIZE + 1))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f243 0201 	movw	r2, #12289	; 0x3001
 8003060:	4293      	cmp	r3, r2
 8003062:	d914      	bls.n	800308e <Ymodem_Receive+0x156>
                      tmp = CA;
 8003064:	2318      	movs	r3, #24
 8003066:	72fb      	strb	r3, [r7, #11]
                      HAL_UART_Transmit(&UartHandle, &tmp, 1, NAK_TIMEOUT);
 8003068:	f107 010b 	add.w	r1, r7, #11
 800306c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003070:	2201      	movs	r2, #1
 8003072:	4842      	ldr	r0, [pc, #264]	; (800317c <Ymodem_Receive+0x244>)
 8003074:	f7fe fd01 	bl	8001a7a <HAL_UART_Transmit>
                      HAL_UART_Transmit(&UartHandle, &tmp, 1, NAK_TIMEOUT);
 8003078:	f107 010b 	add.w	r1, r7, #11
 800307c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003080:	2201      	movs	r2, #1
 8003082:	483e      	ldr	r0, [pc, #248]	; (800317c <Ymodem_Receive+0x244>)
 8003084:	f7fe fcf9 	bl	8001a7a <HAL_UART_Transmit>
                      result = COM_LIMIT;
 8003088:	2305      	movs	r3, #5
 800308a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
                    FLASH_If_Erase(APPLICATION_ADDRESS);
 800308e:	4837      	ldr	r0, [pc, #220]	; (800316c <Ymodem_Receive+0x234>)
 8003090:	f7ff f922 	bl	80022d8 <FLASH_If_Erase>
                    *p_size = filesize;
 8003094:	69fa      	ldr	r2, [r7, #28]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	601a      	str	r2, [r3, #0]
                    Serial_PutByte(ACK);
 800309a:	2006      	movs	r0, #6
 800309c:	f7ff f8f2 	bl	8002284 <Serial_PutByte>
                    Serial_PutByte(CRC16);
 80030a0:	2043      	movs	r0, #67	; 0x43
 80030a2:	f7ff f8ef 	bl	8002284 <Serial_PutByte>
 80030a6:	e024      	b.n	80030f2 <Ymodem_Receive+0x1ba>
                    Serial_PutByte(ACK);
 80030a8:	2006      	movs	r0, #6
 80030aa:	f7ff f8eb 	bl	8002284 <Serial_PutByte>
                    file_done = 1;
 80030ae:	2301      	movs	r3, #1
 80030b0:	63fb      	str	r3, [r7, #60]	; 0x3c
                    session_done = 1;
 80030b2:	2301      	movs	r3, #1
 80030b4:	643b      	str	r3, [r7, #64]	; 0x40
                    break;
 80030b6:	e024      	b.n	8003102 <Ymodem_Receive+0x1ca>
                  ramsource = (uint32_t) & aPacketData[PACKET_DATA_INDEX];
 80030b8:	4b2e      	ldr	r3, [pc, #184]	; (8003174 <Ymodem_Receive+0x23c>)
 80030ba:	627b      	str	r3, [r7, #36]	; 0x24
                  if (FLASH_If_Write(flashdestination, (uint32_t*) ramsource, packet_length/4) == FLASHIF_OK)                   
 80030bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030be:	6a3b      	ldr	r3, [r7, #32]
 80030c0:	089b      	lsrs	r3, r3, #2
 80030c2:	461a      	mov	r2, r3
 80030c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030c6:	f7ff f93b 	bl	8002340 <FLASH_If_Write>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d107      	bne.n	80030e0 <Ymodem_Receive+0x1a8>
                    flashdestination += packet_length;
 80030d0:	6a3b      	ldr	r3, [r7, #32]
 80030d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030d4:	4413      	add	r3, r2
 80030d6:	633b      	str	r3, [r7, #48]	; 0x30
                    Serial_PutByte(ACK);
 80030d8:	2006      	movs	r0, #6
 80030da:	f7ff f8d3 	bl	8002284 <Serial_PutByte>
 80030de:	e008      	b.n	80030f2 <Ymodem_Receive+0x1ba>
                    Serial_PutByte(CA);
 80030e0:	2018      	movs	r0, #24
 80030e2:	f7ff f8cf 	bl	8002284 <Serial_PutByte>
                    Serial_PutByte(CA);
 80030e6:	2018      	movs	r0, #24
 80030e8:	f7ff f8cc 	bl	8002284 <Serial_PutByte>
                    result = COM_DATA;
 80030ec:	2304      	movs	r3, #4
 80030ee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
                packets_received ++;
 80030f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80030f6:	3301      	adds	r3, #1
 80030f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                session_begin = 1;
 80030fc:	2301      	movs	r3, #1
 80030fe:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8003100:	bf00      	nop
          }
          break;
 8003102:	e01d      	b.n	8003140 <Ymodem_Receive+0x208>
        case HAL_BUSY: /* Abort actually */
          Serial_PutByte(CA);
 8003104:	2018      	movs	r0, #24
 8003106:	f7ff f8bd 	bl	8002284 <Serial_PutByte>
          Serial_PutByte(CA);
 800310a:	2018      	movs	r0, #24
 800310c:	f7ff f8ba 	bl	8002284 <Serial_PutByte>
          result = COM_ABORT;
 8003110:	2302      	movs	r3, #2
 8003112:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
          break;
 8003116:	e013      	b.n	8003140 <Ymodem_Receive+0x208>
        default:
          if (session_begin > 0)
 8003118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800311a:	2b00      	cmp	r3, #0
 800311c:	d002      	beq.n	8003124 <Ymodem_Receive+0x1ec>
          {
            errors ++;
 800311e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003120:	3301      	adds	r3, #1
 8003122:	63bb      	str	r3, [r7, #56]	; 0x38
          }
          if (errors > MAX_ERRORS)
 8003124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003126:	2b05      	cmp	r3, #5
 8003128:	d906      	bls.n	8003138 <Ymodem_Receive+0x200>
          {
            /* Abort communication */
            Serial_PutByte(CA);
 800312a:	2018      	movs	r0, #24
 800312c:	f7ff f8aa 	bl	8002284 <Serial_PutByte>
            Serial_PutByte(CA);
 8003130:	2018      	movs	r0, #24
 8003132:	f7ff f8a7 	bl	8002284 <Serial_PutByte>
 8003136:	e002      	b.n	800313e <Ymodem_Receive+0x206>
          }
          else
          {
            Serial_PutByte(CRC16); /* Ask for a packet */
 8003138:	2043      	movs	r0, #67	; 0x43
 800313a:	f7ff f8a3 	bl	8002284 <Serial_PutByte>
          }
          break;
 800313e:	bf00      	nop
    while ((file_done == 0) && (result == COM_OK))
 8003140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003142:	2b00      	cmp	r3, #0
 8003144:	d104      	bne.n	8003150 <Ymodem_Receive+0x218>
 8003146:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800314a:	2b00      	cmp	r3, #0
 800314c:	f43f af0a 	beq.w	8002f64 <Ymodem_Receive+0x2c>
  while ((session_done == 0) && (result == COM_OK))
 8003150:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003152:	2b00      	cmp	r3, #0
 8003154:	d104      	bne.n	8003160 <Ymodem_Receive+0x228>
 8003156:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800315a:	2b00      	cmp	r3, #0
 800315c:	f43f aefc 	beq.w	8002f58 <Ymodem_Receive+0x20>
      }
    }
  }
  return result;
 8003160:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003164:	4618      	mov	r0, r3
 8003166:	3748      	adds	r7, #72	; 0x48
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	08004000 	.word	0x08004000
 8003170:	20000168 	.word	0x20000168
 8003174:	2000016c 	.word	0x2000016c
 8003178:	20000128 	.word	0x20000128
 800317c:	20000060 	.word	0x20000060

08003180 <Ymodem_Transmit>:
  * @param  p_file_name: Name of the file sent
  * @param  file_size: Size of the transmission
  * @retval COM_StatusTypeDef result of the communication
  */
COM_StatusTypeDef Ymodem_Transmit (uint8_t *p_buf, const uint8_t *p_file_name, uint32_t file_size)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b08e      	sub	sp, #56	; 0x38
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
  uint32_t errors = 0, ack_recpt = 0, size = 0, pkt_size;
 800318c:	2300      	movs	r3, #0
 800318e:	637b      	str	r3, [r7, #52]	; 0x34
 8003190:	2300      	movs	r3, #0
 8003192:	633b      	str	r3, [r7, #48]	; 0x30
 8003194:	2300      	movs	r3, #0
 8003196:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t *p_buf_int;
  COM_StatusTypeDef result = COM_OK;
 8003198:	2300      	movs	r3, #0
 800319a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t blk_number = 1;
 800319e:	2301      	movs	r3, #1
 80031a0:	61fb      	str	r3, [r7, #28]
#else /* CRC16_F */   
  uint8_t temp_chksum;
#endif /* CRC16_F */  

  /* Prepare first block - header */
  PrepareIntialPacket(aPacketData, p_file_name, file_size);
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	68b9      	ldr	r1, [r7, #8]
 80031a6:	4895      	ldr	r0, [pc, #596]	; (80033fc <Ymodem_Transmit+0x27c>)
 80031a8:	f7ff fda2 	bl	8002cf0 <PrepareIntialPacket>

  while (( !ack_recpt ) && ( result == COM_OK ))
 80031ac:	e04c      	b.n	8003248 <Ymodem_Transmit+0xc8>
  {
    /* Send Packet */
    HAL_UART_Transmit(&UartHandle, &aPacketData[PACKET_START_INDEX], PACKET_SIZE + PACKET_HEADER_SIZE, NAK_TIMEOUT);
 80031ae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80031b2:	2283      	movs	r2, #131	; 0x83
 80031b4:	4992      	ldr	r1, [pc, #584]	; (8003400 <Ymodem_Transmit+0x280>)
 80031b6:	4893      	ldr	r0, [pc, #588]	; (8003404 <Ymodem_Transmit+0x284>)
 80031b8:	f7fe fc5f 	bl	8001a7a <HAL_UART_Transmit>

    /* Send CRC or Check Sum based on CRC16_F */
#ifdef CRC16_F    
    temp_crc = Cal_CRC16(&aPacketData[PACKET_DATA_INDEX], PACKET_SIZE);
 80031bc:	2180      	movs	r1, #128	; 0x80
 80031be:	4892      	ldr	r0, [pc, #584]	; (8003408 <Ymodem_Transmit+0x288>)
 80031c0:	f7ff fe89 	bl	8002ed6 <Cal_CRC16>
 80031c4:	4603      	mov	r3, r0
 80031c6:	617b      	str	r3, [r7, #20]
    Serial_PutByte(temp_crc >> 8);
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	0a1b      	lsrs	r3, r3, #8
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7ff f858 	bl	8002284 <Serial_PutByte>
    Serial_PutByte(temp_crc & 0xFF);
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	4618      	mov	r0, r3
 80031da:	f7ff f853 	bl	8002284 <Serial_PutByte>
    temp_chksum = CalcChecksum (&aPacketData[PACKET_DATA_INDEX], PACKET_SIZE);
    Serial_PutByte(temp_chksum);
#endif /* CRC16_F */

    /* Wait for Ack and 'C' */
    if (HAL_UART_Receive(&UartHandle, &a_rx_ctrl[0], 1, NAK_TIMEOUT) == HAL_OK)
 80031de:	f107 0110 	add.w	r1, r7, #16
 80031e2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80031e6:	2201      	movs	r2, #1
 80031e8:	4886      	ldr	r0, [pc, #536]	; (8003404 <Ymodem_Transmit+0x284>)
 80031ea:	f7fe fcdf 	bl	8001bac <HAL_UART_Receive>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d120      	bne.n	8003236 <Ymodem_Transmit+0xb6>
    {
      if (a_rx_ctrl[0] == ACK)
 80031f4:	7c3b      	ldrb	r3, [r7, #16]
 80031f6:	2b06      	cmp	r3, #6
 80031f8:	d102      	bne.n	8003200 <Ymodem_Transmit+0x80>
      {
        ack_recpt = 1;
 80031fa:	2301      	movs	r3, #1
 80031fc:	633b      	str	r3, [r7, #48]	; 0x30
 80031fe:	e01d      	b.n	800323c <Ymodem_Transmit+0xbc>
      }
      else if (a_rx_ctrl[0] == CA)
 8003200:	7c3b      	ldrb	r3, [r7, #16]
 8003202:	2b18      	cmp	r3, #24
 8003204:	d11a      	bne.n	800323c <Ymodem_Transmit+0xbc>
      {
        if ((HAL_UART_Receive(&UartHandle, &a_rx_ctrl[0], 1, NAK_TIMEOUT) == HAL_OK) && (a_rx_ctrl[0] == CA))
 8003206:	f107 0110 	add.w	r1, r7, #16
 800320a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800320e:	2201      	movs	r2, #1
 8003210:	487c      	ldr	r0, [pc, #496]	; (8003404 <Ymodem_Transmit+0x284>)
 8003212:	f7fe fccb 	bl	8001bac <HAL_UART_Receive>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d10f      	bne.n	800323c <Ymodem_Transmit+0xbc>
 800321c:	7c3b      	ldrb	r3, [r7, #16]
 800321e:	2b18      	cmp	r3, #24
 8003220:	d10c      	bne.n	800323c <Ymodem_Transmit+0xbc>
        {
          HAL_Delay( 2 );
 8003222:	2002      	movs	r0, #2
 8003224:	f7fc fff4 	bl	8000210 <HAL_Delay>
          __HAL_UART_FLUSH_DRREGISTER(&UartHandle);
 8003228:	4b76      	ldr	r3, [pc, #472]	; (8003404 <Ymodem_Transmit+0x284>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
          result = COM_ABORT;
 800322e:	2302      	movs	r3, #2
 8003230:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003234:	e002      	b.n	800323c <Ymodem_Transmit+0xbc>
        }
      }
    }
    else
    {
      errors++;
 8003236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003238:	3301      	adds	r3, #1
 800323a:	637b      	str	r3, [r7, #52]	; 0x34
    }
    if (errors >= MAX_ERRORS)
 800323c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800323e:	2b04      	cmp	r3, #4
 8003240:	d902      	bls.n	8003248 <Ymodem_Transmit+0xc8>
    {
      result = COM_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  while (( !ack_recpt ) && ( result == COM_OK ))
 8003248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800324a:	2b00      	cmp	r3, #0
 800324c:	d103      	bne.n	8003256 <Ymodem_Transmit+0xd6>
 800324e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003252:	2b00      	cmp	r3, #0
 8003254:	d0ab      	beq.n	80031ae <Ymodem_Transmit+0x2e>
    }
  }

  p_buf_int = p_buf;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	627b      	str	r3, [r7, #36]	; 0x24
  size = file_size;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Here 1024 bytes length is used to send the packets */
  while ((size) && (result == COM_OK ))
 800325e:	e070      	b.n	8003342 <Ymodem_Transmit+0x1c2>
  {
    /* Prepare next packet */
    PreparePacket(p_buf_int, aPacketData, blk_number, size);
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	b2da      	uxtb	r2, r3
 8003264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003266:	4965      	ldr	r1, [pc, #404]	; (80033fc <Ymodem_Transmit+0x27c>)
 8003268:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800326a:	f7ff fda4 	bl	8002db6 <PreparePacket>
    ack_recpt = 0;
 800326e:	2300      	movs	r3, #0
 8003270:	633b      	str	r3, [r7, #48]	; 0x30
    a_rx_ctrl[0] = 0;
 8003272:	2300      	movs	r3, #0
 8003274:	743b      	strb	r3, [r7, #16]
    errors = 0;
 8003276:	2300      	movs	r3, #0
 8003278:	637b      	str	r3, [r7, #52]	; 0x34

    /* Resend packet if NAK for few times else end of communication */
    while (( !ack_recpt ) && ( result == COM_OK ))
 800327a:	e05b      	b.n	8003334 <Ymodem_Transmit+0x1b4>
    {
      /* Send next packet */
      if (size >= PACKET_1K_SIZE)
 800327c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800327e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003282:	d303      	bcc.n	800328c <Ymodem_Transmit+0x10c>
      {
        pkt_size = PACKET_1K_SIZE;
 8003284:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003288:	62bb      	str	r3, [r7, #40]	; 0x28
 800328a:	e001      	b.n	8003290 <Ymodem_Transmit+0x110>
      }
      else
      {
        pkt_size = PACKET_SIZE;
 800328c:	2380      	movs	r3, #128	; 0x80
 800328e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      HAL_UART_Transmit(&UartHandle, &aPacketData[PACKET_START_INDEX], pkt_size + PACKET_HEADER_SIZE, NAK_TIMEOUT);
 8003290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003292:	b29b      	uxth	r3, r3
 8003294:	3303      	adds	r3, #3
 8003296:	b29a      	uxth	r2, r3
 8003298:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800329c:	4958      	ldr	r1, [pc, #352]	; (8003400 <Ymodem_Transmit+0x280>)
 800329e:	4859      	ldr	r0, [pc, #356]	; (8003404 <Ymodem_Transmit+0x284>)
 80032a0:	f7fe fbeb 	bl	8001a7a <HAL_UART_Transmit>
      
      /* Send CRC or Check Sum based on CRC16_F */
#ifdef CRC16_F    
      temp_crc = Cal_CRC16(&aPacketData[PACKET_DATA_INDEX], pkt_size);
 80032a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032a6:	4858      	ldr	r0, [pc, #352]	; (8003408 <Ymodem_Transmit+0x288>)
 80032a8:	f7ff fe15 	bl	8002ed6 <Cal_CRC16>
 80032ac:	4603      	mov	r3, r0
 80032ae:	617b      	str	r3, [r7, #20]
      Serial_PutByte(temp_crc >> 8);
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	0a1b      	lsrs	r3, r3, #8
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7fe ffe4 	bl	8002284 <Serial_PutByte>
      Serial_PutByte(temp_crc & 0xFF);
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7fe ffdf 	bl	8002284 <Serial_PutByte>
      temp_chksum = CalcChecksum (&aPacketData[PACKET_DATA_INDEX], pkt_size);
      Serial_PutByte(temp_chksum);
#endif /* CRC16_F */
      
      /* Wait for Ack */
      if ((HAL_UART_Receive(&UartHandle, &a_rx_ctrl[0], 1, NAK_TIMEOUT) == HAL_OK) && (a_rx_ctrl[0] == ACK))
 80032c6:	f107 0110 	add.w	r1, r7, #16
 80032ca:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80032ce:	2201      	movs	r2, #1
 80032d0:	484c      	ldr	r0, [pc, #304]	; (8003404 <Ymodem_Transmit+0x284>)
 80032d2:	f7fe fc6b 	bl	8001bac <HAL_UART_Receive>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d122      	bne.n	8003322 <Ymodem_Transmit+0x1a2>
 80032dc:	7c3b      	ldrb	r3, [r7, #16]
 80032de:	2b06      	cmp	r3, #6
 80032e0:	d11f      	bne.n	8003322 <Ymodem_Transmit+0x1a2>
      {
        ack_recpt = 1;
 80032e2:	2301      	movs	r3, #1
 80032e4:	633b      	str	r3, [r7, #48]	; 0x30
        if (size > pkt_size)
 80032e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d912      	bls.n	8003314 <Ymodem_Transmit+0x194>
        {
          p_buf_int += pkt_size;
 80032ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f2:	4413      	add	r3, r2
 80032f4:	627b      	str	r3, [r7, #36]	; 0x24
          size -= pkt_size;
 80032f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (blk_number == (USER_FLASH_SIZE / PACKET_1K_SIZE))
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	2b0c      	cmp	r3, #12
 8003302:	d103      	bne.n	800330c <Ymodem_Transmit+0x18c>
          {
            result = COM_LIMIT; /* boundary error */
 8003304:	2305      	movs	r3, #5
 8003306:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if (size > pkt_size)
 800330a:	e00d      	b.n	8003328 <Ymodem_Transmit+0x1a8>
          }
          else
          {
            blk_number++;
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	3301      	adds	r3, #1
 8003310:	61fb      	str	r3, [r7, #28]
        if (size > pkt_size)
 8003312:	e009      	b.n	8003328 <Ymodem_Transmit+0x1a8>
          }
        }
        else
        {
          p_buf_int += pkt_size;
 8003314:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003318:	4413      	add	r3, r2
 800331a:	627b      	str	r3, [r7, #36]	; 0x24
          size = 0;
 800331c:	2300      	movs	r3, #0
 800331e:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (size > pkt_size)
 8003320:	e002      	b.n	8003328 <Ymodem_Transmit+0x1a8>
        }
      }
      else
      {
        errors++;
 8003322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003324:	3301      	adds	r3, #1
 8003326:	637b      	str	r3, [r7, #52]	; 0x34
      }

      /* Resend packet if NAK  for a count of 10 else end of communication */
      if (errors >= MAX_ERRORS)
 8003328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800332a:	2b04      	cmp	r3, #4
 800332c:	d902      	bls.n	8003334 <Ymodem_Transmit+0x1b4>
      {
        result = COM_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while (( !ack_recpt ) && ( result == COM_OK ))
 8003334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003336:	2b00      	cmp	r3, #0
 8003338:	d103      	bne.n	8003342 <Ymodem_Transmit+0x1c2>
 800333a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800333e:	2b00      	cmp	r3, #0
 8003340:	d09c      	beq.n	800327c <Ymodem_Transmit+0xfc>
  while ((size) && (result == COM_OK ))
 8003342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003344:	2b00      	cmp	r3, #0
 8003346:	d003      	beq.n	8003350 <Ymodem_Transmit+0x1d0>
 8003348:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800334c:	2b00      	cmp	r3, #0
 800334e:	d087      	beq.n	8003260 <Ymodem_Transmit+0xe0>
      }
    }
  }

  /* Sending End Of Transmission char */
  ack_recpt = 0;
 8003350:	2300      	movs	r3, #0
 8003352:	633b      	str	r3, [r7, #48]	; 0x30
  a_rx_ctrl[0] = 0x00;
 8003354:	2300      	movs	r3, #0
 8003356:	743b      	strb	r3, [r7, #16]
  errors = 0;
 8003358:	2300      	movs	r3, #0
 800335a:	637b      	str	r3, [r7, #52]	; 0x34
  while (( !ack_recpt ) && ( result == COM_OK ))
 800335c:	e037      	b.n	80033ce <Ymodem_Transmit+0x24e>
  {
    Serial_PutByte(EOT);
 800335e:	2004      	movs	r0, #4
 8003360:	f7fe ff90 	bl	8002284 <Serial_PutByte>

    /* Wait for Ack */
    if (HAL_UART_Receive(&UartHandle, &a_rx_ctrl[0], 1, NAK_TIMEOUT) == HAL_OK)
 8003364:	f107 0110 	add.w	r1, r7, #16
 8003368:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800336c:	2201      	movs	r2, #1
 800336e:	4825      	ldr	r0, [pc, #148]	; (8003404 <Ymodem_Transmit+0x284>)
 8003370:	f7fe fc1c 	bl	8001bac <HAL_UART_Receive>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d120      	bne.n	80033bc <Ymodem_Transmit+0x23c>
    {
      if (a_rx_ctrl[0] == ACK)
 800337a:	7c3b      	ldrb	r3, [r7, #16]
 800337c:	2b06      	cmp	r3, #6
 800337e:	d102      	bne.n	8003386 <Ymodem_Transmit+0x206>
      {
        ack_recpt = 1;
 8003380:	2301      	movs	r3, #1
 8003382:	633b      	str	r3, [r7, #48]	; 0x30
 8003384:	e01d      	b.n	80033c2 <Ymodem_Transmit+0x242>
      }
      else if (a_rx_ctrl[0] == CA)
 8003386:	7c3b      	ldrb	r3, [r7, #16]
 8003388:	2b18      	cmp	r3, #24
 800338a:	d11a      	bne.n	80033c2 <Ymodem_Transmit+0x242>
      {
        if ((HAL_UART_Receive(&UartHandle, &a_rx_ctrl[0], 1, NAK_TIMEOUT) == HAL_OK) && (a_rx_ctrl[0] == CA))
 800338c:	f107 0110 	add.w	r1, r7, #16
 8003390:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003394:	2201      	movs	r2, #1
 8003396:	481b      	ldr	r0, [pc, #108]	; (8003404 <Ymodem_Transmit+0x284>)
 8003398:	f7fe fc08 	bl	8001bac <HAL_UART_Receive>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10f      	bne.n	80033c2 <Ymodem_Transmit+0x242>
 80033a2:	7c3b      	ldrb	r3, [r7, #16]
 80033a4:	2b18      	cmp	r3, #24
 80033a6:	d10c      	bne.n	80033c2 <Ymodem_Transmit+0x242>
        {
          HAL_Delay( 2 );
 80033a8:	2002      	movs	r0, #2
 80033aa:	f7fc ff31 	bl	8000210 <HAL_Delay>
          __HAL_UART_FLUSH_DRREGISTER(&UartHandle);
 80033ae:	4b15      	ldr	r3, [pc, #84]	; (8003404 <Ymodem_Transmit+0x284>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
          result = COM_ABORT;
 80033b4:	2302      	movs	r3, #2
 80033b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033ba:	e002      	b.n	80033c2 <Ymodem_Transmit+0x242>
        }
      }
    }
    else
    {
      errors++;
 80033bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033be:	3301      	adds	r3, #1
 80033c0:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if (errors >=  MAX_ERRORS)
 80033c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033c4:	2b04      	cmp	r3, #4
 80033c6:	d902      	bls.n	80033ce <Ymodem_Transmit+0x24e>
    {
      result = COM_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  while (( !ack_recpt ) && ( result == COM_OK ))
 80033ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d103      	bne.n	80033dc <Ymodem_Transmit+0x25c>
 80033d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d0c0      	beq.n	800335e <Ymodem_Transmit+0x1de>
    }
  }

  /* Empty packet sent - some terminal emulators need this to close session */
  if ( result == COM_OK )
 80033dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d14c      	bne.n	800347e <Ymodem_Transmit+0x2fe>
  {
    /* Preparing an empty packet */
    aPacketData[PACKET_START_INDEX] = SOH;
 80033e4:	4b05      	ldr	r3, [pc, #20]	; (80033fc <Ymodem_Transmit+0x27c>)
 80033e6:	2201      	movs	r2, #1
 80033e8:	705a      	strb	r2, [r3, #1]
    aPacketData[PACKET_NUMBER_INDEX] = 0;
 80033ea:	4b04      	ldr	r3, [pc, #16]	; (80033fc <Ymodem_Transmit+0x27c>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	709a      	strb	r2, [r3, #2]
    aPacketData[PACKET_CNUMBER_INDEX] = 0xFF;
 80033f0:	4b02      	ldr	r3, [pc, #8]	; (80033fc <Ymodem_Transmit+0x27c>)
 80033f2:	22ff      	movs	r2, #255	; 0xff
 80033f4:	70da      	strb	r2, [r3, #3]
    for (i = PACKET_DATA_INDEX; i < (PACKET_SIZE + PACKET_DATA_INDEX); i++)
 80033f6:	2304      	movs	r3, #4
 80033f8:	76fb      	strb	r3, [r7, #27]
 80033fa:	e00e      	b.n	800341a <Ymodem_Transmit+0x29a>
 80033fc:	20000168 	.word	0x20000168
 8003400:	20000169 	.word	0x20000169
 8003404:	20000060 	.word	0x20000060
 8003408:	2000016c 	.word	0x2000016c
    {
      aPacketData [i] = 0x00;
 800340c:	7efb      	ldrb	r3, [r7, #27]
 800340e:	4a1f      	ldr	r2, [pc, #124]	; (800348c <Ymodem_Transmit+0x30c>)
 8003410:	2100      	movs	r1, #0
 8003412:	54d1      	strb	r1, [r2, r3]
    for (i = PACKET_DATA_INDEX; i < (PACKET_SIZE + PACKET_DATA_INDEX); i++)
 8003414:	7efb      	ldrb	r3, [r7, #27]
 8003416:	3301      	adds	r3, #1
 8003418:	76fb      	strb	r3, [r7, #27]
 800341a:	7efb      	ldrb	r3, [r7, #27]
 800341c:	2b83      	cmp	r3, #131	; 0x83
 800341e:	d9f5      	bls.n	800340c <Ymodem_Transmit+0x28c>
    }

    /* Send Packet */
    HAL_UART_Transmit(&UartHandle, &aPacketData[PACKET_START_INDEX], PACKET_SIZE + PACKET_HEADER_SIZE, NAK_TIMEOUT);
 8003420:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003424:	2283      	movs	r2, #131	; 0x83
 8003426:	491a      	ldr	r1, [pc, #104]	; (8003490 <Ymodem_Transmit+0x310>)
 8003428:	481a      	ldr	r0, [pc, #104]	; (8003494 <Ymodem_Transmit+0x314>)
 800342a:	f7fe fb26 	bl	8001a7a <HAL_UART_Transmit>

    /* Send CRC or Check Sum based on CRC16_F */
#ifdef CRC16_F    
    temp_crc = Cal_CRC16(&aPacketData[PACKET_DATA_INDEX], PACKET_SIZE);
 800342e:	2180      	movs	r1, #128	; 0x80
 8003430:	4819      	ldr	r0, [pc, #100]	; (8003498 <Ymodem_Transmit+0x318>)
 8003432:	f7ff fd50 	bl	8002ed6 <Cal_CRC16>
 8003436:	4603      	mov	r3, r0
 8003438:	617b      	str	r3, [r7, #20]
    Serial_PutByte(temp_crc >> 8);
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	0a1b      	lsrs	r3, r3, #8
 800343e:	b2db      	uxtb	r3, r3
 8003440:	4618      	mov	r0, r3
 8003442:	f7fe ff1f 	bl	8002284 <Serial_PutByte>
    Serial_PutByte(temp_crc & 0xFF);
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	b2db      	uxtb	r3, r3
 800344a:	4618      	mov	r0, r3
 800344c:	f7fe ff1a 	bl	8002284 <Serial_PutByte>
    temp_chksum = CalcChecksum (&aPacketData[PACKET_DATA_INDEX], PACKET_SIZE);
    Serial_PutByte(temp_chksum);
#endif /* CRC16_F */

    /* Wait for Ack and 'C' */
    if (HAL_UART_Receive(&UartHandle, &a_rx_ctrl[0], 1, NAK_TIMEOUT) == HAL_OK)
 8003450:	f107 0110 	add.w	r1, r7, #16
 8003454:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003458:	2201      	movs	r2, #1
 800345a:	480e      	ldr	r0, [pc, #56]	; (8003494 <Ymodem_Transmit+0x314>)
 800345c:	f7fe fba6 	bl	8001bac <HAL_UART_Receive>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10b      	bne.n	800347e <Ymodem_Transmit+0x2fe>
    {
      if (a_rx_ctrl[0] == CA)
 8003466:	7c3b      	ldrb	r3, [r7, #16]
 8003468:	2b18      	cmp	r3, #24
 800346a:	d108      	bne.n	800347e <Ymodem_Transmit+0x2fe>
      {
          HAL_Delay( 2 );
 800346c:	2002      	movs	r0, #2
 800346e:	f7fc fecf 	bl	8000210 <HAL_Delay>
          __HAL_UART_FLUSH_DRREGISTER(&UartHandle);
 8003472:	4b08      	ldr	r3, [pc, #32]	; (8003494 <Ymodem_Transmit+0x314>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
          result = COM_ABORT;
 8003478:	2302      	movs	r3, #2
 800347a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
  }

  return result; /* file transmitted successfully */
 800347e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003482:	4618      	mov	r0, r3
 8003484:	3738      	adds	r7, #56	; 0x38
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	20000168 	.word	0x20000168
 8003490:	20000169 	.word	0x20000169
 8003494:	20000060 	.word	0x20000060
 8003498:	2000016c 	.word	0x2000016c

0800349c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800349c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800349e:	e003      	b.n	80034a8 <LoopCopyDataInit>

080034a0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80034a0:	4b0b      	ldr	r3, [pc, #44]	; (80034d0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80034a2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80034a4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80034a6:	3104      	adds	r1, #4

080034a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80034a8:	480a      	ldr	r0, [pc, #40]	; (80034d4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80034aa:	4b0b      	ldr	r3, [pc, #44]	; (80034d8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80034ac:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80034ae:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80034b0:	d3f6      	bcc.n	80034a0 <CopyDataInit>
  ldr r2, =_sbss
 80034b2:	4a0a      	ldr	r2, [pc, #40]	; (80034dc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80034b4:	e002      	b.n	80034bc <LoopFillZerobss>

080034b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80034b6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80034b8:	f842 3b04 	str.w	r3, [r2], #4

080034bc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80034bc:	4b08      	ldr	r3, [pc, #32]	; (80034e0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80034be:	429a      	cmp	r2, r3
  bcc FillZerobss
 80034c0:	d3f9      	bcc.n	80034b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80034c2:	f7ff fb47 	bl	8002b54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80034c6:	f000 f80f 	bl	80034e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80034ca:	f7fe ffd1 	bl	8002470 <main>
  bx lr
 80034ce:	4770      	bx	lr
  ldr r3, =_sidata
 80034d0:	08003bcc 	.word	0x08003bcc
  ldr r0, =_sdata
 80034d4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80034d8:	20000018 	.word	0x20000018
  ldr r2, =_sbss
 80034dc:	20000018 	.word	0x20000018
  ldr r3, = _ebss
 80034e0:	20000570 	.word	0x20000570

080034e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80034e4:	e7fe      	b.n	80034e4 <ADC1_2_IRQHandler>
	...

080034e8 <__libc_init_array>:
 80034e8:	b570      	push	{r4, r5, r6, lr}
 80034ea:	2500      	movs	r5, #0
 80034ec:	4e0c      	ldr	r6, [pc, #48]	; (8003520 <__libc_init_array+0x38>)
 80034ee:	4c0d      	ldr	r4, [pc, #52]	; (8003524 <__libc_init_array+0x3c>)
 80034f0:	1ba4      	subs	r4, r4, r6
 80034f2:	10a4      	asrs	r4, r4, #2
 80034f4:	42a5      	cmp	r5, r4
 80034f6:	d109      	bne.n	800350c <__libc_init_array+0x24>
 80034f8:	f000 f822 	bl	8003540 <_init>
 80034fc:	2500      	movs	r5, #0
 80034fe:	4e0a      	ldr	r6, [pc, #40]	; (8003528 <__libc_init_array+0x40>)
 8003500:	4c0a      	ldr	r4, [pc, #40]	; (800352c <__libc_init_array+0x44>)
 8003502:	1ba4      	subs	r4, r4, r6
 8003504:	10a4      	asrs	r4, r4, #2
 8003506:	42a5      	cmp	r5, r4
 8003508:	d105      	bne.n	8003516 <__libc_init_array+0x2e>
 800350a:	bd70      	pop	{r4, r5, r6, pc}
 800350c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003510:	4798      	blx	r3
 8003512:	3501      	adds	r5, #1
 8003514:	e7ee      	b.n	80034f4 <__libc_init_array+0xc>
 8003516:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800351a:	4798      	blx	r3
 800351c:	3501      	adds	r5, #1
 800351e:	e7f2      	b.n	8003506 <__libc_init_array+0x1e>
 8003520:	08003bc4 	.word	0x08003bc4
 8003524:	08003bc4 	.word	0x08003bc4
 8003528:	08003bc4 	.word	0x08003bc4
 800352c:	08003bc8 	.word	0x08003bc8

08003530 <memset>:
 8003530:	4603      	mov	r3, r0
 8003532:	4402      	add	r2, r0
 8003534:	4293      	cmp	r3, r2
 8003536:	d100      	bne.n	800353a <memset+0xa>
 8003538:	4770      	bx	lr
 800353a:	f803 1b01 	strb.w	r1, [r3], #1
 800353e:	e7f9      	b.n	8003534 <memset+0x4>

08003540 <_init>:
 8003540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003542:	bf00      	nop
 8003544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003546:	bc08      	pop	{r3}
 8003548:	469e      	mov	lr, r3
 800354a:	4770      	bx	lr

0800354c <_fini>:
 800354c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800354e:	bf00      	nop
 8003550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003552:	bc08      	pop	{r3}
 8003554:	469e      	mov	lr, r3
 8003556:	4770      	bx	lr
